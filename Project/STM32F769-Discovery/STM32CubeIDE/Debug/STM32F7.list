
STM32F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b510  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001264  0800b710  0800b710  0001b710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c974  0800c974  000202ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c974  0800c974  000202ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c974  0800c974  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c980  0800c980  0001c980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800c988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c0  200002ec  0800cc74  000202ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  0800cc74  000213ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002031a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e6df  00000000  00000000  0002035d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001918  00000000  00000000  0003ea3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00040358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c13  00000000  00000000  00041308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025529  00000000  00000000  00041f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a5e7  00000000  00000000  00067444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4597  00000000  00000000  00071a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a74  00000000  00000000  00145fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d5  00000000  00000000  0014ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002ec 	.word	0x200002ec
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b6f8 	.word	0x0800b6f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002f0 	.word	0x200002f0
 800023c:	0800b6f8 	.word	0x0800b6f8
 8000240:	0800c988 	.word	0x0800c988
 8000244:	20000000 	.word	0x20000000
 8000248:	200002ec 	.word	0x200002ec
 800024c:	200002ec 	.word	0x200002ec
 8000250:	200013ac 	.word	0x200013ac

08000254 <save_context>:
.type    save_context, %function
.global load_context
.type    load_context, %function

save_context:
               MRS    r0, msp
 8000254:	f3ef 8008 	mrs	r0, MSP
               STMDB  r0!, {r4-r11}
 8000258:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
               MSR    msp, r0
 800025c:	f380 8808 	msr	MSP, r0
               VPUSH.32  {s0-s15}
 8000260:	ed2d 0a10 	vpush	{s0-s15}
               VPUSH.32  {s16-s31}
 8000264:	ed2d 8a10 	vpush	{s16-s31}
               MRS    r0, msp
 8000268:	f3ef 8008 	mrs	r0, MSP
               BX     lr
 800026c:	4770      	bx	lr

0800026e <load_context>:

load_context:
               MSR    msp, r0
 800026e:	f380 8808 	msr	MSP, r0
               VPOP.32  {s16-s31}
 8000272:	ecbd 8a10 	vpop	{s16-s31}
               VPOP.32  {s0-s15}
 8000276:	ecbd 0a10 	vpop	{s0-s15}
               MRS    r0, msp
 800027a:	f3ef 8008 	mrs	r0, MSP
               LDMFD  r0!, {r4-r11}
 800027e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
               MSR    msp, r0
 8000282:	f380 8808 	msr	MSP, r0
               BX     lr
 8000286:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <strlen>:
 8000330:	4603      	mov	r3, r0
 8000332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000336:	2a00      	cmp	r2, #0
 8000338:	d1fb      	bne.n	8000332 <strlen+0x2>
 800033a:	1a18      	subs	r0, r3, r0
 800033c:	3801      	subs	r0, #1
 800033e:	4770      	bx	lr

08000340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	2b00      	cmp	r3, #0
 8000350:	db0b      	blt.n	800036a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	f003 021f 	and.w	r2, r3, #31
 8000358:	4907      	ldr	r1, [pc, #28]	; (8000378 <__NVIC_EnableIRQ+0x38>)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	095b      	lsrs	r3, r3, #5
 8000360:	2001      	movs	r0, #1
 8000362:	fa00 f202 	lsl.w	r2, r0, r2
 8000366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	e000e100 	.word	0xe000e100

0800037c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000380:	f3bf 8f4f 	dsb	sy
}
 8000384:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <__NVIC_SystemReset+0x24>)
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800038e:	4904      	ldr	r1, [pc, #16]	; (80003a0 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000390:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <__NVIC_SystemReset+0x28>)
 8000392:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000394:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <__NVIC_SystemReset+0x20>
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	05fa0004 	.word	0x05fa0004

080003a8 <_ZN9EmbSysLib2Hw14DisplayGraphic7refreshEv>:

    //---------------------------------------------------------------
    /*! Refresh the display.
        Some display need a refresh to display new content
    */
    virtual void refresh( void )
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
    {
    }
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <_ZN9EmbSysLib2Hw14DisplayGraphic8getWidthEv>:

    //---------------------------------------------------------------
    /*! Get horizontal display size
        \return Number of pixel
    */
    virtual WORD getWidth( void )
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    {
      return( Hsize );
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8a1b      	ldrh	r3, [r3, #16]
    }
 80003c8:	4618      	mov	r0, r3
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <_ZN9EmbSysLib2Hw14DisplayGraphic9getHeightEv>:

    //---------------------------------------------------------------
    /*! Get vertical display size
        \return Number of pixel
    */
    virtual WORD getHeight( void )
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
		{
			return( Vsize );
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	8a5b      	ldrh	r3, [r3, #18]
		}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>:
        \param red
        \param green
        \param blue
        \return Color code
    */
    static WORD RGB2color( BYTE red, BYTE green, BYTE blue )
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
 80003f6:	460b      	mov	r3, r1
 80003f8:	71bb      	strb	r3, [r7, #6]
 80003fa:	4613      	mov	r3, r2
 80003fc:	717b      	strb	r3, [r7, #5]
    {
      return(    ((blue  & 0xF8) >> 3)  // 5 bit,  0.. 4
 80003fe:	797b      	ldrb	r3, [r7, #5]
 8000400:	08db      	lsrs	r3, r3, #3
 8000402:	b2db      	uxtb	r3, r3
 8000404:	b21a      	sxth	r2, r3
               | ((green & 0xFC) << 3)  // 6 bit,  5..10
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	b21b      	sxth	r3, r3
 800040c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000410:	b21b      	sxth	r3, r3
 8000412:	4313      	orrs	r3, r2
 8000414:	b21a      	sxth	r2, r3
               | ((red   & 0xF8) << 8)  // 5 bit, 11..15
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	021b      	lsls	r3, r3, #8
 800041a:	b219      	sxth	r1, r3
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh+0x48>)
 800041e:	400b      	ands	r3, r1
 8000420:	b21b      	sxth	r3, r3
 8000422:	4313      	orrs	r3, r2
 8000424:	b21b      	sxth	r3, r3
             );
 8000426:	b29b      	uxth	r3, r3
    }
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	fffff800 	.word	0xfffff800

08000438 <_ZN9EmbSysLib3Dev7Digital3setEv>:
    virtual void set( bool value );

    //---------------------------------------------------------------
    /*! Set digital output to logic level 'true'
    */
    virtual void set( void )
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
    {
      set( 1 );
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3304      	adds	r3, #4
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2101      	movs	r1, #1
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	4798      	blx	r3
    }
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_ZN9EmbSysLib3Dev7Digital3clrEv>:

    //---------------------------------------------------------------
    /*! Clear digital output to logic level 'false'
    */
    virtual void clr( void )
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
    {
      set( 0 );
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	3304      	adds	r3, #4
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2100      	movs	r1, #0
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	4798      	blx	r3
    }
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <_ZN9EmbSysLib3Dev7Digital6toggleEv>:

    //---------------------------------------------------------------
    /*! Invert digital output
    */
    virtual void toggle( void )
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    {
      set( !valueOut );
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3304      	adds	r3, #4
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7952      	ldrb	r2, [r2, #5]
 8000488:	f082 0201 	eor.w	r2, r2, #1
 800048c:	b2d2      	uxtb	r2, r2
 800048e:	4611      	mov	r1, r2
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	4798      	blx	r3
    }
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <_ZN9EmbSysLib3Dev7Digital8getEventEv>:

    //---------------------------------------------------------------
    /*! Read input state and compare with previous state
        \return Event (NONE, ACTIVATED or RELEASED)
    */
    virtual Event getEvent( void )
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
    {
      bool valueInLast = valueIn;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	73fb      	strb	r3, [r7, #15]
      valueIn = get();
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	3314      	adds	r3, #20
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	4798      	blx	r3
 80004b6:	4603      	mov	r3, r0
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	711a      	strb	r2, [r3, #4]
      if( valueIn != valueInLast )
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	7bfa      	ldrb	r2, [r7, #15]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d007      	beq.n	80004d8 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3c>
      {
        return( (valueIn)?ACTIVATED:RELEASED );
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x38>
 80004d0:	2301      	movs	r3, #1
 80004d2:	e002      	b.n	80004da <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3e>
 80004d4:	2302      	movs	r3, #2
 80004d6:	e000      	b.n	80004da <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3e>
      }
      return( NONE );
 80004d8:	2300      	movs	r3, #0
    }
 80004da:	4618      	mov	r0, r3
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <_ZN9EmbSysLib3Dev7DigitalaSEb>:
    //---------------------------------------------------------------
    /*! Set digital output
        \param value Logic level of digital output
        \return value
    */
    virtual bool operator=( bool value )
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	460b      	mov	r3, r1
 80004ec:	70fb      	strb	r3, [r7, #3]
    {
      set( value );
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3304      	adds	r3, #4
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	78fa      	ldrb	r2, [r7, #3]
 80004f8:	4611      	mov	r1, r2
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	4798      	blx	r3
      return( value );
 80004fe:	78fb      	ldrb	r3, [r7, #3]
    }
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_ZN9EmbSysLib3Dev7DigitalaSERS1_>:
    //---------------------------------------------------------------
    /*! Set digital output
        \param x Reference to an Digital object
        \return Logic input level
    */
    virtual bool operator=( Digital &x)
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
    {
      set( x.get() );
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3304      	adds	r3, #4
 8000518:	681c      	ldr	r4, [r3, #0]
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3314      	adds	r3, #20
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6838      	ldr	r0, [r7, #0]
 8000524:	4798      	blx	r3
 8000526:	4603      	mov	r3, r0
 8000528:	4619      	mov	r1, r3
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	47a0      	blx	r4
      return( valueOut );
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	795b      	ldrb	r3, [r3, #5]
    }
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bd90      	pop	{r4, r7, pc}

0800053a <_ZN9EmbSysLib3Dev7DigitalcvbEv>:

    //---------------------------------------------------------------
    /*! Get the input state
        \return Digital input state (logic level)
    */
    virtual operator bool( void )
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
    {
      return( get() );
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3314      	adds	r3, #20
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	4798      	blx	r3
 800054e:	4603      	mov	r3, r0
    }
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>:
  enableInterrupt();
}

//-------------------------------------------------------------------
void System::disableInterrupt( void )
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  __disable_irq();
  cntInterrupt++;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <_ZN9EmbSysLib2Hw6System16disableInterruptEv+0x20>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <_ZN9EmbSysLib2Hw6System16disableInterruptEv+0x20>)
 800056a:	701a      	strb	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000308 	.word	0x20000308

0800057c <_ZN9EmbSysLib2Hw6System15enableInterruptEv>:

//-------------------------------------------------------------------
void System::enableInterrupt( void )
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  if( cntInterrupt > 0 )
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d005      	beq.n	8000594 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x18>
  {
    cntInterrupt--;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 8000592:	701a      	strb	r2, [r3, #0]
  }
  if( cntInterrupt == 0 )
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 800059c:	b662      	cpsie	i
}
 800059e:	bf00      	nop
  {
     __enable_irq();
  }
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000308 	.word	0x20000308

080005b0 <_ZN9EmbSysLib2Hw6System5resetEv>:
  IWDG->KR  = 0xAAAA;
}

//-------------------------------------------------------------------
void System::reset( void )
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80005b4:	f3bf 8f4f 	dsb	sy
}
 80005b8:	bf00      	nop
  __DSB();
  *((unsigned long *)(0x2000FFF0)) = 0xDEADBEEF;
 80005ba:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <_ZN9EmbSysLib2Hw6System5resetEv+0x14>)
 80005bc:	4a02      	ldr	r2, [pc, #8]	; (80005c8 <_ZN9EmbSysLib2Hw6System5resetEv+0x18>)
 80005be:	601a      	str	r2, [r3, #0]
  NVIC_SystemReset();
 80005c0:	f7ff fedc 	bl	800037c <__NVIC_SystemReset>
 80005c4:	2000fff0 	.word	0x2000fff0
 80005c8:	deadbeef 	.word	0xdeadbeef
 80005cc:	00000000 	.word	0x00000000

080005d0 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt>:

#pragma GCC push_options
#pragma GCC optimize ("-O0")
//-------------------------------------------------------------------
void System::delayMicroSec( unsigned short delay )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  //! \todo check calibration
  // Calibrated at delayMilliSec( 1000 )
  // Calibrated with System::delayMilliSec( 1000 ), f_clk = 200 MHz, no interrupts

  unsigned steps = 0.499E-6*system_PCLK*delay;
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	ee07 3a90 	vmov	s15, r3
 80005e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80005e4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000618 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x48>
 80005e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005f0:	ee17 3a90 	vmov	r3, s15
 80005f4:	60fb      	str	r3, [r7, #12]
  for( ; steps > 0; steps-- )
 80005f6:	e003      	b.n	8000600 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x30>
  {
    asm volatile("nop");
 80005f8:	bf00      	nop
  for( ; steps > 0; steps-- )
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1f8      	bne.n	80005f8 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x28>
  }
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	f3af 8000 	nop.w
 8000618:	33333333 	.word	0x33333333
 800061c:	4058f333 	.word	0x4058f333

08000620 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>:

//-------------------------------------------------------------------
void System::delayMilliSec( unsigned short delay )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  for( ; delay > 0; delay-- )
 800062a:	e006      	b.n	800063a <_ZN9EmbSysLib2Hw6System13delayMilliSecEt+0x1a>
  {
    delayMicroSec(1000);
 800062c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000630:	f7ff ffce 	bl	80005d0 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt>
  for( ; delay > 0; delay-- )
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	3b01      	subs	r3, #1
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f5      	bne.n	800062c <_ZN9EmbSysLib2Hw6System13delayMilliSecEt+0xc>
  }
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <SystemInit>:
//
// SystemInit
//
//*******************************************************************
void SystemInit( void )
{
 800064c:	b480      	push	{r7}
 800064e:	b091      	sub	sp, #68	; 0x44
 8000650:	af00      	add	r7, sp, #0
  // Set FPU
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    // System Control Block (SCB), Coprocessor Access Control Register
    SCB->CPACR |=   (3UL << 10*2)  // CP10: Full access
 8000652:	4ba1      	ldr	r3, [pc, #644]	; (80008d8 <SystemInit+0x28c>)
 8000654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000658:	4a9f      	ldr	r2, [pc, #636]	; (80008d8 <SystemInit+0x28c>)
 800065a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800065e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

//	SCB_DisableDCache();

  // Clock control register
  RCC->CR |= RCC_CR_HSION;    //! \todo why is it switched on here?
 8000662:	4b9e      	ldr	r3, [pc, #632]	; (80008dc <SystemInit+0x290>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a9d      	ldr	r2, [pc, #628]	; (80008dc <SystemInit+0x290>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6013      	str	r3, [r2, #0]

  // Clock configuration register
  RCC->CFGR = 0x00000000;       // reset ...
 800066e:	4b9b      	ldr	r3, [pc, #620]	; (80008dc <SystemInit+0x290>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]

  // Clock control register
  RCC->CR &= ~(   RCC_CR_PLLON  // reset ...
 8000674:	4b99      	ldr	r3, [pc, #612]	; (80008dc <SystemInit+0x290>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4998      	ldr	r1, [pc, #608]	; (80008dc <SystemInit+0x290>)
 800067a:	4b99      	ldr	r3, [pc, #612]	; (80008e0 <SystemInit+0x294>)
 800067c:	4013      	ands	r3, r2
 800067e:	600b      	str	r3, [r1, #0]
                | RCC_CR_CSSON
                | RCC_CR_HSEON );

  // PLL configuration register
  RCC->PLLCFGR = 0x24003010;   // Reset value,
 8000680:	4b96      	ldr	r3, [pc, #600]	; (80008dc <SystemInit+0x290>)
 8000682:	4a98      	ldr	r2, [pc, #608]	; (80008e4 <SystemInit+0x298>)
 8000684:	605a      	str	r2, [r3, #4]
                               // see Reference manual

  // Clock control register
  RCC->CR &= ~(RCC_CR_HSEBYP); // reset ...
 8000686:	4b95      	ldr	r3, [pc, #596]	; (80008dc <SystemInit+0x290>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a94      	ldr	r2, [pc, #592]	; (80008dc <SystemInit+0x290>)
 800068c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000690:	6013      	str	r3, [r2, #0]

  // Clock interrupt register
  RCC->CIR = 0;                // Disable all interrupts
 8000692:	4b92      	ldr	r3, [pc, #584]	; (80008dc <SystemInit+0x290>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]


  // Flash Acess Control Register
  FLASH->ACR =  // FLASH_ACR_ICEN          // Instruction cache enable
 8000698:	4b93      	ldr	r3, [pc, #588]	; (80008e8 <SystemInit+0x29c>)
 800069a:	2207      	movs	r2, #7
 800069c:	601a      	str	r2, [r3, #0]
               //| FLASH_ACR_DCEN          // Data cache enable
               0| FLASH_ACR_LATENCY_7WS;  // Latency: 5 wait states

  // Advanced Peripheral Bus Enable Register
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;    // Power interface clock: enable
 800069e:	4b8f      	ldr	r3, [pc, #572]	; (80008dc <SystemInit+0x290>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	4a8e      	ldr	r2, [pc, #568]	; (80008dc <SystemInit+0x290>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	6413      	str	r3, [r2, #64]	; 0x40
//    PWR->CR   |= (1<<14);                 // Regulator voltage scaling output selection:
                                        // VOS=1: Scale 1 mode

  // Clock Configuration Register
  //! \todo Check clock configuration
  RCC->CFGR |=   RCC_CFGR_HPRE_DIV1     // AHB prescaler:                   HCLK  = SYSCLK
 80006aa:	4b8c      	ldr	r3, [pc, #560]	; (80008dc <SystemInit+0x290>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	4a8b      	ldr	r2, [pc, #556]	; (80008dc <SystemInit+0x290>)
 80006b0:	f443 4334 	orr.w	r3, r3, #46080	; 0xb400
 80006b4:	6093      	str	r3, [r2, #8]
  //
  //---- HSE --------------------------------------------------------
  #if OSCSRC == HSE || OSCSRC == HSE_BYPASS

      #if OSCSRC == HSE
        RCC->CR |= (RCC_CR_HSEON );
 80006b6:	4b89      	ldr	r3, [pc, #548]	; (80008dc <SystemInit+0x290>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a88      	ldr	r2, [pc, #544]	; (80008dc <SystemInit+0x290>)
 80006bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c0:	6013      	str	r3, [r2, #0]
      #else
        RCC->CR |= (RCC_CR_HSEON | RCC_CR_HSEBYP);
      #endif
      const DWORD pll_Src = RCC_PLLCFGR_PLLSRC_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      while( !(RCC->CR & RCC_CR_HSERDY) ); // wait for HSE ready
 80006c8:	bf00      	nop
 80006ca:	4b84      	ldr	r3, [pc, #528]	; (80008dc <SystemInit+0x290>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf0c      	ite	eq
 80006d6:	2301      	moveq	r3, #1
 80006d8:	2300      	movne	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f4      	bne.n	80006ca <SystemInit+0x7e>
  #undef HSI


  //! \todo Check code
  // Clock control register
  RCC->CR |= RCC_CR_HSION;   // Need HSION in ADC (only?)
 80006e0:	4b7e      	ldr	r3, [pc, #504]	; (80008dc <SystemInit+0x290>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a7d      	ldr	r2, [pc, #500]	; (80008dc <SystemInit+0x290>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]
  //-----------------------------------------------------------------
  // calculate PLL
  // f_in  =   1 MHz => M = f_osc/f_in
  // f_out = 400 MHz => N = f_out/f_in

  const DWORD pll_M = (OSCFREQ)/1000UL;  // -> f_in      =     1 MHz
 80006ec:	2319      	movs	r3, #25
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  const DWORD pll_N = 400;               // -> f_out     = 400*1 MHz
 80006f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34

  //-----------------------------------------------------------------
  // calculate clock divider PLL
  const DWORD pll_P = 2;                 // -> f_pllclk  = 400/2 MHz = 200  MHz
 80006f6:	2302      	movs	r3, #2
 80006f8:	633b      	str	r3, [r7, #48]	; 0x30
  const DWORD pll_Q = 8;                 // -> f_pll48ck = 400/8 MHz =  50  MHz
 80006fa:	2308      	movs	r3, #8
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  const DWORD pll_R = 7;                 // -> f_plldsi  = 400/7 MHz =  57.1 MHz
 80006fe:	2307      	movs	r3, #7
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28

  // PLL configuration register
  RCC->PLLCFGR =   pll_Src
 8000702:	4b76      	ldr	r3, [pc, #472]	; (80008dc <SystemInit+0x290>)
 8000704:	4a79      	ldr	r2, [pc, #484]	; (80008ec <SystemInit+0x2a0>)
 8000706:	605a      	str	r2, [r3, #4]
                 | ((pll_P/2-1) << 16)
                 | ( pll_Q      << 24)
                 | ( pll_R      << 28);

  // Clock control register
  RCC->CR |= RCC_CR_PLLON;            // PLL enable: ON
 8000708:	4b74      	ldr	r3, [pc, #464]	; (80008dc <SystemInit+0x290>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a73      	ldr	r2, [pc, #460]	; (80008dc <SystemInit+0x290>)
 800070e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000712:	6013      	str	r3, [r2, #0]
  while( !(RCC->CR & RCC_CR_PLLRDY) );// Wait until PLL is ready
 8000714:	bf00      	nop
 8000716:	4b71      	ldr	r3, [pc, #452]	; (80008dc <SystemInit+0x290>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf0c      	ite	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	2300      	movne	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f4      	bne.n	8000716 <SystemInit+0xca>

  // Clock Configuration Register
  RCC->CFGR &= ~(RCC_CFGR_SW);          // reset system clock switch
 800072c:	4b6b      	ldr	r3, [pc, #428]	; (80008dc <SystemInit+0x290>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	4a6a      	ldr	r2, [pc, #424]	; (80008dc <SystemInit+0x290>)
 8000732:	f023 0303 	bic.w	r3, r3, #3
 8000736:	6093      	str	r3, [r2, #8]
  RCC->CFGR |=  (RCC_CFGR_SW_PLL);      // System clock switch:
 8000738:	4b68      	ldr	r3, [pc, #416]	; (80008dc <SystemInit+0x290>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	4a67      	ldr	r2, [pc, #412]	; (80008dc <SystemInit+0x290>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	6093      	str	r3, [r2, #8]
                                        //  PLL selected as system clock

  // Wait for system clock switch is ready
  while( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL );
 8000744:	bf00      	nop
 8000746:	4b65      	ldr	r3, [pc, #404]	; (80008dc <SystemInit+0x290>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f003 030c 	and.w	r3, r3, #12
 800074e:	2b08      	cmp	r3, #8
 8000750:	bf14      	ite	ne
 8000752:	2301      	movne	r3, #1
 8000754:	2300      	moveq	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f4      	bne.n	8000746 <SystemInit+0xfa>
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //-----------------------------------------------------------------
  // calculate PLLSAI
  // f_in  =   1 MHz
  // f_out = 384 MHz => N = f_out/f_in
  const DWORD pllsai_N = 384;
 800075c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000760:	627b      	str	r3, [r7, #36]	; 0x24

  //-----------------------------------------------------------------
  // calculate clock divider PLLSAI
	const DWORD pllsai_P = 8;	// -> f_pllsaip = 384/8 MHz = 48 MHz (USB)
 8000762:	2308      	movs	r3, #8
 8000764:	623b      	str	r3, [r7, #32]
	const DWORD pllsai_Q = 4; // -> f_pllsaiq = 384/4 MHz = 96 MHz (default)
 8000766:	2304      	movs	r3, #4
 8000768:	61fb      	str	r3, [r7, #28]
	const DWORD pllsai_R = 5;	// -> f_pllsaip = 384/5 MHz = 76.8 MHz (LCD-TFT)
 800076a:	2305      	movs	r3, #5
 800076c:	61bb      	str	r3, [r7, #24]

  RCC->CR &= ~RCC_CR_PLLSAION;         // PLLSAI disable   ???
 800076e:	4b5b      	ldr	r3, [pc, #364]	; (80008dc <SystemInit+0x290>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a5a      	ldr	r2, [pc, #360]	; (80008dc <SystemInit+0x290>)
 8000774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000778:	6013      	str	r3, [r2, #0]
  while( RCC->CR & RCC_CR_PLLSAIRDY ); // Wait until disabled ????
 800077a:	bf00      	nop
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <SystemInit+0x290>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f4      	bne.n	800077c <SystemInit+0x130>

  RCC->PLLSAICFGR =    ( pllsai_N      <<  6)
 8000792:	4b52      	ldr	r3, [pc, #328]	; (80008dc <SystemInit+0x290>)
 8000794:	4a56      	ldr	r2, [pc, #344]	; (80008f0 <SystemInit+0x2a4>)
 8000796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                     | ((pllsai_P/2-1) << 16)
                     | ( pllsai_Q      << 24)
                     | ( pllsai_R      << 28);

  RCC->DCKCFGR1 = (RCC->DCKCFGR1 & ~RCC_DCKCFGR1_PLLSAIDIVR)  | 0/*RCC_PLLSAIDIVR_2*/;
 800079a:	4b50      	ldr	r3, [pc, #320]	; (80008dc <SystemInit+0x290>)
 800079c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007a0:	4a4e      	ldr	r2, [pc, #312]	; (80008dc <SystemInit+0x290>)
 80007a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 |= RCC_DCKCFGR2_CK48MSEL; // PLLSAI is 48Mhz-USB clock source
 80007aa:	4b4c      	ldr	r3, [pc, #304]	; (80008dc <SystemInit+0x290>)
 80007ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007b0:	4a4a      	ldr	r2, [pc, #296]	; (80008dc <SystemInit+0x290>)
 80007b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Enable PLLSAI Clock */
  RCC->CR |= RCC_CR_PLLSAION;
 80007ba:	4b48      	ldr	r3, [pc, #288]	; (80008dc <SystemInit+0x290>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a47      	ldr	r2, [pc, #284]	; (80008dc <SystemInit+0x290>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6013      	str	r3, [r2, #0]
  while( !(RCC->CR & RCC_CR_PLLSAIRDY) );
 80007c6:	bf00      	nop
 80007c8:	4b44      	ldr	r3, [pc, #272]	; (80008dc <SystemInit+0x290>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f4      	bne.n	80007c8 <SystemInit+0x17c>
  //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  // System Control Block
  SCB->VTOR = FLASH_BASE | 0x00; // Vector Table Relocation in internal FLASH
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <SystemInit+0x28c>)
 80007e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e4:	609a      	str	r2, [r3, #8]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <SystemInit+0x28c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007ee:	f3bf 8f4f 	dsb	sy
}
 80007f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007f4:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <SystemInit+0x28c>)
 80007f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007fa:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	0b5b      	lsrs	r3, r3, #13
 8000800:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000804:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800080e:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	015a      	lsls	r2, r3, #5
 8000814:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000818:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081e:	492e      	ldr	r1, [pc, #184]	; (80008d8 <SystemInit+0x28c>)
 8000820:	4313      	orrs	r3, r2
 8000822:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	603a      	str	r2, [r7, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1ea      	bne.n	8000810 <SystemInit+0x1c4>
    } while(sets-- != 0U);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf14      	ite	ne
 8000844:	2301      	movne	r3, #1
 8000846:	2300      	moveq	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1db      	bne.n	8000806 <SystemInit+0x1ba>
  __ASM volatile ("dsb 0xF":::"memory");
 800084e:	f3bf 8f4f 	dsb	sy
}
 8000852:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000854:	f3bf 8f6f 	isb	sy
}
 8000858:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800085a:	bf00      	nop
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <SystemInit+0x28c>)
 800085e:	2200      	movs	r2, #0
 8000860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000864:	f3bf 8f4f 	dsb	sy
}
 8000868:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <SystemInit+0x28c>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a1a      	ldr	r2, [pc, #104]	; (80008d8 <SystemInit+0x28c>)
 8000870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000874:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000876:	f3bf 8f4f 	dsb	sy
}
 800087a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <SystemInit+0x28c>)
 800087e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000882:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	0b5b      	lsrs	r3, r3, #13
 8000888:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800088c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	08db      	lsrs	r3, r3, #3
 8000892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000896:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	015a      	lsls	r2, r3, #5
 800089c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008a0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80008a6:	490c      	ldr	r1, [pc, #48]	; (80008d8 <SystemInit+0x28c>)
 80008a8:	4313      	orrs	r3, r2
 80008aa:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	60fa      	str	r2, [r7, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1ea      	bne.n	8000898 <SystemInit+0x24c>
    } while(sets-- != 0U);
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	613a      	str	r2, [r7, #16]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1db      	bne.n	800088e <SystemInit+0x242>
 80008d6:	e00d      	b.n	80008f4 <SystemInit+0x2a8>
 80008d8:	e000ed00 	.word	0xe000ed00
 80008dc:	40023800 	.word	0x40023800
 80008e0:	fef6ffff 	.word	0xfef6ffff
 80008e4:	24003010 	.word	0x24003010
 80008e8:	40023c00 	.word	0x40023c00
 80008ec:	78406419 	.word	0x78406419
 80008f0:	54036000 	.word	0x54036000
  __ASM volatile ("dsb 0xF":::"memory");
 80008f4:	f3bf 8f4f 	dsb	sy
}
 80008f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008fa:	f3bf 8f6f 	isb	sy
}
 80008fe:	bf00      	nop
}
 8000900:	bf00      	nop

  SCB_InvalidateDCache();
	SCB_DisableDCache();
}
 8000902:	bf00      	nop
 8000904:	3744      	adds	r7, #68	; 0x44
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <_Z18System_GetDSIclockv>:
//
// System_GetDSIclock
//
//*******************************************************************
DWORD System_GetDSIclock( void )
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return( OSCFREQ );
 8000914:	f246 13a8 	movw	r3, #25000	; 0x61a8
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>:
//-------------------------------------------------------------------
Std::Report PinConfig::report( ReportID_Hw::Module::SYSTEM_PIN_CONFIG );

//-------------------------------------------------------------------
void PinConfig::set( GPIO_TypeDef *gpio, BYTE pinId, DWORD mode, BYTE af )
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b08e      	sub	sp, #56	; 0x38
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	461a      	mov	r2, r3
 800092e:	460b      	mov	r3, r1
 8000930:	72fb      	strb	r3, [r7, #11]
 8000932:	4613      	mov	r3, r2
 8000934:	72bb      	strb	r3, [r7, #10]
  BYTE pin2 = 2*pinId;
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  BYTE pin3 = pinId>>3;
 800093e:	7afb      	ldrb	r3, [r7, #11]
 8000940:	08db      	lsrs	r3, r3, #3
 8000942:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  MTYPE bitmask1 = ~((MTYPE)0x01 <<     pinId    );
 8000946:	7afb      	ldrb	r3, [r7, #11]
 8000948:	2201      	movs	r2, #1
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
  MTYPE bitmask2 = ~((MTYPE)0x03 <<     pin2     );
 8000952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MTYPE bitmask3 = ~((MTYPE)0x0F << (4*(pinId%8)));
 8000960:	7afb      	ldrb	r3, [r7, #11]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	220f      	movs	r2, #15
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28

  MTYPE moder   = (MTYPE)((mode    )&0x03) << pin2;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f003 0203 	and.w	r2, r3, #3
 8000978:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  MTYPE pupdr   = (MTYPE)((mode>> 8)&0x03) << pin2;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	f003 0203 	and.w	r2, r3, #3
 800098a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	623b      	str	r3, [r7, #32]
  MTYPE otyper  = (MTYPE)((mode>> 4)&0x01) << pinId;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	f003 0201 	and.w	r2, r3, #1
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	61fb      	str	r3, [r7, #28]
  MTYPE ospeedr = (MTYPE)((mode>>12)&0x03) << pin2;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	0b1b      	lsrs	r3, r3, #12
 80009a8:	f003 0203 	and.w	r2, r3, #3
 80009ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	61bb      	str	r3, [r7, #24]
  MTYPE afr     = (MTYPE)((af      )&0x0F) << (4*(pinId%8));
 80009b6:	7abb      	ldrb	r3, [r7, #10]
 80009b8:	f003 020f 	and.w	r2, r3, #15
 80009bc:	7afb      	ldrb	r3, [r7, #11]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	617b      	str	r3, [r7, #20]

  Hw::System::disableInterrupt();
 80009ca:	f7ff fdc5 	bl	8000558 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
  gpio->MODER     = ( gpio->MODER     & bitmask2 ) | moder;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d4:	401a      	ands	r2, r3
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	431a      	orrs	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	601a      	str	r2, [r3, #0]
  gpio->PUPDR     = ( gpio->PUPDR     & bitmask2 ) | pupdr;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	68da      	ldr	r2, [r3, #12]
 80009e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e4:	401a      	ands	r2, r3
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	431a      	orrs	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	60da      	str	r2, [r3, #12]
  gpio->OTYPER    = ( gpio->OTYPER    & bitmask1 ) | otyper;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f4:	401a      	ands	r2, r3
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	605a      	str	r2, [r3, #4]
  gpio->OSPEEDR   = ( gpio->OSPEEDR   & bitmask2 ) | ospeedr;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a04:	401a      	ands	r2, r3
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	609a      	str	r2, [r3, #8]
  gpio->AFR[pin3] = ( gpio->AFR[pin3] & bitmask3 ) | afr;
 8000a0e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3208      	adds	r2, #8
 8000a16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1c:	ea02 0103 	and.w	r1, r2, r3
 8000a20:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	4319      	orrs	r1, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3208      	adds	r2, #8
 8000a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Hw::System::enableInterrupt();
 8000a30:	f7ff fda4 	bl	800057c <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
}
 8000a34:	bf00      	nop
 8000a36:	3738      	adds	r7, #56	; 0x38
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>:

//-------------------------------------------------------------------
bool PinConfig::set( Function func, DWORD mode )
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	80fb      	strh	r3, [r7, #6]
  BYTE pin;
  BYTE af;

  GPIO_TypeDef *gpio;

  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 8000a48:	2300      	movs	r3, #0
 8000a4a:	827b      	strh	r3, [r7, #18]
 8000a4c:	e0b0      	b.n	8000bb0 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x174>
  {
    if( (table[i] >> 16) == func )
 8000a4e:	8a7b      	ldrh	r3, [r7, #18]
 8000a50:	4a60      	ldr	r2, [pc, #384]	; (8000bd4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a56:	141a      	asrs	r2, r3, #16
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	f040 80a5 	bne.w	8000baa <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x16e>
    {
      port = (table[i]>>12)&0x0F;
 8000a60:	8a7b      	ldrh	r3, [r7, #18]
 8000a62:	4a5c      	ldr	r2, [pc, #368]	; (8000bd4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	131b      	asrs	r3, r3, #12
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	747b      	strb	r3, [r7, #17]
      pin  = (table[i]>> 4)&0x0F;
 8000a72:	8a7b      	ldrh	r3, [r7, #18]
 8000a74:	4a57      	ldr	r2, [pc, #348]	; (8000bd4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	111b      	asrs	r3, r3, #4
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	743b      	strb	r3, [r7, #16]
      af   = (table[i]>> 0)&0x0F;
 8000a84:	8a7b      	ldrh	r3, [r7, #18]
 8000a86:	4a53      	ldr	r2, [pc, #332]	; (8000bd4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	73fb      	strb	r3, [r7, #15]

      if( (mode & 0x0F) != ANALOG )
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d003      	beq.n	8000aa6 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x6a>
      {
        mode |= ALTERNATE_FUNC;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	603b      	str	r3, [r7, #0]
      }

      switch( port )
 8000aa6:	7c7b      	ldrb	r3, [r7, #17]
 8000aa8:	2b09      	cmp	r3, #9
 8000aaa:	d871      	bhi.n	8000b90 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x154>
 8000aac:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x78>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000add 	.word	0x08000add
 8000ab8:	08000aef 	.word	0x08000aef
 8000abc:	08000b01 	.word	0x08000b01
 8000ac0:	08000b13 	.word	0x08000b13
 8000ac4:	08000b25 	.word	0x08000b25
 8000ac8:	08000b37 	.word	0x08000b37
 8000acc:	08000b49 	.word	0x08000b49
 8000ad0:	08000b5b 	.word	0x08000b5b
 8000ad4:	08000b6d 	.word	0x08000b6d
 8000ad8:	08000b7f 	.word	0x08000b7f
      {
        case 0: gpio = (GPIO_TypeDef *)(GPIOA_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8000adc:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x19c>)
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	4b3e      	ldr	r3, [pc, #248]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a3d      	ldr	r2, [pc, #244]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	e055      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 1: gpio = (GPIO_TypeDef *)(GPIOB_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a4>)
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a39      	ldr	r2, [pc, #228]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	e04c      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 2: gpio = (GPIO_TypeDef *)(GPIOC_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8000b00:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a8>)
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a34      	ldr	r2, [pc, #208]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	e043      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 3: gpio = (GPIO_TypeDef *)(GPIOD_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8000b12:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1ac>)
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	e03a      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 4: gpio = (GPIO_TypeDef *)(GPIOE_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8000b24:	4b31      	ldr	r3, [pc, #196]	; (8000bec <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b0>)
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a2b      	ldr	r2, [pc, #172]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	e031      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 5: gpio = (GPIO_TypeDef *)(GPIOF_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b4>)
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	e028      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 6: gpio = (GPIO_TypeDef *)(GPIOG_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; break;
 8000b48:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b8>)
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	e01f      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 7: gpio = (GPIO_TypeDef *)(GPIOH_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1bc>)
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	e016      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 8: gpio = (GPIO_TypeDef *)(GPIOI_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; break;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c0>)
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	e00d      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 9: gpio = (GPIO_TypeDef *)(GPIOJ_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; break;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c4>)
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	e004      	b.n	8000b9a <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        default:report.error( ReportID_Hw::Event::HARDWARE_NOT_SUPPORTED );
 8000b90:	210d      	movs	r1, #13
 8000b92:	481c      	ldr	r0, [pc, #112]	; (8000c04 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c8>)
 8000b94:	f002 fc96 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
          break;
 8000b98:	bf00      	nop
      }
      set( gpio, pin, mode, af );
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	7c39      	ldrb	r1, [r7, #16]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	6978      	ldr	r0, [r7, #20]
 8000ba2:	f7ff febe 	bl	8000922 <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>
      return( true );
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x18e>
  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 8000baa:	8a7b      	ldrh	r3, [r7, #18]
 8000bac:	3301      	adds	r3, #1
 8000bae:	827b      	strh	r3, [r7, #18]
 8000bb0:	8a7b      	ldrh	r3, [r7, #18]
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bbc:	f47f af47 	bne.w	8000a4e <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x12>
    }
  }
  // Error: The table does not contain the func
  report.error( ReportID_Hw::Event::CONFIG_NOT_SUPPORTED );
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4810      	ldr	r0, [pc, #64]	; (8000c04 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c8>)
 8000bc4:	f002 fc7e 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
  return( false );
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40021400 	.word	0x40021400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40021c00 	.word	0x40021c00
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	40022400 	.word	0x40022400
 8000c04:	2000030c 	.word	0x2000030c

08000c08 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE>:
Adc *Adc_Mcu::adc1 = 0;
Adc *Adc_Mcu::adc2 = 0;
Adc *Adc_Mcu::adc3 = 0;

//-------------------------------------------------------------------
Adc_Mcu::Adc_Mcu( AdcId adcId, Timer &timer )
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	460b      	mov	r3, r1
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	72fb      	strb	r3, [r7, #11]

: Adc( ReportID_Hw::Module::ADC_MCU, 16 /*num of channels*/, timer )
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2210      	movs	r2, #16
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	f002 fcb9 	bl	8003594 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE>
 8000c22:	4a2b      	ldr	r2, [pc, #172]	; (8000cd0 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xc8>)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	601a      	str	r2, [r3, #0]

{
  id = adcId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	7afa      	ldrb	r2, [r7, #11]
 8000c2c:	769a      	strb	r2, [r3, #26]

  switch( id )
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	7e9b      	ldrb	r3, [r3, #26]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d020      	beq.n	8000c78 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0x70>
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	dc2b      	bgt.n	8000c92 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0x8a>
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d002      	beq.n	8000c44 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0x3c>
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d00d      	beq.n	8000c5e <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0x56>
 8000c42:	e026      	b.n	8000c92 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0x8a>
  {
    case ADC_1: 
      RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xcc>)
 8000c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c48:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xcc>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6453      	str	r3, [r2, #68]	; 0x44
      adc1   = this;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xd0>)
 8000c54:	6013      	str	r3, [r2, #0]
      adcPtr = ADC1;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xd4>)
 8000c5a:	61da      	str	r2, [r3, #28]
      break;
 8000c5c:	e020      	b.n	8000ca0 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0x98>

    case ADC_2: 
      RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xcc>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xcc>)
 8000c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
      adc2 = this; 
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xd8>)
 8000c6e:	6013      	str	r3, [r2, #0]
      adcPtr = ADC2;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xdc>)
 8000c74:	61da      	str	r2, [r3, #28]
      break;
 8000c76:	e013      	b.n	8000ca0 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0x98>

    case ADC_3:
      RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xcc>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7c:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xcc>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	6453      	str	r3, [r2, #68]	; 0x44
      adc3 = this;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xe0>)
 8000c88:	6013      	str	r3, [r2, #0]
      adcPtr = ADC3;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4a17      	ldr	r2, [pc, #92]	; (8000cec <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xe4>)
 8000c8e:	61da      	str	r2, [r3, #28]
      break;
 8000c90:	e006      	b.n	8000ca0 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0x98>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3316      	adds	r3, #22
 8000c96:	2107      	movs	r1, #7
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fc13 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8000c9e:	bf00      	nop
  }

  ADC->CCR |= (3<<16); // ADC prescaler
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xe8>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE+0xe8>)
 8000ca6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000caa:	6053      	str	r3, [r2, #4]

  adcPtr->CR2 =    ADC_CR2_ADON  // A/D Converter: ON
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	f640 0201 	movw	r2, #2049	; 0x801
 8000cb4:	609a      	str	r2, [r3, #8]
                | !ADC_CR2_CONT  // Continuous Conversion: OFF
                |  ADC_CR2_ALIGN;// Data alignment: left

  adcPtr->CR1 =    ADC_CR1_EOCIE; // End of conversion interrupt: enable
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	2220      	movs	r2, #32
 8000cbc:	605a      	str	r2, [r3, #4]

  NVIC_EnableIRQ( ADC_IRQn );
 8000cbe:	2012      	movs	r0, #18
 8000cc0:	f7ff fb3e 	bl	8000340 <__NVIC_EnableIRQ>
}
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	0800bb10 	.word	0x0800bb10
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	20000310 	.word	0x20000310
 8000cdc:	40012000 	.word	0x40012000
 8000ce0:	20000314 	.word	0x20000314
 8000ce4:	40012100 	.word	0x40012100
 8000ce8:	20000318 	.word	0x20000318
 8000cec:	40012200 	.word	0x40012200
 8000cf0:	40012300 	.word	0x40012300

08000cf4 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh>:

//-------------------------------------------------------------------
void Adc_Mcu::configCh( BYTE ch, BYTE para )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
 8000d00:	4613      	mov	r3, r2
 8000d02:	70bb      	strb	r3, [r7, #2]
  DWORD paraLoc = para & 0x07; // see: Channel-wise programmable sampling time
 8000d04:	78bb      	ldrb	r3, [r7, #2]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  switch( id )
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7e9b      	ldrb	r3, [r3, #26]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	f000 81ea 	beq.w	80010ea <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f6>
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	f300 82d4 	bgt.w	80012c4 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5d0>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d003      	beq.n	8000d28 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x34>
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	f000 80ef 	beq.w	8000f04 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x210>
 8000d26:	e2cd      	b.n	80012c4 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5d0>
  {
    case ADC_1:
      switch( ch )
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	2b0f      	cmp	r3, #15
 8000d2c:	f200 80e2 	bhi.w	8000ef4 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x200>
 8000d30:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x44>)
 8000d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d36:	bf00      	nop
 8000d38:	08000d79 	.word	0x08000d79
 8000d3c:	08000d8f 	.word	0x08000d8f
 8000d40:	08000da7 	.word	0x08000da7
 8000d44:	08000dbf 	.word	0x08000dbf
 8000d48:	08000dd7 	.word	0x08000dd7
 8000d4c:	08000def 	.word	0x08000def
 8000d50:	08000e07 	.word	0x08000e07
 8000d54:	08000e1f 	.word	0x08000e1f
 8000d58:	08000e37 	.word	0x08000e37
 8000d5c:	08000e4f 	.word	0x08000e4f
 8000d60:	08000e67 	.word	0x08000e67
 8000d64:	08000e7d 	.word	0x08000e7d
 8000d68:	08000e95 	.word	0x08000e95
 8000d6c:	08000ead 	.word	0x08000ead
 8000d70:	08000ec5 	.word	0x08000ec5
 8000d74:	08000edd 	.word	0x08000edd
      {
        case  0: PinConfig::set( PinConfig::ADC1_IN0,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<< 0); break;
 8000d78:	2103      	movs	r1, #3
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fe5e 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000d80:	4baa      	ldr	r3, [pc, #680]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	49a9      	ldr	r1, [pc, #676]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	610b      	str	r3, [r1, #16]
 8000d8c:	e0b9      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  1: PinConfig::set( PinConfig::ADC1_IN1,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<< 3); break;
 8000d8e:	2103      	movs	r1, #3
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fe53 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000d96:	4ba5      	ldr	r3, [pc, #660]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	49a3      	ldr	r1, [pc, #652]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000da0:	4313      	orrs	r3, r2
 8000da2:	610b      	str	r3, [r1, #16]
 8000da4:	e0ad      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  2: PinConfig::set( PinConfig::ADC1_IN2,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<< 6); break;
 8000da6:	2103      	movs	r1, #3
 8000da8:	2008      	movs	r0, #8
 8000daa:	f7ff fe47 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000dae:	4b9f      	ldr	r3, [pc, #636]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	499d      	ldr	r1, [pc, #628]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	610b      	str	r3, [r1, #16]
 8000dbc:	e0a1      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  3: PinConfig::set( PinConfig::ADC1_IN3,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<< 9); break;
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	2009      	movs	r0, #9
 8000dc2:	f7ff fe3b 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000dc6:	4b99      	ldr	r3, [pc, #612]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	025b      	lsls	r3, r3, #9
 8000dce:	4997      	ldr	r1, [pc, #604]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	610b      	str	r3, [r1, #16]
 8000dd4:	e095      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  4: PinConfig::set( PinConfig::ADC1_IN4,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<<12); break;
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	200a      	movs	r0, #10
 8000dda:	f7ff fe2f 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000dde:	4b93      	ldr	r3, [pc, #588]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	031b      	lsls	r3, r3, #12
 8000de6:	4991      	ldr	r1, [pc, #580]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	610b      	str	r3, [r1, #16]
 8000dec:	e089      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  5: PinConfig::set( PinConfig::ADC1_IN5,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<<15); break;
 8000dee:	2103      	movs	r1, #3
 8000df0:	200b      	movs	r0, #11
 8000df2:	f7ff fe23 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000df6:	4b8d      	ldr	r3, [pc, #564]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	03db      	lsls	r3, r3, #15
 8000dfe:	498b      	ldr	r1, [pc, #556]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	610b      	str	r3, [r1, #16]
 8000e04:	e07d      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  6: PinConfig::set( PinConfig::ADC1_IN6,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<<18); break;
 8000e06:	2103      	movs	r1, #3
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f7ff fe17 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000e0e:	4b87      	ldr	r3, [pc, #540]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	049b      	lsls	r3, r3, #18
 8000e16:	4985      	ldr	r1, [pc, #532]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	610b      	str	r3, [r1, #16]
 8000e1c:	e071      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  7: PinConfig::set( PinConfig::ADC1_IN7,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<<21); break;
 8000e1e:	2103      	movs	r1, #3
 8000e20:	200d      	movs	r0, #13
 8000e22:	f7ff fe0b 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000e26:	4b81      	ldr	r3, [pc, #516]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	055b      	lsls	r3, r3, #21
 8000e2e:	497f      	ldr	r1, [pc, #508]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	610b      	str	r3, [r1, #16]
 8000e34:	e065      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  8: PinConfig::set( PinConfig::ADC1_IN8,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<<24); break;
 8000e36:	2103      	movs	r1, #3
 8000e38:	200e      	movs	r0, #14
 8000e3a:	f7ff fdff 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000e3e:	4b7b      	ldr	r3, [pc, #492]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	061b      	lsls	r3, r3, #24
 8000e46:	4979      	ldr	r1, [pc, #484]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	610b      	str	r3, [r1, #16]
 8000e4c:	e059      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case  9: PinConfig::set( PinConfig::ADC1_IN9,  PinConfig::ANALOG ); ADC1->SMPR2 |= (paraLoc<<27); break;
 8000e4e:	2103      	movs	r1, #3
 8000e50:	200f      	movs	r0, #15
 8000e52:	f7ff fdf3 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000e56:	4b75      	ldr	r3, [pc, #468]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e58:	691a      	ldr	r2, [r3, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	06db      	lsls	r3, r3, #27
 8000e5e:	4973      	ldr	r1, [pc, #460]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	610b      	str	r3, [r1, #16]
 8000e64:	e04d      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case 10: PinConfig::set( PinConfig::ADC1_IN10, PinConfig::ANALOG ); ADC1->SMPR1 |= (paraLoc<< 0); break;
 8000e66:	2103      	movs	r1, #3
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff fde7 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000e6e:	4b6f      	ldr	r3, [pc, #444]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	496e      	ldr	r1, [pc, #440]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	60cb      	str	r3, [r1, #12]
 8000e7a:	e042      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case 11: PinConfig::set( PinConfig::ADC1_IN11, PinConfig::ANALOG ); ADC1->SMPR1 |= (paraLoc<< 3); break;
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f7ff fddc 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000e84:	4b69      	ldr	r3, [pc, #420]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4967      	ldr	r1, [pc, #412]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60cb      	str	r3, [r1, #12]
 8000e92:	e036      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case 12: PinConfig::set( PinConfig::ADC1_IN12, PinConfig::ANALOG ); ADC1->SMPR1 |= (paraLoc<< 6); break;
 8000e94:	2103      	movs	r1, #3
 8000e96:	2004      	movs	r0, #4
 8000e98:	f7ff fdd0 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000e9c:	4b63      	ldr	r3, [pc, #396]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	019b      	lsls	r3, r3, #6
 8000ea4:	4961      	ldr	r1, [pc, #388]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
 8000eaa:	e02a      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case 13: PinConfig::set( PinConfig::ADC1_IN13, PinConfig::ANALOG ); ADC1->SMPR1 |= (paraLoc<< 9); break;
 8000eac:	2103      	movs	r1, #3
 8000eae:	2005      	movs	r0, #5
 8000eb0:	f7ff fdc4 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000eb4:	4b5d      	ldr	r3, [pc, #372]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	025b      	lsls	r3, r3, #9
 8000ebc:	495b      	ldr	r1, [pc, #364]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60cb      	str	r3, [r1, #12]
 8000ec2:	e01e      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case 14: PinConfig::set( PinConfig::ADC1_IN14, PinConfig::ANALOG ); ADC1->SMPR1 |= (paraLoc<<12); break;
 8000ec4:	2103      	movs	r1, #3
 8000ec6:	2006      	movs	r0, #6
 8000ec8:	f7ff fdb8 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000ecc:	4b57      	ldr	r3, [pc, #348]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	031b      	lsls	r3, r3, #12
 8000ed4:	4955      	ldr	r1, [pc, #340]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60cb      	str	r3, [r1, #12]
 8000eda:	e012      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        case 15: PinConfig::set( PinConfig::ADC1_IN15, PinConfig::ANALOG ); ADC1->SMPR1 |= (paraLoc<<15); break;
 8000edc:	2103      	movs	r1, #3
 8000ede:	2007      	movs	r0, #7
 8000ee0:	f7ff fdac 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000ee4:	4b51      	ldr	r3, [pc, #324]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	03db      	lsls	r3, r3, #15
 8000eec:	494f      	ldr	r1, [pc, #316]	; (800102c <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x338>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
 8000ef2:	e006      	b.n	8000f02 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x20e>
        default:
          report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3316      	adds	r3, #22
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fae2 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
          break;
 8000f00:	bf00      	nop
      }
      break;
 8000f02:	e1e6      	b.n	80012d2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5de>
    
    case ADC_2: 
      switch( ch )
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	f200 80e7 	bhi.w	80010da <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3e6>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x220>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f55 	.word	0x08000f55
 8000f18:	08000f6b 	.word	0x08000f6b
 8000f1c:	08000f83 	.word	0x08000f83
 8000f20:	08000f9b 	.word	0x08000f9b
 8000f24:	08000fb3 	.word	0x08000fb3
 8000f28:	08000fcb 	.word	0x08000fcb
 8000f2c:	08000fe3 	.word	0x08000fe3
 8000f30:	08000ffb 	.word	0x08000ffb
 8000f34:	08001013 	.word	0x08001013
 8000f38:	08001035 	.word	0x08001035
 8000f3c:	0800104d 	.word	0x0800104d
 8000f40:	08001063 	.word	0x08001063
 8000f44:	0800107b 	.word	0x0800107b
 8000f48:	08001093 	.word	0x08001093
 8000f4c:	080010ab 	.word	0x080010ab
 8000f50:	080010c3 	.word	0x080010c3
      {
        case  0: PinConfig::set( PinConfig::ADC2_IN0,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<< 0); break;
 8000f54:	2103      	movs	r1, #3
 8000f56:	2010      	movs	r0, #16
 8000f58:	f7ff fd70 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000f5c:	4b34      	ldr	r3, [pc, #208]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	4933      	ldr	r1, [pc, #204]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	610b      	str	r3, [r1, #16]
 8000f68:	e0be      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case  1: PinConfig::set( PinConfig::ADC2_IN1,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<< 3); break;
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	2011      	movs	r0, #17
 8000f6e:	f7ff fd65 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	492d      	ldr	r1, [pc, #180]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	610b      	str	r3, [r1, #16]
 8000f80:	e0b2      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case  2: PinConfig::set( PinConfig::ADC2_IN2,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<< 6); break;
 8000f82:	2103      	movs	r1, #3
 8000f84:	2018      	movs	r0, #24
 8000f86:	f7ff fd59 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	4927      	ldr	r1, [pc, #156]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	610b      	str	r3, [r1, #16]
 8000f98:	e0a6      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case  3: PinConfig::set( PinConfig::ADC2_IN3,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<< 9); break;
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	2019      	movs	r0, #25
 8000f9e:	f7ff fd4d 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	025b      	lsls	r3, r3, #9
 8000faa:	4921      	ldr	r1, [pc, #132]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	610b      	str	r3, [r1, #16]
 8000fb0:	e09a      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case  4: PinConfig::set( PinConfig::ADC2_IN4,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<<12); break;
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	201a      	movs	r0, #26
 8000fb6:	f7ff fd41 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	031b      	lsls	r3, r3, #12
 8000fc2:	491b      	ldr	r1, [pc, #108]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	610b      	str	r3, [r1, #16]
 8000fc8:	e08e      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case  5: PinConfig::set( PinConfig::ADC2_IN5,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<<15); break;
 8000fca:	2103      	movs	r1, #3
 8000fcc:	201b      	movs	r0, #27
 8000fce:	f7ff fd35 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	03db      	lsls	r3, r3, #15
 8000fda:	4915      	ldr	r1, [pc, #84]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	610b      	str	r3, [r1, #16]
 8000fe0:	e082      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case  6: PinConfig::set( PinConfig::ADC2_IN6,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<<18); break;
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f7ff fd29 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	049b      	lsls	r3, r3, #18
 8000ff2:	490f      	ldr	r1, [pc, #60]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	610b      	str	r3, [r1, #16]
 8000ff8:	e076      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case  7: PinConfig::set( PinConfig::ADC2_IN7,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<<21); break;
 8000ffa:	2103      	movs	r1, #3
 8000ffc:	201d      	movs	r0, #29
 8000ffe:	f7ff fd1d 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	055b      	lsls	r3, r3, #21
 800100a:	4909      	ldr	r1, [pc, #36]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 800100c:	4313      	orrs	r3, r2
 800100e:	610b      	str	r3, [r1, #16]
 8001010:	e06a      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case  8: PinConfig::set( PinConfig::ADC2_IN8,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<<24); break;
 8001012:	2103      	movs	r1, #3
 8001014:	201e      	movs	r0, #30
 8001016:	f7ff fd11 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	4903      	ldr	r1, [pc, #12]	; (8001030 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x33c>)
 8001024:	4313      	orrs	r3, r2
 8001026:	610b      	str	r3, [r1, #16]
 8001028:	e05e      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
 800102a:	bf00      	nop
 800102c:	40012000 	.word	0x40012000
 8001030:	40012100 	.word	0x40012100
        case  9: PinConfig::set( PinConfig::ADC2_IN9,  PinConfig::ANALOG ); ADC2->SMPR2 |= (paraLoc<<27); break;
 8001034:	2103      	movs	r1, #3
 8001036:	201f      	movs	r0, #31
 8001038:	f7ff fd00 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800103c:	4ba7      	ldr	r3, [pc, #668]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	06db      	lsls	r3, r3, #27
 8001044:	49a5      	ldr	r1, [pc, #660]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 8001046:	4313      	orrs	r3, r2
 8001048:	610b      	str	r3, [r1, #16]
 800104a:	e04d      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case 10: PinConfig::set( PinConfig::ADC2_IN10, PinConfig::ANALOG ); ADC2->SMPR1 |= (paraLoc<< 0); break;
 800104c:	2103      	movs	r1, #3
 800104e:	2012      	movs	r0, #18
 8001050:	f7ff fcf4 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001054:	4ba1      	ldr	r3, [pc, #644]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	49a0      	ldr	r1, [pc, #640]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	60cb      	str	r3, [r1, #12]
 8001060:	e042      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case 11: PinConfig::set( PinConfig::ADC2_IN11, PinConfig::ANALOG ); ADC2->SMPR1 |= (paraLoc<< 3); break;
 8001062:	2103      	movs	r1, #3
 8001064:	2013      	movs	r0, #19
 8001066:	f7ff fce9 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800106a:	4b9c      	ldr	r3, [pc, #624]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	499a      	ldr	r1, [pc, #616]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 8001074:	4313      	orrs	r3, r2
 8001076:	60cb      	str	r3, [r1, #12]
 8001078:	e036      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case 12: PinConfig::set( PinConfig::ADC2_IN12, PinConfig::ANALOG ); ADC2->SMPR1 |= (paraLoc<< 6); break;
 800107a:	2103      	movs	r1, #3
 800107c:	2014      	movs	r0, #20
 800107e:	f7ff fcdd 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001082:	4b96      	ldr	r3, [pc, #600]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	019b      	lsls	r3, r3, #6
 800108a:	4994      	ldr	r1, [pc, #592]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 800108c:	4313      	orrs	r3, r2
 800108e:	60cb      	str	r3, [r1, #12]
 8001090:	e02a      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case 13: PinConfig::set( PinConfig::ADC2_IN13, PinConfig::ANALOG ); ADC2->SMPR1 |= (paraLoc<< 9); break;
 8001092:	2103      	movs	r1, #3
 8001094:	2015      	movs	r0, #21
 8001096:	f7ff fcd1 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800109a:	4b90      	ldr	r3, [pc, #576]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	025b      	lsls	r3, r3, #9
 80010a2:	498e      	ldr	r1, [pc, #568]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60cb      	str	r3, [r1, #12]
 80010a8:	e01e      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case 14: PinConfig::set( PinConfig::ADC2_IN14, PinConfig::ANALOG ); ADC2->SMPR1 |= (paraLoc<<12); break;
 80010aa:	2103      	movs	r1, #3
 80010ac:	2016      	movs	r0, #22
 80010ae:	f7ff fcc5 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80010b2:	4b8a      	ldr	r3, [pc, #552]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	031b      	lsls	r3, r3, #12
 80010ba:	4988      	ldr	r1, [pc, #544]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
 80010c0:	e012      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        case 15: PinConfig::set( PinConfig::ADC2_IN15, PinConfig::ANALOG ); ADC2->SMPR1 |= (paraLoc<<15); break;
 80010c2:	2103      	movs	r1, #3
 80010c4:	2017      	movs	r0, #23
 80010c6:	f7ff fcb9 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80010ca:	4b84      	ldr	r3, [pc, #528]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	03db      	lsls	r3, r3, #15
 80010d2:	4982      	ldr	r1, [pc, #520]	; (80012dc <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5e8>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60cb      	str	r3, [r1, #12]
 80010d8:	e006      	b.n	80010e8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x3f4>
        default:
          report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3316      	adds	r3, #22
 80010de:	2108      	movs	r1, #8
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 f9ef 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
          break;
 80010e6:	bf00      	nop
      }
      break;
 80010e8:	e0f3      	b.n	80012d2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5de>
    
    case ADC_3:
      switch( ch )
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	f200 80e1 	bhi.w	80012b4 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5c0>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x404>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001139 	.word	0x08001139
 80010fc:	0800114f 	.word	0x0800114f
 8001100:	08001167 	.word	0x08001167
 8001104:	0800117f 	.word	0x0800117f
 8001108:	08001197 	.word	0x08001197
 800110c:	080011af 	.word	0x080011af
 8001110:	080011c7 	.word	0x080011c7
 8001114:	080011df 	.word	0x080011df
 8001118:	080011f7 	.word	0x080011f7
 800111c:	0800120f 	.word	0x0800120f
 8001120:	08001227 	.word	0x08001227
 8001124:	0800123d 	.word	0x0800123d
 8001128:	08001255 	.word	0x08001255
 800112c:	0800126d 	.word	0x0800126d
 8001130:	08001285 	.word	0x08001285
 8001134:	0800129d 	.word	0x0800129d
      {
        case  0: PinConfig::set( PinConfig::ADC3_IN0,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<< 0); break;
 8001138:	2103      	movs	r1, #3
 800113a:	2020      	movs	r0, #32
 800113c:	f7ff fc7e 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001140:	4b67      	ldr	r3, [pc, #412]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	4966      	ldr	r1, [pc, #408]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	610b      	str	r3, [r1, #16]
 800114c:	e0b9      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  1: PinConfig::set( PinConfig::ADC3_IN1,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<< 3); break;
 800114e:	2103      	movs	r1, #3
 8001150:	2021      	movs	r0, #33	; 0x21
 8001152:	f7ff fc73 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4960      	ldr	r1, [pc, #384]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001160:	4313      	orrs	r3, r2
 8001162:	610b      	str	r3, [r1, #16]
 8001164:	e0ad      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  2: PinConfig::set( PinConfig::ADC3_IN2,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<< 6); break;
 8001166:	2103      	movs	r1, #3
 8001168:	2028      	movs	r0, #40	; 0x28
 800116a:	f7ff fc67 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800116e:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001170:	691a      	ldr	r2, [r3, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	019b      	lsls	r3, r3, #6
 8001176:	495a      	ldr	r1, [pc, #360]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001178:	4313      	orrs	r3, r2
 800117a:	610b      	str	r3, [r1, #16]
 800117c:	e0a1      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  3: PinConfig::set( PinConfig::ADC3_IN3,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<< 9); break;
 800117e:	2103      	movs	r1, #3
 8001180:	2029      	movs	r0, #41	; 0x29
 8001182:	f7ff fc5b 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001186:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	025b      	lsls	r3, r3, #9
 800118e:	4954      	ldr	r1, [pc, #336]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001190:	4313      	orrs	r3, r2
 8001192:	610b      	str	r3, [r1, #16]
 8001194:	e095      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  4: PinConfig::set( PinConfig::ADC3_IN4,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<<12); break;
 8001196:	2103      	movs	r1, #3
 8001198:	202a      	movs	r0, #42	; 0x2a
 800119a:	f7ff fc4f 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	031b      	lsls	r3, r3, #12
 80011a6:	494e      	ldr	r1, [pc, #312]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	610b      	str	r3, [r1, #16]
 80011ac:	e089      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  5: PinConfig::set( PinConfig::ADC3_IN5,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<<15); break;
 80011ae:	2103      	movs	r1, #3
 80011b0:	202b      	movs	r0, #43	; 0x2b
 80011b2:	f7ff fc43 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80011b6:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	03db      	lsls	r3, r3, #15
 80011be:	4948      	ldr	r1, [pc, #288]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	610b      	str	r3, [r1, #16]
 80011c4:	e07d      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  6: PinConfig::set( PinConfig::ADC3_IN6,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<<18); break;
 80011c6:	2103      	movs	r1, #3
 80011c8:	202c      	movs	r0, #44	; 0x2c
 80011ca:	f7ff fc37 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	049b      	lsls	r3, r3, #18
 80011d6:	4942      	ldr	r1, [pc, #264]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	610b      	str	r3, [r1, #16]
 80011dc:	e071      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  7: PinConfig::set( PinConfig::ADC3_IN7,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<<21); break;
 80011de:	2103      	movs	r1, #3
 80011e0:	202d      	movs	r0, #45	; 0x2d
 80011e2:	f7ff fc2b 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80011e6:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	055b      	lsls	r3, r3, #21
 80011ee:	493c      	ldr	r1, [pc, #240]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	610b      	str	r3, [r1, #16]
 80011f4:	e065      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  8: PinConfig::set( PinConfig::ADC3_IN8,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<<24); break;
 80011f6:	2103      	movs	r1, #3
 80011f8:	202e      	movs	r0, #46	; 0x2e
 80011fa:	f7ff fc1f 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	4936      	ldr	r1, [pc, #216]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001208:	4313      	orrs	r3, r2
 800120a:	610b      	str	r3, [r1, #16]
 800120c:	e059      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case  9: PinConfig::set( PinConfig::ADC3_IN9,  PinConfig::ANALOG ); ADC3->SMPR2 |= (paraLoc<<27); break;
 800120e:	2103      	movs	r1, #3
 8001210:	202f      	movs	r0, #47	; 0x2f
 8001212:	f7ff fc13 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	06db      	lsls	r3, r3, #27
 800121e:	4930      	ldr	r1, [pc, #192]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001220:	4313      	orrs	r3, r2
 8001222:	610b      	str	r3, [r1, #16]
 8001224:	e04d      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case 10: PinConfig::set( PinConfig::ADC3_IN10, PinConfig::ANALOG ); ADC3->SMPR1 |= (paraLoc<< 0); break;
 8001226:	2103      	movs	r1, #3
 8001228:	2022      	movs	r0, #34	; 0x22
 800122a:	f7ff fc07 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	492b      	ldr	r1, [pc, #172]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	60cb      	str	r3, [r1, #12]
 800123a:	e042      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case 11: PinConfig::set( PinConfig::ADC3_IN11, PinConfig::ANALOG ); ADC3->SMPR1 |= (paraLoc<< 3); break;
 800123c:	2103      	movs	r1, #3
 800123e:	2023      	movs	r0, #35	; 0x23
 8001240:	f7ff fbfc 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4924      	ldr	r1, [pc, #144]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 800124e:	4313      	orrs	r3, r2
 8001250:	60cb      	str	r3, [r1, #12]
 8001252:	e036      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case 12: PinConfig::set( PinConfig::ADC3_IN12, PinConfig::ANALOG ); ADC3->SMPR1 |= (paraLoc<< 6); break;
 8001254:	2103      	movs	r1, #3
 8001256:	2024      	movs	r0, #36	; 0x24
 8001258:	f7ff fbf0 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	019b      	lsls	r3, r3, #6
 8001264:	491e      	ldr	r1, [pc, #120]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60cb      	str	r3, [r1, #12]
 800126a:	e02a      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case 13: PinConfig::set( PinConfig::ADC3_IN13, PinConfig::ANALOG ); ADC3->SMPR1 |= (paraLoc<< 9); break;
 800126c:	2103      	movs	r1, #3
 800126e:	2025      	movs	r0, #37	; 0x25
 8001270:	f7ff fbe4 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	025b      	lsls	r3, r3, #9
 800127c:	4918      	ldr	r1, [pc, #96]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 800127e:	4313      	orrs	r3, r2
 8001280:	60cb      	str	r3, [r1, #12]
 8001282:	e01e      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case 14: PinConfig::set( PinConfig::ADC3_IN14, PinConfig::ANALOG ); ADC3->SMPR1 |= (paraLoc<<12); break;
 8001284:	2103      	movs	r1, #3
 8001286:	2026      	movs	r0, #38	; 0x26
 8001288:	f7ff fbd8 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	031b      	lsls	r3, r3, #12
 8001294:	4912      	ldr	r1, [pc, #72]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 8001296:	4313      	orrs	r3, r2
 8001298:	60cb      	str	r3, [r1, #12]
 800129a:	e012      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        case 15: PinConfig::set( PinConfig::ADC3_IN15, PinConfig::ANALOG ); ADC3->SMPR1 |= (paraLoc<<15); break;
 800129c:	2103      	movs	r1, #3
 800129e:	2027      	movs	r0, #39	; 0x27
 80012a0:	f7ff fbcc 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	03db      	lsls	r3, r3, #15
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ec>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60cb      	str	r3, [r1, #12]
 80012b2:	e006      	b.n	80012c2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5ce>
        default:
          report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3316      	adds	r3, #22
 80012b8:	2108      	movs	r1, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 f902 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
          break;
 80012c0:	bf00      	nop
      }
      break;
 80012c2:	e006      	b.n	80012d2 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5de>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3316      	adds	r3, #22
 80012c8:	2107      	movs	r1, #7
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 f8fa 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80012d0:	bf00      	nop
  }
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40012100 	.word	0x40012100
 80012e0:	40012200 	.word	0x40012200

080012e4 <_ZN9EmbSysLib2Hw7Adc_Mcu9getResultEv>:

//-------------------------------------------------------------------
inline WORD Adc_Mcu::getResult( void )
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return( adcPtr->DR & 0xFFFF );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	b29b      	uxth	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_ZN9EmbSysLib2Hw7Adc_Mcu7startChEh>:

//-------------------------------------------------------------------
inline void Adc_Mcu::startCh( BYTE ch )
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  // select channel
  adcPtr->SQR3 = ch & 0x1F;
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f002 021f 	and.w	r2, r2, #31
 8001316:	635a      	str	r2, [r3, #52]	; 0x34

  adcPtr->CR2 |= ADC_CR2_SWSTART;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001326:	609a      	str	r2, [r3, #8]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <ADC_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void ADC_IRQHandler(void)
  {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    if( ADC1->SR & ADC_SR_EOC )
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <ADC_IRQHandler+0xa4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00e      	beq.n	800136c <ADC_IRQHandler+0x38>
    {
      ADC1->SR &= ~ADC_SR_EOC;
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <ADC_IRQHandler+0xa4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <ADC_IRQHandler+0xa4>)
 8001354:	f023 0302 	bic.w	r3, r3, #2
 8001358:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc1->isr();
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <ADC_IRQHandler+0xa8>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <ADC_IRQHandler+0xa8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	330c      	adds	r3, #12
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4610      	mov	r0, r2
 800136a:	4798      	blx	r3
    }
    if( ADC2->SR & ADC_SR_EOC )
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <ADC_IRQHandler+0xac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00e      	beq.n	80013a0 <ADC_IRQHandler+0x6c>
    {
      ADC2->SR &= ~ADC_SR_EOC;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <ADC_IRQHandler+0xac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <ADC_IRQHandler+0xac>)
 8001388:	f023 0302 	bic.w	r3, r3, #2
 800138c:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc2->isr();
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <ADC_IRQHandler+0xb0>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <ADC_IRQHandler+0xb0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	330c      	adds	r3, #12
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4610      	mov	r0, r2
 800139e:	4798      	blx	r3
    }
    if( ADC3->SR & ADC_SR_EOC )
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <ADC_IRQHandler+0xb4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00e      	beq.n	80013d4 <ADC_IRQHandler+0xa0>
    {
      ADC3->SR &= ~ADC_SR_EOC;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <ADC_IRQHandler+0xb4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <ADC_IRQHandler+0xb4>)
 80013bc:	f023 0302 	bic.w	r3, r3, #2
 80013c0:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc3->isr();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <ADC_IRQHandler+0xb8>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <ADC_IRQHandler+0xb8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	330c      	adds	r3, #12
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4610      	mov	r0, r2
 80013d2:	4798      	blx	r3
    }
  }
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40012000 	.word	0x40012000
 80013dc:	20000310 	.word	0x20000310
 80013e0:	40012100 	.word	0x40012100
 80013e4:	20000314 	.word	0x20000314
 80013e8:	40012200 	.word	0x40012200
 80013ec:	20000318 	.word	0x20000318

080013f0 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt>:
#if ( system_PCLK_I2C != 50000000 )
  #error "system_PCLK_I2C not defined or wrong value"
#endif

//-------------------------------------------------------------------
I2Cmaster_Mcu::I2Cmaster_Mcu( I2C_ID id,
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
 80013fc:	4613      	mov	r3, r2
 80013fe:	803b      	strh	r3, [r7, #0]
                              WORD   fclk )

: I2Cmaster( ReportID_Hw::Module::I2C_MASTER_MCU )
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	21d0      	movs	r1, #208	; 0xd0
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fd73 	bl	8003ef0 <_ZN9EmbSysLib2Hw9I2CmasterC1Et>
 800140a:	4a5e      	ldr	r2, [pc, #376]	; (8001584 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x194>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	601a      	str	r2, [r3, #0]

{
  switch( id )
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	3b01      	subs	r3, #1
 8001414:	2b03      	cmp	r3, #3
 8001416:	d85b      	bhi.n	80014d0 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xe0>
 8001418:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x30>)
 800141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141e:	bf00      	nop
 8001420:	08001431 	.word	0x08001431
 8001424:	08001459 	.word	0x08001459
 8001428:	08001481 	.word	0x08001481
 800142c:	080014a9 	.word	0x080014a9
  {
    case I2C_1:
      ptr           = I2C1;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a55      	ldr	r2, [pc, #340]	; (8001588 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x198>)
 8001434:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001436:	4b55      	ldr	r3, [pc, #340]	; (800158c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a54      	ldr	r2, [pc, #336]	; (800158c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 800143c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::I2C1_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8001442:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001446:	20d5      	movs	r0, #213	; 0xd5
 8001448:	f7ff faf8 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C1_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 800144c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001450:	20d6      	movs	r0, #214	; 0xd6
 8001452:	f7ff faf3 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8001456:	e042      	b.n	80014de <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_2:
      ptr           = I2C2;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4d      	ldr	r2, [pc, #308]	; (8001590 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a0>)
 800145c:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800145e:	4b4b      	ldr	r3, [pc, #300]	; (800158c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a4a      	ldr	r2, [pc, #296]	; (800158c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8001464:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::I2C2_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 800146a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800146e:	20d8      	movs	r0, #216	; 0xd8
 8001470:	f7ff fae4 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C2_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8001474:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001478:	20d9      	movs	r0, #217	; 0xd9
 800147a:	f7ff fadf 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 800147e:	e02e      	b.n	80014de <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_3:
      ptr           = I2C3;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a44      	ldr	r2, [pc, #272]	; (8001594 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a4>)
 8001484:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a40      	ldr	r2, [pc, #256]	; (800158c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 800148c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::I2C3_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8001492:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001496:	20db      	movs	r0, #219	; 0xdb
 8001498:	f7ff fad0 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C3_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 800149c:	f44f 7188 	mov.w	r1, #272	; 0x110
 80014a0:	20dc      	movs	r0, #220	; 0xdc
 80014a2:	f7ff facb 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 80014a6:	e01a      	b.n	80014de <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_4:
      ptr           = I2C4;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a8>)
 80014ac:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C4EN;
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a36      	ldr	r2, [pc, #216]	; (800158c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 80014b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::I2C4_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 80014ba:	f44f 7188 	mov.w	r1, #272	; 0x110
 80014be:	20de      	movs	r0, #222	; 0xde
 80014c0:	f7ff fabc 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C4_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 80014c4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80014c8:	20df      	movs	r0, #223	; 0xdf
 80014ca:	f7ff fab7 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 80014ce:	e006      	b.n	80014de <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3306      	adds	r3, #6
 80014d4:	2107      	movs	r1, #7
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fff4 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80014dc:	bf00      	nop
  }

  ptr->CR1 = 0x00; // disable
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
  while( ptr->CR1 & I2C_CR1_PE ) {}
 80014e6:	bf00      	nop
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bf14      	ite	ne
 80014f6:	2301      	movne	r3, #1
 80014f8:	2300      	moveq	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f3      	bne.n	80014e8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xf8>

  ptr->CR1 |=   (!I2C_CR1_ANFOFF)   // keep analog filter on
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	601a      	str	r2, [r3, #0]
       Fm with tsclh/tscll = 2:
         fclk = 1/(tsclh + tscll), tsclh = 2*tscll
           => fclk = 1/(3*tscll) and fclk = 2/(3*tsclh)
           => scll = 1/(3*fclk*tpresc) and sclh = 2/(3*fclk*tpresc)
  */
  fclk = RANGE( fclk, (WORD)1, (WORD)1000 );
 800150c:	883b      	ldrh	r3, [r7, #0]
 800150e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fa42 	bl	800599e <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_>
 800151a:	4603      	mov	r3, r0
 800151c:	803b      	strh	r3, [r7, #0]

  WORD sclh = MIN( (WORD)(3333/fclk - 1), (WORD)(0xFF) );
 800151e:	883b      	ldrh	r3, [r7, #0]
 8001520:	f640 5205 	movw	r2, #3333	; 0xd05
 8001524:	fb92 f3f3 	sdiv	r3, r2, r3
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29b      	uxth	r3, r3
 800152e:	21ff      	movs	r1, #255	; 0xff
 8001530:	4618      	mov	r0, r3
 8001532:	f004 fa50 	bl	80059d6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
  WORD scll = MIN( (WORD)(1667/fclk - 1), (WORD)(0xFF) );
 800153a:	883b      	ldrh	r3, [r7, #0]
 800153c:	f240 6283 	movw	r2, #1667	; 0x683
 8001540:	fb92 f3f3 	sdiv	r3, r2, r3
 8001544:	b29b      	uxth	r3, r3
 8001546:	3b01      	subs	r3, #1
 8001548:	b29b      	uxth	r3, r3
 800154a:	21ff      	movs	r1, #255	; 0xff
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fa42 	bl	80059d6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 8001552:	4603      	mov	r3, r0
 8001554:	81bb      	strh	r3, [r7, #12]

  ptr->TIMINGR =  (0x0F<<28)   // PRESC
                 |(0x00<<20)   // SCLDEL, 1*0.2us
                 |(0x00<<16)   // SDADEL
                 |(sclh<< 8)   // SCLH
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	f043 4270 	orr.w	r2, r3, #4026531840	; 0xf0000000
                 |(scll<< 0);  // SCLL
 800155e:	89bb      	ldrh	r3, [r7, #12]
 8001560:	431a      	orrs	r2, r3
  ptr->TIMINGR =  (0x0F<<28)   // PRESC
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  ptr->CR1 |= I2C_CR1_PE; // enable
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	0800babc 	.word	0x0800babc
 8001588:	40005400 	.word	0x40005400
 800158c:	40023800 	.word	0x40023800
 8001590:	40005800 	.word	0x40005800
 8001594:	40005c00 	.word	0x40005c00
 8001598:	40006000 	.word	0x40006000

0800159c <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu5startEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::start( BYTE size )
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
  ptr->CR2 = (ptr->CR2 & ~0xFF0000)|((size)<<16);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	4619      	mov	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
  ptr->CR2 = (ptr->CR2 & ~(1<<10));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ce:	605a      	str	r2, [r3, #4]
  // set start condition AFTER setting of SADD in sendAddr
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu4stopEv>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::stop( void )
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  ptr->CR1 |= I2C_CR2_STOP;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015f2:	601a      	str	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::sendAddr( BYTE addr )
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
  if( isHardwareOK )
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	791b      	ldrb	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d029      	beq.n	8001668 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x68>
  {
    ptr->CR2 = (ptr->CR2 & ~0x2FF)|(addr&0xFE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x74>)
 800161c:	4013      	ands	r3, r2
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68d2      	ldr	r2, [r2, #12]
 8001628:	430b      	orrs	r3, r1
 800162a:	6053      	str	r3, [r2, #4]
    if(addr & 0x01)
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x48>
    {
      ptr->CR2 = (ptr->CR2 | (1<<10));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	e007      	b.n	8001658 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x58>
    }
    else
    {
      ptr->CR2 = (ptr->CR2 & ~(1<<10));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001656:	605a      	str	r2, [r3, #4]
    }
    ptr->CR2 |= I2C_CR2_START;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001666:	605a      	str	r2, [r3, #4]
  }
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	fffffd00 	.word	0xfffffd00

08001678 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu9writeByteEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::writeByte( BYTE byte )
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
  if( isHardwareOK )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	791b      	ldrb	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu9writeByteEh+0x2a>
  {
    ptr->TXDR = byte;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
    waitForAckn( I2C_ISR_TXE );
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3320      	adds	r3, #32
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
  }
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv>:

//-------------------------------------------------------------------
inline BYTE I2Cmaster_Mcu::readByteAck( void )
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  if( isHardwareOK )
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv+0x28>
  {
    waitForAckn( I2C_ISR_RXNE );
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3320      	adds	r3, #32
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2104      	movs	r1, #4
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	4798      	blx	r3
    return( ptr->RXDR );
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	e000      	b.n	80016d4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv+0x2a>
  }
  return( 0 );
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv>:

//-------------------------------------------------------------------
inline BYTE I2Cmaster_Mcu::readByteNack( void )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if( isHardwareOK )
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	791b      	ldrb	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00b      	beq.n	8001704 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv+0x28>
  {
    waitForAckn( I2C_ISR_RXNE );
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3320      	adds	r3, #32
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2104      	movs	r1, #4
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
    return( ptr->RXDR );
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e000      	b.n	8001706 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv+0x2a>
  }
  return( 0 );
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::waitForAckn( MTYPE state )
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  WORD i = 0xFFFF;
 8001718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171c:	81fb      	strh	r3, [r7, #14]

  if( isHardwareOK )
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	791b      	ldrb	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d012      	beq.n	800174c <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x3e>
  {
    while( (--i) && !(ptr->ISR & state)  );    // wait for ACK
 8001726:	bf00      	nop
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	3b01      	subs	r3, #1
 800172c:	81fb      	strh	r3, [r7, #14]
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x38>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x38>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x3a>
 8001746:	2300      	movs	r3, #0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ed      	bne.n	8001728 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x1a>
  }

  if( i == 0 )
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d108      	bne.n	8001764 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x56>
  {
    isHardwareOK = false;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	711a      	strb	r2, [r3, #4]
    stop();
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	330c      	adds	r3, #12
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	4798      	blx	r3
  }
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>:
//
// Port_Mcu
//
//*******************************************************************
//-------------------------------------------------------------------
Port_Mcu::Port_Mcu( PortId portId )
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
  : Port( ReportID_Hw::Module::PORT_MCU )
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2110      	movs	r1, #16
 800177c:	4618      	mov	r0, r3
 800177e:	f002 fcb9 	bl	80040f4 <_ZN9EmbSysLib2Hw4PortC1Et>
 8001782:	4a46      	ldr	r2, [pc, #280]	; (800189c <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x130>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	601a      	str	r2, [r3, #0]
{
  switch( portId )
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	2b09      	cmp	r3, #9
 800178c:	d87a      	bhi.n	8001884 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x118>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x28>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017bd 	.word	0x080017bd
 8001798:	080017d1 	.word	0x080017d1
 800179c:	080017e5 	.word	0x080017e5
 80017a0:	080017f9 	.word	0x080017f9
 80017a4:	0800180d 	.word	0x0800180d
 80017a8:	08001821 	.word	0x08001821
 80017ac:	08001835 	.word	0x08001835
 80017b0:	08001849 	.word	0x08001849
 80017b4:	0800185d 	.word	0x0800185d
 80017b8:	08001871 	.word	0x08001871
  {
    case PA: gpio = (GPIO_TypeDef *)(GPIOA_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x134>)
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a37      	ldr	r2, [pc, #220]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	e060      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PB: gpio = (GPIO_TypeDef *)(GPIOB_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a35      	ldr	r2, [pc, #212]	; (80018a8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x13c>)
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a32      	ldr	r2, [pc, #200]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	e056      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PC: gpio = (GPIO_TypeDef *)(GPIOC_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a31      	ldr	r2, [pc, #196]	; (80018ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x140>)
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a2d      	ldr	r2, [pc, #180]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	e04c      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PD: gpio = (GPIO_TypeDef *)(GPIOD_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a2d      	ldr	r2, [pc, #180]	; (80018b0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x144>)
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	e042      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PE: gpio = (GPIO_TypeDef *)(GPIOE_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x148>)
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001818:	f043 0310 	orr.w	r3, r3, #16
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	e038      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PF: gpio = (GPIO_TypeDef *)(GPIOF_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x14c>)
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800182c:	f043 0320 	orr.w	r3, r3, #32
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	e02e      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PG: gpio = (GPIO_TypeDef *)(GPIOG_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; break;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x150>)
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	e024      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PH: gpio = (GPIO_TypeDef *)(GPIOH_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x154>)
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	e01a      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PI: gpio = (GPIO_TypeDef *)(GPIOI_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; break;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x158>)
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	e010      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PJ: gpio = (GPIO_TypeDef *)(GPIOJ_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; break;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x15c>)
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800187c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	e006      	b.n	8001892 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3304      	adds	r3, #4
 8001888:	2107      	movs	r1, #7
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fe1a 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001890:	bf00      	nop
  }
}
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	0800ba60 	.word	0x0800ba60
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40021400 	.word	0x40021400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40021c00 	.word	0x40021c00
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40022400 	.word	0x40022400

080018cc <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE>:

//-------------------------------------------------------------------
void Port_Mcu::setMode( MTYPE mask, Mode mode )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	71fb      	strb	r3, [r7, #7]
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
 80018de:	e012      	b.n	8001906 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x3a>
  {
    if( mask & 0x01 )
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x2e>
    {
      setPinMode( i, mode );
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3304      	adds	r3, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	7df9      	ldrb	r1, [r7, #23]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	4798      	blx	r3
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	3301      	adds	r3, #1
 80018fe:	75fb      	strb	r3, [r7, #23]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	7dfb      	ldrb	r3, [r7, #23]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d9e9      	bls.n	80018e0 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x14>
    }
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE>:

//-------------------------------------------------------------------
void Port_Mcu::setPinMode( BYTE pinId, Mode mode )
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	70fb      	strb	r3, [r7, #3]
 8001922:	4613      	mov	r3, r2
 8001924:	70bb      	strb	r3, [r7, #2]
  DWORD config = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]

  if( mode & Port::Out ) config |= PinConfig::OUTPUT;
 800192a:	78bb      	ldrb	r3, [r7, #2]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x26>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
  if( mode & Port::PU  ) config |= PinConfig::PULL_UP;
 800193c:	78bb      	ldrb	r3, [r7, #2]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x38>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	60fb      	str	r3, [r7, #12]
  if( mode & Port::PD  ) config |= PinConfig::PULL_DOWN;
 800194e:	78bb      	ldrb	r3, [r7, #2]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x4a>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	60fb      	str	r3, [r7, #12]
  if( mode & Port::OD  ) config |= PinConfig::OPEN_DRAIN;
 8001960:	78bb      	ldrb	r3, [r7, #2]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x5c>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	60fb      	str	r3, [r7, #12]

  PinConfig::set( gpio, pinId, config );
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6898      	ldr	r0, [r3, #8]
 8001976:	78f9      	ldrb	r1, [r7, #3]
 8001978:	2300      	movs	r3, #0
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f7fe ffd1 	bl	8000922 <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZN9EmbSysLib2Hw8Port_Mcu3setEm>:

//-------------------------------------------------------------------
inline void Port_Mcu::set( MTYPE mask )
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
//<! \todo change BSRR to BSRRL/H in stm32*.h
  gpio->BSRR = mask;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_ZN9EmbSysLib2Hw8Port_Mcu3setEmm>:

//-------------------------------------------------------------------
inline void Port_Mcu::set( MTYPE mask, MTYPE value )
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
  gpio->BSRR = mask &  value;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	400a      	ands	r2, r1
 80019bc:	619a      	str	r2, [r3, #24]
  gpio->BSRR = (mask & ~value)<<16;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	43da      	mvns	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	401a      	ands	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	0412      	lsls	r2, r2, #16
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_ZN9EmbSysLib2Hw8Port_Mcu3clrEm>:

//-------------------------------------------------------------------
inline void Port_Mcu::clr( MTYPE mask )
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  gpio->BSRR = mask<<16;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	0412      	lsls	r2, r2, #16
 80019ec:	619a      	str	r2, [r3, #24]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_ZN9EmbSysLib2Hw8Port_Mcu3getEv>:

//-------------------------------------------------------------------
inline MTYPE Port_Mcu::get( void )
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  return( gpio->IDR );
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	691b      	ldr	r3, [r3, #16]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void SysTick_Handler( void )
  {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
    static volatile DWORD stackPointer = 0;
    
    stackPointer = save_context();
 8001a18:	f7fe fc1c 	bl	8000254 <save_context>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <SysTick_Handler+0x40>)
 8001a20:	6013      	str	r3, [r2, #0]
    Rtos_Mcu::sysTic++;
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <SysTick_Handler+0x44>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <SysTick_Handler+0x44>)
 8001a2a:	6013      	str	r3, [r2, #0]
    stackPointer = (DWORD)Rtos_Mcu::schedule( (Rtos_Mcu::TaskHandle)stackPointer, true );
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <SysTick_Handler+0x48>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <SysTick_Handler+0x40>)
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4798      	blx	r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Handler+0x40>)
 8001a40:	601a      	str	r2, [r3, #0]
    load_context( stackPointer );
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Handler+0x40>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fc11 	bl	800026e <load_context>
    asm("NOP");  // Workaround: armclang optimizes in a way, that load_context and POP is erroneously reordered
 8001a4c:	bf00      	nop
  }
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000324 	.word	0x20000324
 8001a58:	20000320 	.word	0x20000320
 8001a5c:	2000031c 	.word	0x2000031c

08001a60 <PendSV_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void PendSV_Handler( void )
  {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
    static volatile DWORD stackPointer = 0;

    stackPointer = save_context();
 8001a64:	f7fe fbf6 	bl	8000254 <save_context>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <PendSV_Handler+0x34>)
 8001a6c:	6013      	str	r3, [r2, #0]
    stackPointer = (DWORD)Rtos_Mcu::schedule( (Rtos_Mcu::TaskHandle)stackPointer, false );
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <PendSV_Handler+0x38>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <PendSV_Handler+0x34>)
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	2100      	movs	r1, #0
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4798      	blx	r3
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <PendSV_Handler+0x34>)
 8001a82:	601a      	str	r2, [r3, #0]
    load_context( stackPointer );
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <PendSV_Handler+0x34>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fbf0 	bl	800026e <load_context>
    asm("NOP");  // Workaround: armclang optimizes in a way, that load_context and POP is erroneously reordered
 8001a8e:	bf00      	nop
  }
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000328 	.word	0x20000328
 8001a98:	2000031c 	.word	0x2000031c
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>:
Timer_Mcu *Timer_Mcu::timerPtr_10 = 0;
Timer_Mcu *Timer_Mcu::timerPtr_11 = 0;
Timer_Mcu *Timer_Mcu::timerPtr_14 = 0;

//-------------------------------------------------------------------
Timer_Mcu::Timer_Mcu( TimerId timerIdIn,
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	72fb      	strb	r3, [r7, #11]
                      DWORD   cycleTimeIn )

: Timer( ReportID_Hw::Module::TIMER_MCU )
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2130      	movs	r1, #48	; 0x30
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fbd0 	bl	8004258 <_ZN9EmbSysLib2Hw5TimerC1Et>
 8001ab8:	4aa9      	ldr	r2, [pc, #676]	; (8001d60 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c0>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	601a      	str	r2, [r3, #0]

{
  timerId = timerIdIn;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	7afa      	ldrb	r2, [r7, #11]
 8001ac2:	751a      	strb	r2, [r3, #20]

  switch( timerId )
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	7d1b      	ldrb	r3, [r3, #20]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	f200 80cb 	bhi.w	8001c66 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1c6>
 8001ad0:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x38>)
 8001ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad6:	bf00      	nop
 8001ad8:	08001b05 	.word	0x08001b05
 8001adc:	08001b25 	.word	0x08001b25
 8001ae0:	08001b47 	.word	0x08001b47
 8001ae4:	08001b67 	.word	0x08001b67
 8001ae8:	08001b87 	.word	0x08001b87
 8001aec:	08001ba7 	.word	0x08001ba7
 8001af0:	08001bc7 	.word	0x08001bc7
 8001af4:	08001be7 	.word	0x08001be7
 8001af8:	08001c07 	.word	0x08001c07
 8001afc:	08001c27 	.word	0x08001c27
 8001b00:	08001c47 	.word	0x08001c47
  {
   case TIM_1:
      ptr           = (TIM_TypeDef*)TIM1_BASE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a97      	ldr	r2, [pc, #604]	; (8001d64 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c4>)
 8001b08:	619a      	str	r2, [r3, #24]
      timerPtr_1    = this;
 8001b0a:	4a97      	ldr	r2, [pc, #604]	; (8001d68 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c8>)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001b10:	4b96      	ldr	r3, [pc, #600]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	4a95      	ldr	r2, [pc, #596]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001b1c:	2019      	movs	r0, #25
 8001b1e:	f7fe fc0f 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001b22:	e0a7      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_2:
      ptr           = (TIM_TypeDef*)TIM2_BASE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2a:	619a      	str	r2, [r3, #24]
      timerPtr_2    = this;
 8001b2c:	4a90      	ldr	r2, [pc, #576]	; (8001d70 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d0>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001b32:	4b8e      	ldr	r3, [pc, #568]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a8d      	ldr	r2, [pc, #564]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM2_IRQn );
 8001b3e:	201c      	movs	r0, #28
 8001b40:	f7fe fbfe 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001b44:	e096      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_3:
      ptr           = (TIM_TypeDef*)TIM3_BASE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4a8a      	ldr	r2, [pc, #552]	; (8001d74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d4>)
 8001b4a:	619a      	str	r2, [r3, #24]
      timerPtr_3    = this;
 8001b4c:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d8>)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001b52:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a85      	ldr	r2, [pc, #532]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM3_IRQn );
 8001b5e:	201d      	movs	r0, #29
 8001b60:	f7fe fbee 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001b64:	e086      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_4:
      ptr           = (TIM_TypeDef*)TIM4_BASE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4a84      	ldr	r2, [pc, #528]	; (8001d7c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2dc>)
 8001b6a:	619a      	str	r2, [r3, #24]
      timerPtr_4    = this;
 8001b6c:	4a84      	ldr	r2, [pc, #528]	; (8001d80 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e0>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001b72:	4b7e      	ldr	r3, [pc, #504]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a7d      	ldr	r2, [pc, #500]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM4_IRQn );
 8001b7e:	201e      	movs	r0, #30
 8001b80:	f7fe fbde 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001b84:	e076      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_5:
      ptr           = (TIM_TypeDef*)TIM5_BASE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a7e      	ldr	r2, [pc, #504]	; (8001d84 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e4>)
 8001b8a:	619a      	str	r2, [r3, #24]
      timerPtr_5    = this;
 8001b8c:	4a7e      	ldr	r2, [pc, #504]	; (8001d88 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e8>)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001b92:	4b76      	ldr	r3, [pc, #472]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a75      	ldr	r2, [pc, #468]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM5_IRQn );
 8001b9e:	2032      	movs	r0, #50	; 0x32
 8001ba0:	f7fe fbce 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001ba4:	e066      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_7:
      ptr           = (TIM_TypeDef*)TIM7_BASE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4a78      	ldr	r2, [pc, #480]	; (8001d8c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2ec>)
 8001baa:	619a      	str	r2, [r3, #24]
      timerPtr_7    = this;
 8001bac:	4a78      	ldr	r2, [pc, #480]	; (8001d90 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f0>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 8001bb2:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a6d      	ldr	r2, [pc, #436]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001bb8:	f043 0320 	orr.w	r3, r3, #32
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM7_IRQn );
 8001bbe:	2037      	movs	r0, #55	; 0x37
 8001bc0:	f7fe fbbe 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001bc4:	e056      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_8:
      ptr           = (TIM_TypeDef*)TIM8_BASE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4a72      	ldr	r2, [pc, #456]	; (8001d94 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f4>)
 8001bca:	619a      	str	r2, [r3, #24]
      timerPtr_8    = this;
 8001bcc:	4a72      	ldr	r2, [pc, #456]	; (8001d98 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f8>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8001bd2:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM8_CC_IRQn );
 8001bde:	202e      	movs	r0, #46	; 0x2e
 8001be0:	f7fe fbae 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001be4:	e046      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_9:
      ptr           = (TIM_TypeDef*)TIM9_BASE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4a6c      	ldr	r2, [pc, #432]	; (8001d9c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2fc>)
 8001bea:	619a      	str	r2, [r3, #24]
      timerPtr_9    = this;
 8001bec:	4a6c      	ldr	r2, [pc, #432]	; (8001da0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x300>)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8001bf2:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a5d      	ldr	r2, [pc, #372]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001bfe:	2019      	movs	r0, #25
 8001c00:	f7fe fb9e 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001c04:	e036      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_10:
      ptr           = (TIM_TypeDef*)TIM10_BASE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4a66      	ldr	r2, [pc, #408]	; (8001da4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x304>)
 8001c0a:	619a      	str	r2, [r3, #24]
      timerPtr_10    = this;
 8001c0c:	4a66      	ldr	r2, [pc, #408]	; (8001da8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x308>)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8001c12:	4b56      	ldr	r3, [pc, #344]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a55      	ldr	r2, [pc, #340]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001c1e:	2019      	movs	r0, #25
 8001c20:	f7fe fb8e 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001c24:	e026      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_11:
      ptr           = (TIM_TypeDef*)TIM11_BASE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a60      	ldr	r2, [pc, #384]	; (8001dac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x30c>)
 8001c2a:	619a      	str	r2, [r3, #24]
      timerPtr_11    = this;
 8001c2c:	4a60      	ldr	r2, [pc, #384]	; (8001db0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x310>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8001c32:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_TRG_COM_TIM11_IRQn );
 8001c3e:	201a      	movs	r0, #26
 8001c40:	f7fe fb7e 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001c44:	e016      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_14:
      ptr           = (TIM_TypeDef*)TIM14_BASE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a5a      	ldr	r2, [pc, #360]	; (8001db4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x314>)
 8001c4a:	619a      	str	r2, [r3, #24]
      timerPtr_14    = this;
 8001c4c:	4a5a      	ldr	r2, [pc, #360]	; (8001db8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x318>)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a45      	ldr	r2, [pc, #276]	; (8001d6c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM8_TRG_COM_TIM14_IRQn );
 8001c5e:	202d      	movs	r0, #45	; 0x2d
 8001c60:	f7fe fb6e 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8001c64:	e006      	b.n	8001c74 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	2107      	movs	r1, #7
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 fc29 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001c72:	bf00      	nop
  }

  // calculate tics and prescaler
  float rawTics = 2.0*system_PCLK_TIM * cycleTimeIn * 1E-6f;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c7e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001d48 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a8>
 8001c82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c86:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001d50 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b0>
 8001c8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c92:	edc7 7a05 	vstr	s15, [r7, #20]
  DWORD ps      = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	613b      	str	r3, [r7, #16]
  while( rawTics > 0x10000 ) // tics must be < 16Bits
 8001c9a:	e00d      	b.n	8001cb8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x218>
  {
    ps      *= 10;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
    rawTics /= 10;
 8001ca8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	edc7 7a05 	vstr	s15, [r7, #20]
  while( rawTics > 0x10000 ) // tics must be < 16Bits
 8001cb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cbc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001dbc <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x31c>
 8001cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc8:	dce8      	bgt.n	8001c9c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1fc>
  }

  tics      = (DWORD)rawTics;
 8001cca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd2:	ee17 2a90 	vmov	r2, s15
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
  cycleTime = (DWORD)(1E6 * tics * ps / (2.0*system_PCLK_TIM) );
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ce6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001d58 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cf8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001cfc:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001d48 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a8>
 8001d00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d08:	ee17 2a90 	vmov	r2, s15
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	605a      	str	r2, [r3, #4]

  ptr->DIER = TIM_DIER_UIE; // update interrupt enable
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2201      	movs	r2, #1
 8001d16:	60da      	str	r2, [r3, #12]
  ptr->EGR  = TIM_EGR_UG;   // re-initialize timer
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	615a      	str	r2, [r3, #20]
  ptr->PSC  = ps   - 1;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	3a01      	subs	r2, #1
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  ptr->ARR  = tics - 1;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	3a01      	subs	r2, #1
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
  ptr->CR1  = TIM_CR1_CEN;  // counter enable
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	4197d784 	.word	0x4197d784
 8001d50:	a0000000 	.word	0xa0000000
 8001d54:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	412e8480 	.word	0x412e8480
 8001d60:	0800ba44 	.word	0x0800ba44
 8001d64:	40010000 	.word	0x40010000
 8001d68:	2000032c 	.word	0x2000032c
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	20000330 	.word	0x20000330
 8001d74:	40000400 	.word	0x40000400
 8001d78:	20000334 	.word	0x20000334
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	20000338 	.word	0x20000338
 8001d84:	40000c00 	.word	0x40000c00
 8001d88:	2000033c 	.word	0x2000033c
 8001d8c:	40001400 	.word	0x40001400
 8001d90:	20000340 	.word	0x20000340
 8001d94:	40010400 	.word	0x40010400
 8001d98:	20000344 	.word	0x20000344
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	20000348 	.word	0x20000348
 8001da4:	40014400 	.word	0x40014400
 8001da8:	2000034c 	.word	0x2000034c
 8001dac:	40014800 	.word	0x40014800
 8001db0:	20000350 	.word	0x20000350
 8001db4:	40002000 	.word	0x40002000
 8001db8:	20000354 	.word	0x20000354
 8001dbc:	47800000 	.word	0x47800000

08001dc0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE>:

//-------------------------------------------------------------------
void Timer_Mcu::enablePWM( BYTE channel, Mode polarity )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	70bb      	strb	r3, [r7, #2]
  switch( timerId )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7d1b      	ldrb	r3, [r3, #20]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	f200 8198 	bhi.w	800210c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x34c>
 8001ddc:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x24>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001e11 	.word	0x08001e11
 8001de8:	08001e77 	.word	0x08001e77
 8001dec:	08001ed5 	.word	0x08001ed5
 8001df0:	08001f31 	.word	0x08001f31
 8001df4:	08001f8d 	.word	0x08001f8d
 8001df8:	08001fe9 	.word	0x08001fe9
 8001dfc:	08001ff7 	.word	0x08001ff7
 8001e00:	0800205f 	.word	0x0800205f
 8001e04:	08002093 	.word	0x08002093
 8001e08:	080020bf 	.word	0x080020bf
 8001e0c:	080020eb 	.word	0x080020eb
  {
    case TIM_1:
      switch( channel )
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d822      	bhi.n	8001e5c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x9c>
 8001e16:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x5c>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e39 	.word	0x08001e39
 8001e24:	08001e45 	.word	0x08001e45
 8001e28:	08001e51 	.word	0x08001e51
      {
        case 0: PinConfig::set( PinConfig::TIM1_CH1     ); break;
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8001e32:	f7fe fe03 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e36:	e017      	b.n	8001e68 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 1: PinConfig::set( PinConfig::TIM1_CH2     ); break;
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8001e3e:	f7fe fdfd 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e42:	e011      	b.n	8001e68 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 2: PinConfig::set( PinConfig::TIM1_CH3     ); break;
 8001e44:	2100      	movs	r1, #0
 8001e46:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8001e4a:	f7fe fdf7 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e4e:	e00b      	b.n	8001e68 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 3: PinConfig::set( PinConfig::TIM1_CH4     ); break;
 8001e50:	2100      	movs	r1, #0
 8001e52:	f44f 70bb 	mov.w	r0, #374	; 0x176
 8001e56:	f7fe fdf1 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e5a:	e005      	b.n	8001e68 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	330c      	adds	r3, #12
 8001e60:	2108      	movs	r1, #8
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 fb2e 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM1->BDTR |= (1<<15); // MOE Master Output Enable
 8001e68:	4bb9      	ldr	r3, [pc, #740]	; (8002150 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x390>)
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	4ab8      	ldr	r2, [pc, #736]	; (8002150 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x390>)
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e72:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8001e74:	e151      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_2:
      switch( channel )
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d823      	bhi.n	8001ec4 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x104>
 8001e7c:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xc4>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001e95 	.word	0x08001e95
 8001e88:	08001ea1 	.word	0x08001ea1
 8001e8c:	08001ead 	.word	0x08001ead
 8001e90:	08001eb9 	.word	0x08001eb9
      {
        case 0: PinConfig::set( PinConfig::TIM2_CH1     ); break;
 8001e94:	2100      	movs	r1, #0
 8001e96:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001e9a:	f7fe fdcf 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e9e:	e018      	b.n	8001ed2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 1: PinConfig::set( PinConfig::TIM2_CH2     ); break;
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f240 1079 	movw	r0, #377	; 0x179
 8001ea6:	f7fe fdc9 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001eaa:	e012      	b.n	8001ed2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 2: PinConfig::set( PinConfig::TIM2_CH3     ); break;
 8001eac:	2100      	movs	r1, #0
 8001eae:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 8001eb2:	f7fe fdc3 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001eb6:	e00c      	b.n	8001ed2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 3: PinConfig::set( PinConfig::TIM2_CH4     ); break;
 8001eb8:	2100      	movs	r1, #0
 8001eba:	f240 107b 	movw	r0, #379	; 0x17b
 8001ebe:	f7fe fdbd 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001ec2:	e006      	b.n	8001ed2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	330c      	adds	r3, #12
 8001ec8:	2108      	movs	r1, #8
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 fafa 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001ed0:	e123      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001ed2:	e122      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_3:
      switch( channel )
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d822      	bhi.n	8001f20 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x160>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x120>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001f09 	.word	0x08001f09
 8001eec:	08001f15 	.word	0x08001f15
      {
        case 0: PinConfig::set( PinConfig::TIM3_CH1     ); break;
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f240 107d 	movw	r0, #381	; 0x17d
 8001ef6:	f7fe fda1 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001efa:	e018      	b.n	8001f2e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 1: PinConfig::set( PinConfig::TIM3_CH2     ); break;
 8001efc:	2100      	movs	r1, #0
 8001efe:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 8001f02:	f7fe fd9b 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001f06:	e012      	b.n	8001f2e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 2: PinConfig::set( PinConfig::TIM3_CH3     ); break;
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f240 107f 	movw	r0, #383	; 0x17f
 8001f0e:	f7fe fd95 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001f12:	e00c      	b.n	8001f2e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 3: PinConfig::set( PinConfig::TIM3_CH4     ); break;
 8001f14:	2100      	movs	r1, #0
 8001f16:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8001f1a:	f7fe fd8f 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001f1e:	e006      	b.n	8001f2e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	330c      	adds	r3, #12
 8001f24:	2108      	movs	r1, #8
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 facc 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001f2c:	e0f5      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001f2e:	e0f4      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_4:
      switch( channel )
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d822      	bhi.n	8001f7c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1bc>
 8001f36:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x17c>)
 8001f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3c:	08001f4d 	.word	0x08001f4d
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f65 	.word	0x08001f65
 8001f48:	08001f71 	.word	0x08001f71
      {
        case 0: PinConfig::set( PinConfig::TIM4_CH1     ); break;
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8001f52:	f7fe fd73 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001f56:	e018      	b.n	8001f8a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 1: PinConfig::set( PinConfig::TIM4_CH2     ); break;
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f240 1083 	movw	r0, #387	; 0x183
 8001f5e:	f7fe fd6d 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001f62:	e012      	b.n	8001f8a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 2: PinConfig::set( PinConfig::TIM4_CH3     ); break;
 8001f64:	2100      	movs	r1, #0
 8001f66:	f44f 70c2 	mov.w	r0, #388	; 0x184
 8001f6a:	f7fe fd67 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001f6e:	e00c      	b.n	8001f8a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 3: PinConfig::set( PinConfig::TIM4_CH4     ); break;
 8001f70:	2100      	movs	r1, #0
 8001f72:	f240 1085 	movw	r0, #389	; 0x185
 8001f76:	f7fe fd61 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001f7a:	e006      	b.n	8001f8a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	330c      	adds	r3, #12
 8001f80:	2108      	movs	r1, #8
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fa9e 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001f88:	e0c7      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001f8a:	e0c6      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_5:
      switch( channel )
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d822      	bhi.n	8001fd8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x218>
 8001f92:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1d8>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08001fa9 	.word	0x08001fa9
 8001f9c:	08001fb5 	.word	0x08001fb5
 8001fa0:	08001fc1 	.word	0x08001fc1
 8001fa4:	08001fcd 	.word	0x08001fcd
      {
        case 0: PinConfig::set( PinConfig::TIM5_CH1     ); break;
 8001fa8:	2100      	movs	r1, #0
 8001faa:	f240 1087 	movw	r0, #391	; 0x187
 8001fae:	f7fe fd45 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001fb2:	e018      	b.n	8001fe6 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 1: PinConfig::set( PinConfig::TIM5_CH2     ); break;
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8001fba:	f7fe fd3f 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001fbe:	e012      	b.n	8001fe6 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 2: PinConfig::set( PinConfig::TIM5_CH3     ); break;
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	f240 1089 	movw	r0, #393	; 0x189
 8001fc6:	f7fe fd39 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001fca:	e00c      	b.n	8001fe6 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 3: PinConfig::set( PinConfig::TIM5_CH4     ); break;
 8001fcc:	2100      	movs	r1, #0
 8001fce:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 8001fd2:	f7fe fd33 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001fd6:	e006      	b.n	8001fe6 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	2108      	movs	r1, #8
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fa70 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001fe4:	e099      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001fe6:	e098      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_7:
      switch( channel )
      {
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	330c      	adds	r3, #12
 8001fec:	2108      	movs	r1, #8
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 fa68 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001ff4:	e091      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_8:
      switch( channel )
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d823      	bhi.n	8002044 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x284>
 8001ffc:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x244>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002015 	.word	0x08002015
 8002008:	08002021 	.word	0x08002021
 800200c:	0800202d 	.word	0x0800202d
 8002010:	08002039 	.word	0x08002039
      {
        case 0: PinConfig::set( PinConfig::TIM8_CH1     ); break;
 8002014:	2100      	movs	r1, #0
 8002016:	f240 108d 	movw	r0, #397	; 0x18d
 800201a:	f7fe fd0f 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800201e:	e017      	b.n	8002050 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 1: PinConfig::set( PinConfig::TIM8_CH2     ); break;
 8002020:	2100      	movs	r1, #0
 8002022:	f240 108f 	movw	r0, #399	; 0x18f
 8002026:	f7fe fd09 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800202a:	e011      	b.n	8002050 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 2: PinConfig::set( PinConfig::TIM8_CH3     ); break;
 800202c:	2100      	movs	r1, #0
 800202e:	f240 1091 	movw	r0, #401	; 0x191
 8002032:	f7fe fd03 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002036:	e00b      	b.n	8002050 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 3: PinConfig::set( PinConfig::TIM8_CH4     ); break;
 8002038:	2100      	movs	r1, #0
 800203a:	f240 1093 	movw	r0, #403	; 0x193
 800203e:	f7fe fcfd 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002042:	e005      	b.n	8002050 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	330c      	adds	r3, #12
 8002048:	2108      	movs	r1, #8
 800204a:	4618      	mov	r0, r3
 800204c:	f001 fa3a 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM8->BDTR |= (1<<15); // MOE Master Output Enable
 8002050:	4b40      	ldr	r3, [pc, #256]	; (8002154 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x394>)
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	4a3f      	ldr	r2, [pc, #252]	; (8002154 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x394>)
 8002056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205a:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800205c:	e05d      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_9:
      switch( channel )
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2aa>
 8002064:	2b01      	cmp	r3, #1
 8002066:	d006      	beq.n	8002076 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2b6>
 8002068:	e00b      	b.n	8002082 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2c2>
      {
        case 0: PinConfig::set( PinConfig::TIM9_CH1     ); break;
 800206a:	2100      	movs	r1, #0
 800206c:	f240 1095 	movw	r0, #405	; 0x195
 8002070:	f7fe fce4 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002074:	e00c      	b.n	8002090 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2d0>
        case 1: PinConfig::set( PinConfig::TIM9_CH2     ); break;
 8002076:	2100      	movs	r1, #0
 8002078:	f44f 70cb 	mov.w	r0, #406	; 0x196
 800207c:	f7fe fcde 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002080:	e006      	b.n	8002090 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2d0>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	330c      	adds	r3, #12
 8002086:	2108      	movs	r1, #8
 8002088:	4618      	mov	r0, r3
 800208a:	f001 fa1b 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 800208e:	e044      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8002090:	e043      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_10:
      switch( channel )
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2e4>
      {
        case 0: PinConfig::set( PinConfig::TIM10_CH1     ); break;
 8002098:	2100      	movs	r1, #0
 800209a:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800209e:	f7fe fccd 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80020a2:	e005      	b.n	80020b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2f0>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	330c      	adds	r3, #12
 80020a8:	2108      	movs	r1, #8
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 fa0a 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM10->BDTR |= (1<<15); // MOE Master Output Enable
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x398>)
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	4a28      	ldr	r2, [pc, #160]	; (8002158 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x398>)
 80020b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ba:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80020bc:	e02d      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_11:
      switch( channel )
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x310>
      {
        case 0: PinConfig::set( PinConfig::TIM11_CH1     ); break;
 80020c4:	2100      	movs	r1, #0
 80020c6:	f240 1069 	movw	r0, #361	; 0x169
 80020ca:	f7fe fcb7 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80020ce:	e005      	b.n	80020dc <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x31c>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	330c      	adds	r3, #12
 80020d4:	2108      	movs	r1, #8
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 f9f4 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM11->BDTR |= (1<<15); // MOE Master Output Enable
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x39c>)
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x39c>)
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e6:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80020e8:	e017      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_14:
      switch( channel )
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d106      	bne.n	80020fe <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x33e>
      {
        case 0: PinConfig::set( PinConfig::TIM14_CH1     ); break;
 80020f0:	2100      	movs	r1, #0
 80020f2:	f240 106d 	movw	r0, #365	; 0x16d
 80020f6:	f7fe fca1 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80020fa:	bf00      	nop
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
      }
      break;
 80020fc:	e00d      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	330c      	adds	r3, #12
 8002102:	2108      	movs	r1, #8
 8002104:	4618      	mov	r0, r3
 8002106:	f001 f9dd 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 800210a:	e006      	b.n	800211a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	2107      	movs	r1, #7
 8002112:	4618      	mov	r0, r3
 8002114:	f001 f9d6 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002118:	bf00      	nop
  }

  WORD ccmr =  (7<<4)  // OCxM: PWM-mode 2
 800211a:	2378      	movs	r3, #120	; 0x78
 800211c:	81bb      	strh	r3, [r7, #12]
              |(1<<3); // OCxPE: preload enable

  WORD ccer = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	81fb      	strh	r3, [r7, #14]
  if( polarity )
 8002122:	78bb      	ldrb	r3, [r7, #2]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x36e>
  {
   ccer =  (1<<2)  // CCxNE: enable
 8002128:	230c      	movs	r3, #12
 800212a:	81fb      	strh	r3, [r7, #14]
 800212c:	e001      	b.n	8002132 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x372>
          |(1<<3); // CCxNP: polarity active low
  }
  else
  {
   ccer =  (1<<0)  // CCxE: enable
 800212e:	2303      	movs	r3, #3
 8002130:	81fb      	strh	r3, [r7, #14]
          |(1<<1); // CCxP: polarity active low
  }
  switch( channel )
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d861      	bhi.n	80021fc <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x43c>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x380>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002161 	.word	0x08002161
 8002144:	08002183 	.word	0x08002183
 8002148:	080021ad 	.word	0x080021ad
 800214c:	080021d3 	.word	0x080021d3
 8002150:	40010000 	.word	0x40010000
 8002154:	40010400 	.word	0x40010400
 8002158:	40014400 	.word	0x40014400
 800215c:	40014800 	.word	0x40014800
  {
    case 0:
      ptr->CCMR1 |=  ccmr;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	6999      	ldr	r1, [r3, #24]
 8002166:	89ba      	ldrh	r2, [r7, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	430a      	orrs	r2, r1
 800216e:	619a      	str	r2, [r3, #24]
      ptr->CCER  |=  ccer;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	6a19      	ldr	r1, [r3, #32]
 8002176:	89fa      	ldrh	r2, [r7, #14]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	430a      	orrs	r2, r1
 800217e:	621a      	str	r2, [r3, #32]
      break;
 8002180:	e043      	b.n	800220a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x44a>

    case 1:
      ptr->CCMR1 |=  ccmr<<8;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	89bb      	ldrh	r3, [r7, #12]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	4619      	mov	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	430a      	orrs	r2, r1
 8002194:	619a      	str	r2, [r3, #24]
      ptr->CCER  |=  ccer<<4;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	621a      	str	r2, [r3, #32]
      break;
 80021aa:	e02e      	b.n	800220a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x44a>

    case 2:
      ptr->CCMR2 |=  ccmr;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	69d9      	ldr	r1, [r3, #28]
 80021b2:	89ba      	ldrh	r2, [r7, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	61da      	str	r2, [r3, #28]
      ptr->CCER  |=  ccer<<8;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	6a1a      	ldr	r2, [r3, #32]
 80021c2:	89fb      	ldrh	r3, [r7, #14]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	4619      	mov	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	621a      	str	r2, [r3, #32]
      break;
 80021d0:	e01b      	b.n	800220a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x44a>

    case 3:
      ptr->CCMR2 |=  ccmr<<8;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	89bb      	ldrh	r3, [r7, #12]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	61da      	str	r2, [r3, #28]
      ptr->CCER  |=  ccer<<12;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	031b      	lsls	r3, r3, #12
 80021f0:	4619      	mov	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	621a      	str	r2, [r3, #32]
      break;
 80021fa:	e006      	b.n	800220a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x44a>

    default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	330c      	adds	r3, #12
 8002200:	2108      	movs	r1, #8
 8002202:	4618      	mov	r0, r3
 8002204:	f001 f95e 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002208:	bf00      	nop
  }
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop

08002214 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht>:

//-------------------------------------------------------------------
void Timer_Mcu::setPWM( BYTE ch, WORD value )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
 8002220:	4613      	mov	r3, r2
 8002222:	803b      	strh	r3, [r7, #0]
  value = (WORD)((DWORD)value*tics >> 16);
 8002224:	883b      	ldrh	r3, [r7, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6912      	ldr	r2, [r2, #16]
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	803b      	strh	r3, [r7, #0]

  switch( ch )
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d81f      	bhi.n	8002278 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x64>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x2c>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002251 	.word	0x08002251
 8002244:	0800225b 	.word	0x0800225b
 8002248:	08002265 	.word	0x08002265
 800224c:	0800226f 	.word	0x0800226f
  {
    case 0: ptr->CCR1  = value; break;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	883a      	ldrh	r2, [r7, #0]
 8002256:	635a      	str	r2, [r3, #52]	; 0x34
 8002258:	e015      	b.n	8002286 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 1: ptr->CCR2  = value; break;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	883a      	ldrh	r2, [r7, #0]
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
 8002262:	e010      	b.n	8002286 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 2: ptr->CCR3  = value; break;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	883a      	ldrh	r2, [r7, #0]
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c
 800226c:	e00b      	b.n	8002286 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 3: ptr->CCR4  = value; break;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	883a      	ldrh	r2, [r7, #0]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
 8002276:	e006      	b.n	8002286 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	330c      	adds	r3, #12
 800227c:	2108      	movs	r1, #8
 800227e:	4618      	mov	r0, r3
 8002280:	f001 f920 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002284:	bf00      	nop
  }
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop

08002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>:

//-------------------------------------------------------------------
void Timer_Mcu::isr(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  // ptr->SR &= ~TIM_SR_TIF;
  ptr->SR = 0;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  isrHandler();
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3310      	adds	r3, #16
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4610      	mov	r0, r2
 80022ac:	4798      	blx	r3
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <TIM1_UP_TIM10_IRQHandler>:

//-------------------------------------------------------------------
extern "C" {
  void TIM1_UP_TIM10_IRQHandler(void)
  {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
    if( TIM1->SR & TIM_SR_UIF )
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <TIM1_UP_TIM10_IRQHandler+0x74>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <TIM1_UP_TIM10_IRQHandler+0x2a>
    {
      TIM1->SR = 0;
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <TIM1_UP_TIM10_IRQHandler+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_1->isr();
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ffd7 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
    if( TIM9->SR )
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <TIM1_UP_TIM10_IRQHandler+0x4c>
    {
      TIM9->SR=0;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_9->isr();
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <TIM1_UP_TIM10_IRQHandler+0x80>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ffc6 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
    if( TIM10->SR )
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <TIM1_UP_TIM10_IRQHandler+0x84>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <TIM1_UP_TIM10_IRQHandler+0x6e>
    {
      TIM10->SR=0;
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <TIM1_UP_TIM10_IRQHandler+0x84>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_10->isr();
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <TIM1_UP_TIM10_IRQHandler+0x88>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ffb5 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	2000032c 	.word	0x2000032c
 8002334:	40014000 	.word	0x40014000
 8002338:	20000348 	.word	0x20000348
 800233c:	40014400 	.word	0x40014400
 8002340:	2000034c 	.word	0x2000034c

08002344 <TIM1_TRG_COM_TIM11_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM1_TRG_COM_TIM11_IRQHandler(void)
  {
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
    if( TIM11->SR )
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    {
      TIM11->SR=0;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_11->isr();
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff93 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40014800 	.word	0x40014800
 8002374:	20000350 	.word	0x20000350

08002378 <TIM8_TRG_COM_TIM14_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM8_TRG_COM_TIM14_IRQHandler(void)
  {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
    if( TIM14->SR )
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    {
      TIM14->SR=0;
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_14->isr();
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff79 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40002000 	.word	0x40002000
 80023a8:	20000354 	.word	0x20000354

080023ac <TIM2_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM2_IRQHandler(void)
  {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_2->isr();
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <TIM2_IRQHandler+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff6b 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000330 	.word	0x20000330

080023c4 <TIM3_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM3_IRQHandler(void)
  {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_3->isr();
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <TIM3_IRQHandler+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000334 	.word	0x20000334

080023dc <TIM4_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM4_IRQHandler(void)
  {
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_4->isr();
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <TIM4_IRQHandler+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff53 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000338 	.word	0x20000338

080023f4 <TIM5_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM5_IRQHandler(void)
  {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_5->isr();
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <TIM5_IRQHandler+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff47 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000033c 	.word	0x2000033c

0800240c <TIM7_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM7_IRQHandler(void)
  {
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_7->isr();
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <TIM7_IRQHandler+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff3b 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000340 	.word	0x20000340

08002424 <TIM8_CC_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM8_CC_IRQHandler(void)
  {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_8->isr();
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <TIM8_CC_IRQHandler+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff2f 	bl	8002290 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000344 	.word	0x20000344

0800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt>:
Uart_Mcu *Uart_Mcu::uartPtr_4 = 0;
Uart_Mcu *Uart_Mcu::uartPtr_5 = 0;
Uart_Mcu *Uart_Mcu::uartPtr_6 = 0;

//-------------------------------------------------------------------
Uart_Mcu::Uart_Mcu( USART_Id id,
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	461a      	mov	r2, r3
 8002448:	460b      	mov	r3, r1
 800244a:	72fb      	strb	r3, [r7, #11]
 800244c:	4613      	mov	r3, r2
 800244e:	72bb      	strb	r3, [r7, #10]
                    DWORD    baud,
                    BYTE     mode,
                    WORD     sizeRxBuf,
                    WORD     sizeTxBuf )

: Uart( ReportID_Hw::Module::UART_MCU, sizeRxBuf, sizeTxBuf )
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	8bbb      	ldrh	r3, [r7, #28]
 8002454:	8b3a      	ldrh	r2, [r7, #24]
 8002456:	2120      	movs	r1, #32
 8002458:	f001 ffa6 	bl	80043a8 <_ZN9EmbSysLib2Hw4UartC1Ettt>
 800245c:	4aa9      	ldr	r2, [pc, #676]	; (8002704 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2c8>)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	601a      	str	r2, [r3, #0]
{
  switch( id )
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	3b01      	subs	r3, #1
 8002466:	2b05      	cmp	r3, #5
 8002468:	f200 80fc 	bhi.w	8002664 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x228>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x38>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	0800248d 	.word	0x0800248d
 8002478:	080024e9 	.word	0x080024e9
 800247c:	08002545 	.word	0x08002545
 8002480:	080025a1 	.word	0x080025a1
 8002484:	080025d5 	.word	0x080025d5
 8002488:	08002609 	.word	0x08002609
  {
    case USART_1:
      ptr           = (USART_TypeDef*)USART1_BASE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a9e      	ldr	r2, [pc, #632]	; (8002708 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2cc>)
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_1     = this;
 8002492:	4a9e      	ldr	r2, [pc, #632]	; (800270c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d0>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002498:	4b9d      	ldr	r3, [pc, #628]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	4a9c      	ldr	r2, [pc, #624]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800249e:	f043 0310 	orr.w	r3, r3, #16
 80024a2:	6453      	str	r3, [r2, #68]	; 0x44
      PinConfig::set( PinConfig::USART1_RX, PinConfig::ALTERNATE_FUNC );
 80024a4:	2102      	movs	r1, #2
 80024a6:	f240 10af 	movw	r0, #431	; 0x1af
 80024aa:	f7fe fac7 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART1_TX, PinConfig::ALTERNATE_FUNC );
 80024ae:	2102      	movs	r1, #2
 80024b0:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 80024b4:	f7fe fac2 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 80024b8:	7abb      	ldrb	r3, [r7, #10]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x90>
      {
        PinConfig::set( PinConfig::USART1_RTS, PinConfig::ALTERNATE_FUNC );
 80024c2:	2102      	movs	r1, #2
 80024c4:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80024c8:	f7fe fab8 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 80024cc:	7abb      	ldrb	r3, [r7, #10]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0xa4>
      {
        PinConfig::set( PinConfig::USART1_CTS, PinConfig::ALTERNATE_FUNC );
 80024d6:	2102      	movs	r1, #2
 80024d8:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 80024dc:	f7fe faae 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART1_IRQn );
 80024e0:	2025      	movs	r0, #37	; 0x25
 80024e2:	f7fd ff2d 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 80024e6:	e0c4      	b.n	8002672 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

  case USART_2:
      ptr           = (USART_TypeDef*)USART2_BASE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a8a      	ldr	r2, [pc, #552]	; (8002714 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d8>)
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_2     = this;
 80024ee:	4a8a      	ldr	r2, [pc, #552]	; (8002718 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2dc>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80024f4:	4b86      	ldr	r3, [pc, #536]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a85      	ldr	r2, [pc, #532]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80024fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::USART2_RX, PinConfig::ALTERNATE_FUNC );
 8002500:	2102      	movs	r1, #2
 8002502:	f240 10b5 	movw	r0, #437	; 0x1b5
 8002506:	f7fe fa99 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART2_TX, PinConfig::ALTERNATE_FUNC );
 800250a:	2102      	movs	r1, #2
 800250c:	f44f 70db 	mov.w	r0, #438	; 0x1b6
 8002510:	f7fe fa94 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 8002514:	7abb      	ldrb	r3, [r7, #10]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0xec>
      {
        PinConfig::set( PinConfig::USART2_RTS, PinConfig::ALTERNATE_FUNC );
 800251e:	2102      	movs	r1, #2
 8002520:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 8002524:	f7fe fa8a 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 8002528:	7abb      	ldrb	r3, [r7, #10]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x100>
      {
        PinConfig::set( PinConfig::USART2_CTS, PinConfig::ALTERNATE_FUNC );
 8002532:	2102      	movs	r1, #2
 8002534:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
 8002538:	f7fe fa80 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART2_IRQn );
 800253c:	2026      	movs	r0, #38	; 0x26
 800253e:	f7fd feff 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8002542:	e096      	b.n	8002672 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case USART_3:
      ptr           = (USART_TypeDef*)USART3_BASE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a75      	ldr	r2, [pc, #468]	; (800271c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e0>)
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_3     = this;
 800254a:	4a75      	ldr	r2, [pc, #468]	; (8002720 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e4>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8002550:	4b6f      	ldr	r3, [pc, #444]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	4a6e      	ldr	r2, [pc, #440]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255a:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::USART3_RX, PinConfig::ALTERNATE_FUNC );
 800255c:	2102      	movs	r1, #2
 800255e:	f240 10bb 	movw	r0, #443	; 0x1bb
 8002562:	f7fe fa6b 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART3_TX, PinConfig::ALTERNATE_FUNC );
 8002566:	2102      	movs	r1, #2
 8002568:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800256c:	f7fe fa66 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 8002570:	7abb      	ldrb	r3, [r7, #10]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x148>
      {
        PinConfig::set( PinConfig::USART3_RTS, PinConfig::ALTERNATE_FUNC );
 800257a:	2102      	movs	r1, #2
 800257c:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
 8002580:	f7fe fa5c 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 8002584:	7abb      	ldrb	r3, [r7, #10]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d004      	beq.n	8002598 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x15c>
      {
        PinConfig::set( PinConfig::USART3_CTS, PinConfig::ALTERNATE_FUNC );
 800258e:	2102      	movs	r1, #2
 8002590:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8002594:	f7fe fa52 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART3_IRQn );
 8002598:	2027      	movs	r0, #39	; 0x27
 800259a:	f7fd fed1 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 800259e:	e068      	b.n	8002672 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case UART_4:
      ptr           = (USART_TypeDef*)UART4_BASE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a60      	ldr	r2, [pc, #384]	; (8002724 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e8>)
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_4     = this;
 80025a6:	4a60      	ldr	r2, [pc, #384]	; (8002728 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2ec>)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_UART4EN;
 80025ac:	4b58      	ldr	r3, [pc, #352]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	4a57      	ldr	r2, [pc, #348]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80025b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025b6:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::UART4_RX, PinConfig::ALTERNATE_FUNC );
 80025b8:	2102      	movs	r1, #2
 80025ba:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80025be:	f7fe fa3d 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::UART4_TX, PinConfig::ALTERNATE_FUNC );
 80025c2:	2102      	movs	r1, #2
 80025c4:	f240 109b 	movw	r0, #411	; 0x19b
 80025c8:	f7fe fa38 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      // no RTS/CTS
      NVIC_EnableIRQ( UART4_IRQn );
 80025cc:	2034      	movs	r0, #52	; 0x34
 80025ce:	f7fd feb7 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 80025d2:	e04e      	b.n	8002672 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case UART_5:
      ptr           = (USART_TypeDef*)UART5_BASE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a55      	ldr	r2, [pc, #340]	; (800272c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f0>)
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_5     = this;
 80025da:	4a55      	ldr	r2, [pc, #340]	; (8002730 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f4>)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_UART5EN;
 80025e0:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80025e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::UART5_RX, PinConfig::ALTERNATE_FUNC );
 80025ec:	2102      	movs	r1, #2
 80025ee:	f240 109f 	movw	r0, #415	; 0x19f
 80025f2:	f7fe fa23 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::UART5_TX, PinConfig::ALTERNATE_FUNC );
 80025f6:	2102      	movs	r1, #2
 80025f8:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 80025fc:	f7fe fa1e 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      // no RTS/CTS
      NVIC_EnableIRQ( UART5_IRQn );
 8002600:	2035      	movs	r0, #53	; 0x35
 8002602:	f7fd fe9d 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8002606:	e034      	b.n	8002672 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case USART_6:
      ptr           = (USART_TypeDef*)USART6_BASE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f8>)
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_6     = this;
 800260e:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2fc>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002614:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	4a3d      	ldr	r2, [pc, #244]	; (8002710 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800261a:	f043 0320 	orr.w	r3, r3, #32
 800261e:	6453      	str	r3, [r2, #68]	; 0x44
      PinConfig::set( PinConfig::USART6_RX, PinConfig::ALTERNATE_FUNC );
 8002620:	2102      	movs	r1, #2
 8002622:	f240 10c1 	movw	r0, #449	; 0x1c1
 8002626:	f7fe fa09 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART6_TX, PinConfig::ALTERNATE_FUNC );
 800262a:	2102      	movs	r1, #2
 800262c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002630:	f7fe fa04 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 8002634:	7abb      	ldrb	r3, [r7, #10]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x20c>
      {
        PinConfig::set( PinConfig::USART6_RTS, PinConfig::ALTERNATE_FUNC );
 800263e:	2102      	movs	r1, #2
 8002640:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
 8002644:	f7fe f9fa 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 8002648:	7abb      	ldrb	r3, [r7, #10]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x220>
      {
        PinConfig::set( PinConfig::USART6_CTS, PinConfig::ALTERNATE_FUNC );
 8002652:	2102      	movs	r1, #2
 8002654:	f44f 70df 	mov.w	r0, #446	; 0x1be
 8002658:	f7fe f9f0 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART6_IRQn );
 800265c:	2047      	movs	r0, #71	; 0x47
 800265e:	f7fd fe6f 	bl	8000340 <__NVIC_EnableIRQ>
      break;
 8002662:	e006      	b.n	8002672 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	331e      	adds	r3, #30
 8002668:	2107      	movs	r1, #7
 800266a:	4618      	mov	r0, r3
 800266c:	f000 ff2a 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002670:	bf00      	nop

  }

  ptr->CR2 |=  ((MTYPE)0<<12); // 0: 1 stop bit
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	6852      	ldr	r2, [r2, #4]
 800267c:	605a      	str	r2, [r3, #4]

  ptr->CR1 |=  (        ((mode&(EVEN|ODD))?USART_CR1_M  :0)  // 8+paritry = 9 Bit
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	7abb      	ldrb	r3, [r7, #10]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x258>
 800268e:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
 8002692:	e000      	b.n	8002696 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x25a>
 8002694:	2100      	movs	r1, #0
                     |  ((mode&(EVEN|ODD))?USART_CR1_PCE:0)  //  parity
 8002696:	7abb      	ldrb	r3, [r7, #10]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x26a>
 80026a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a4:	e000      	b.n	80026a8 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x26c>
 80026a6:	2300      	movs	r3, #0
 80026a8:	4319      	orrs	r1, r3
                     |  ((mode&      ODD )?USART_CR1_PS :0)  // 0: even
 80026aa:	7abb      	ldrb	r3, [r7, #10]
 80026ac:	025b      	lsls	r3, r3, #9
 80026ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b2:	430b      	orrs	r3, r1
  ptr->CR1 |=  (        ((mode&(EVEN|ODD))?USART_CR1_M  :0)  // 8+paritry = 9 Bit
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	f042 020c 	orr.w	r2, r2, #12
 80026be:	601a      	str	r2, [r3, #0]
                     |  USART_CR1_RE   // RX mode
                     |  USART_CR1_TE );// TX mode

  ptr->CR3 |=  (  ((mode&RTS)?USART_CR3_RTSE:0)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	7abb      	ldrb	r3, [r7, #10]
 80026c8:	015b      	lsls	r3, r3, #5
 80026ca:	f403 7280 	and.w	r2, r3, #256	; 0x100
                | ((mode&CTS)?USART_CR3_CTSE:0) ); // set hardware flow control
 80026ce:	7abb      	ldrb	r3, [r7, #10]
 80026d0:	01db      	lsls	r3, r3, #7
 80026d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d6:	431a      	orrs	r2, r3
  ptr->CR3 |=  (  ((mode&RTS)?USART_CR3_RTSE:0)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]

  setBaudrate( baud );
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f848 	bl	8002778 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm>

  ptr->CR1 |= (  USART_CR1_UE       // Enable USART
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f042 0261 	orr.w	r2, r2, #97	; 0x61
 80026f6:	601a      	str	r2, [r3, #0]
               | USART_CR1_TCIE     // Transm. complete interr. enable
               | USART_CR1_RXNEIE );// Receive reg. not empty interr. enable
}
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	0800b9d8 	.word	0x0800b9d8
 8002708:	40011000 	.word	0x40011000
 800270c:	20000358 	.word	0x20000358
 8002710:	40023800 	.word	0x40023800
 8002714:	40004400 	.word	0x40004400
 8002718:	2000035c 	.word	0x2000035c
 800271c:	40004800 	.word	0x40004800
 8002720:	20000360 	.word	0x20000360
 8002724:	40004c00 	.word	0x40004c00
 8002728:	20000364 	.word	0x20000364
 800272c:	40005000 	.word	0x40005000
 8002730:	20000368 	.word	0x20000368
 8002734:	40011400 	.word	0x40011400
 8002738:	2000036c 	.word	0x2000036c

0800273c <_ZN9EmbSysLib2Hw8Uart_Mcu7getByteEv>:

//-------------------------------------------------------------------
inline BYTE Uart_Mcu::getByte( void )
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return( ptr->RDR );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	b2db      	uxtb	r3, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_ZN9EmbSysLib2Hw8Uart_Mcu7setByteEh>:

//-------------------------------------------------------------------
inline void Uart_Mcu::setByte( BYTE c )
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
  ptr->TDR = c;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm>:
//            fck                         fck
//   div = ---------  =>  BRR = 16*div = ------
//         16 x baud                      baud
//
void Uart_Mcu::setBaudrate( DWORD baud )
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  if( baud > 1500)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002788:	4293      	cmp	r3, r2
 800278a:	d923      	bls.n	80027d4 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x5c>
  {
    DWORD brr = (WORD)(2.0*system_PCLK_UART / baud);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002796:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8002808 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x90>
 800279a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800279e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027a2:	ee17 3a90 	vmov	r3, s15
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	60bb      	str	r3, [r7, #8]
    ptr->BRR  = (brr&0XFFF0) | ((brr>>1)&0x0007);
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80027b0:	4013      	ands	r3, r2
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	0852      	lsrs	r2, r2, #1
 80027b6:	f002 0107 	and.w	r1, r2, #7
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027be:	430b      	orrs	r3, r1
 80027c0:	60d3      	str	r3, [r2, #12]
    ptr->CR1 |= USART_CR1_OVER8;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d0:	601a      	str	r2, [r3, #0]
  {
    DWORD brr = (WORD)(system_PCLK_UART / baud);
    ptr->BRR  = brr;
    ptr->CR1 &= ~USART_CR1_OVER8;
  }
}
 80027d2:	e011      	b.n	80027f8 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x80>
    DWORD brr = (WORD)(system_PCLK_UART / baud);
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x98>)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	b29b      	uxth	r3, r3
 80027de:	60fb      	str	r3, [r7, #12]
    ptr->BRR  = brr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	60da      	str	r2, [r3, #12]
    ptr->CR1 &= ~USART_CR1_OVER8;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f6:	601a      	str	r2, [r3, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	f3af 8000 	nop.w
 8002808:	00000000 	.word	0x00000000
 800280c:	4197d784 	.word	0x4197d784
 8002810:	02faf080 	.word	0x02faf080

08002814 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>:

//-------------------------------------------------------------------
void Uart_Mcu::isr( void )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if( ptr->ISR & USART_ISR_RXNE ) // Receive data register not empty?
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv+0x2e>
  {
    isrRx();
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3318      	adds	r3, #24
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4610      	mov	r0, r2
 8002840:	4798      	blx	r3
  }
  if( ptr->ISR & USART_ISR_TC ) // Transmission complete?
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00e      	beq.n	8002878 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv+0x64>
  {
    ptr->ICR |= USART_ICR_TCCF;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	6a1a      	ldr	r2, [r3, #32]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002868:	621a      	str	r2, [r3, #32]
    isrTx();
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	331c      	adds	r3, #28
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4610      	mov	r0, r2
 8002876:	4798      	blx	r3
  }
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <USART1_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART1_IRQHandler(void)
  {
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_1->isr();
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <USART1_IRQHandler+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ffc3 	bl	8002814 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000358 	.word	0x20000358

08002898 <USART2_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART2_IRQHandler(void)
  {
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_2->isr();
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <USART2_IRQHandler+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ffb7 	bl	8002814 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000035c 	.word	0x2000035c

080028b0 <USART3_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART3_IRQHandler(void)
  {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_3->isr();
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <USART3_IRQHandler+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ffab 	bl	8002814 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000360 	.word	0x20000360

080028c8 <UART4_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void UART4_IRQHandler(void)
  {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_4->isr();
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <UART4_IRQHandler+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff9f 	bl	8002814 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000364 	.word	0x20000364

080028e0 <UART5_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void UART5_IRQHandler(void)
  {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_5->isr();
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <UART5_IRQHandler+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff93 	bl	8002814 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000368 	.word	0x20000368

080028f8 <USART6_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART6_IRQHandler(void)
  {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_6->isr();
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <USART6_IRQHandler+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff87 	bl	8002814 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000036c 	.word	0x2000036c

08002910 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth>:
  fifo = (__IO DWORD                 *)((DWORD)USB_OTG_FS + USB_OTG_FIFO_BASE         + (num)*USB_OTG_FIFO_SIZE   );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::config( WORD epMPS, BYTE epType )
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  txBuf.maxpacket = epMPS;
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

  if( num == 0 )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x26>
  {
    epMPS = 0; // MPS has to be 64 for endpoint 0
 8002932:	2300      	movs	r3, #0
 8002934:	807b      	strh	r3, [r7, #2]
  }
  USB_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (num)));
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x90>)
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	2301      	movs	r3, #1
 8002942:	408b      	lsls	r3, r1
 8002944:	b29b      	uxth	r3, r3
 8002946:	4916      	ldr	r1, [pc, #88]	; (80029a0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x90>)
 8002948:	4313      	orrs	r3, r2
 800294a:	61cb      	str	r3, [r1, #28]

  if( !(inep->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d015      	beq.n	8002992 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x82>
  {
    inep->DIEPCTL |= (  (epMPS & USB_OTG_DIEPCTL_MPSIZ )
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	f3c3 030a 	ubfx	r3, r3, #0, #11
                      | (epType << 18 )
 8002974:	7879      	ldrb	r1, [r7, #1]
 8002976:	0489      	lsls	r1, r1, #18
 8002978:	430b      	orrs	r3, r1
                      | (num    << 22 )
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	7809      	ldrb	r1, [r1, #0]
 800297e:	0589      	lsls	r1, r1, #22
 8002980:	430b      	orrs	r3, r1
    inep->DIEPCTL |= (  (epMPS & USB_OTG_DIEPCTL_MPSIZ )
 8002982:	ea42 0103 	orr.w	r1, r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x94>)
 800298e:	430b      	orrs	r3, r1
 8002990:	6013      	str	r3, [r2, #0]
                      | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
                      | USB_OTG_DIEPCTL_USBAEP );
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	50000800 	.word	0x50000800
 80029a4:	10008000 	.word	0x10008000

080029a8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>:
  return( len );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::writeToFifo( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  WORD len = MIN( txBuf.size, txBuf.maxpacket );
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f003 f81e 	bl	8005a00 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 80029c4:	4603      	mov	r3, r0
 80029c6:	823b      	strh	r3, [r7, #16]
  WORD cnt = (len + 3) / 4;
 80029c8:	8a3b      	ldrh	r3, [r7, #16]
 80029ca:	3303      	adds	r3, #3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da00      	bge.n	80029d2 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x2a>
 80029d0:	3303      	adds	r3, #3
 80029d2:	109b      	asrs	r3, r3, #2
 80029d4:	81fb      	strh	r3, [r7, #14]

  if( (inep->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= cnt )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	89fb      	ldrh	r3, [r7, #14]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	bf2c      	ite	cs
 80029e6:	2301      	movcs	r3, #1
 80029e8:	2300      	movcc	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01d      	beq.n	8002a2c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x84>
  {
    DWORD *src = (DWORD *)&txBuf.data[0];
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3301      	adds	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]

    txBuf.size = 0;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    txBuf.flag = false;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

    for( WORD i = 0; i < cnt; i++, src ++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	827b      	strh	r3, [r7, #18]
 8002a0a:	e00b      	b.n	8002a24 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x7c>
    {
      *fifo = *src;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	601a      	str	r2, [r3, #0]
    for( WORD i = 0; i < cnt; i++, src ++)
 8002a18:	8a7b      	ldrh	r3, [r7, #18]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	827b      	strh	r3, [r7, #18]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3304      	adds	r3, #4
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	8a7a      	ldrh	r2, [r7, #18]
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d3ef      	bcc.n	8002a0c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x64>
    }
  }

  if( len <= 0 )
 8002a2c:	8a3b      	ldrh	r3, [r7, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xa2>
  {
    USB_DEVICE->DIEPEMPMSK &= ~(0x1 << num);
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xac>)
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	408a      	lsls	r2, r1
 8002a40:	43d2      	mvns	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4a03      	ldr	r2, [pc, #12]	; (8002a54 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xac>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	50000800 	.word	0x50000800

08002a58 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::transmit( bool flag )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  WORD mps  = txBuf.maxpacket;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002a6a:	81fb      	strh	r3, [r7, #14]
  WORD len  = MIN( txBuf.size, txBuf.maxpacket );
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f002 ffc0 	bl	8005a00 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 8002a80:	4603      	mov	r3, r0
 8002a82:	81bb      	strh	r3, [r7, #12]

  if( !txBuf.flag )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0x3e>
  {
    transmitZLP();
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f842 	bl	8002b18 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>
    return;
 8002a94:	e038      	b.n	8002b08 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb0>
  }

  if( len == 0 ) // Zero Length Packet?
 8002a96:	89bb      	ldrh	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0x52>
  {
    if( flag )
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d032      	beq.n	8002b08 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb0>
    {
      transmitZLP();
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f838 	bl	8002b18 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>
 8002aa8:	e02e      	b.n	8002b08 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb0>
    }
  }
  else
  {
    BYTE pktCnt =  ((len + mps -1)/ mps);
 8002aaa:	89ba      	ldrh	r2, [r7, #12]
 8002aac:	89fb      	ldrh	r3, [r7, #14]
 8002aae:	4413      	add	r3, r2
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	89fb      	ldrh	r3, [r7, #14]
 8002ab4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ab8:	72fb      	strb	r3, [r7, #11]

    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
                                             | USB_OTG_DIEPTSIZ_XFRSIZ ) )
                      | ((   USB_OTG_DIEPTSIZ_PKTCNT & (pktCnt << 19))
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	04db      	lsls	r3, r3, #19
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb8>)
 8002ace:	4013      	ands	r3, r2
                           |(USB_OTG_DIEPTSIZ_XFRSIZ & len           ));
 8002ad0:	89ba      	ldrh	r2, [r7, #12]
 8002ad2:	431a      	orrs	r2, r3
    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
                      | ((   USB_OTG_DIEPTSIZ_PKTCNT & (pktCnt << 19))
 8002ada:	430a      	orrs	r2, r1
    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002adc:	611a      	str	r2, [r3, #16]

    USB_DEVICE->DIEPEMPMSK |= 1 << num; // Enable Tx FIFO Empty Interrupt
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xbc>)
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	2201      	movs	r2, #1
 8002aea:	408a      	lsls	r2, r1
 8002aec:	4611      	mov	r1, r2
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xbc>)
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6353      	str	r3, [r2, #52]	; 0x34

    inep->DIEPCTL  |=  (   USB_OTG_DIEPCTL_CNAK
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b02:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002b06:	601a      	str	r2, [r3, #0]
                         | USB_OTG_DIEPCTL_EPENA ); // Enable EP
  }
}
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	1ff80000 	.word	0x1ff80000
 8002b14:	50000800 	.word	0x50000800

08002b18 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::transmitZLP( void )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
    inep->DIEPTSIZ =  ( inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
                                            | USB_OTG_DIEPTSIZ_XFRSIZ ) )
                      | (   USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19) );
 8002b32:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    inep->DIEPTSIZ =  ( inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002b36:	611a      	str	r2, [r3, #16]

 //   USB_DEVICE->DIEPEMPMSK |= 1 << num; // Enable Tx FIFO Empty Interrupt

    inep->DIEPCTL  |=  (   USB_OTG_DIEPCTL_CNAK
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b46:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002b4a:	601a      	str	r2, [r3, #0]
                         | USB_OTG_DIEPCTL_EPENA ); // Enable EP
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::EndpointIN::getInterrupt( void )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  DWORD msk = USB_DEVICE->DIEPMSK | (((USB_DEVICE->DIEPEMPMSK >> num) & 0x1) << 7);
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv+0x38>)
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv+0x38>)
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	7809      	ldrb	r1, [r1, #0]
 8002b6c:	40cb      	lsrs	r3, r1
 8002b6e:	01db      	lsls	r3, r3, #7
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]

  return( inep->DIEPINT & msk );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	50000800 	.word	0x50000800

08002b94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::clrInterrupt( DWORD interruptID )
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  inep->DIEPINT |= interruptID; 
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth>:
  fifo  = (__IO DWORD                  *)((DWORD)USB_OTG_FS + USB_OTG_FIFO_BASE                                     );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::config( WORD epMPS, BYTE epType )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  rxBuf.maxpacket = epMPS;
 8002bd0:	887b      	ldrh	r3, [r7, #2]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

  if( num == 0 )
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x26>
  {
    epMPS = 0; // MPS has to be 64 for endpoint 0
 8002be2:	2300      	movs	r3, #0
 8002be4:	807b      	strh	r3, [r7, #2]
  }

  USB_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (num)) << 16);
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x94>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	408a      	lsls	r2, r1
 8002bf4:	0412      	lsls	r2, r2, #16
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x94>)
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	61d3      	str	r3, [r2, #28]

  if( !(outep->DOEPCTL & USB_OTG_DOEPCTL_USBAEP) )
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d011      	beq.n	8002c3c <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x7c>
  {
    outep->DOEPCTL |= (  (epMPS & USB_OTG_DOEPCTL_MPSIZ )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
                       | (epType << 18 )
 8002c26:	7879      	ldrb	r1, [r7, #1]
 8002c28:	0489      	lsls	r1, r1, #18
 8002c2a:	430b      	orrs	r3, r1
    outep->DOEPCTL |= (  (epMPS & USB_OTG_DOEPCTL_MPSIZ )
 8002c2c:	ea42 0103 	orr.w	r1, r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x98>)
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6013      	str	r3, [r2, #0]
                       | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)
                       | (USB_OTG_DOEPCTL_USBAEP));
  }

  if( num > 0 )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x8a>
  {
    receive();
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f83d 	bl	8002cc4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	50000800 	.word	0x50000800
 8002c58:	10008000 	.word	0x10008000

08002c5c <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>:
  return( len );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::readFromFifo( WORD len )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
  WORD cnt = (len + 3) / 4;
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	3303      	adds	r3, #3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	da00      	bge.n	8002c72 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x16>
 8002c70:	3303      	adds	r3, #3
 8002c72:	109b      	asrs	r3, r3, #2
 8002c74:	813b      	strh	r3, [r7, #8]

  DWORD *dest = (DWORD *)&rxBuf.data[0];
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]

  rxBuf.size = len;
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  rxBuf.flag = true;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

  for( WORD  i = 0; i < cnt; i++, dest++ )
 8002c8e:	2300      	movs	r3, #0
 8002c90:	817b      	strh	r3, [r7, #10]
 8002c92:	e00b      	b.n	8002cac <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x50>
  {
    *dest = *fifo;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]
  for( WORD  i = 0; i < cnt; i++, dest++ )
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	817b      	strh	r3, [r7, #10]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	897a      	ldrh	r2, [r7, #10]
 8002cae:	893b      	ldrh	r3, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d3ef      	bcc.n	8002c94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x38>
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::receive( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  WORD mps = rxBuf.maxpacket;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002cd2:	81fb      	strh	r3, [r7, #14]
  WORD len = MIN( rxBuf.size, rxBuf.maxpacket );
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	f002 fe8c 	bl	8005a00 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	81bb      	strh	r3, [r7, #12]

  if( len == 0 )
 8002cec:	89bb      	ldrh	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0x36>
  {
    receiveZLP();
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f83c 	bl	8002d70 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>
                          |(USB_OTG_DOEPTSIZ_XFRSIZ & (mps * pktcnt)) );

    outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
                          | USB_OTG_DOEPCTL_EPENA );  // Enable EP
  }
}
 8002cf8:	e033      	b.n	8002d62 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0x9e>
   BYTE pktcnt = (rxBuf.size + mps -1)/ mps;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002d00:	461a      	mov	r2, r3
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	4413      	add	r3, r2
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	89fb      	ldrh	r3, [r7, #14]
 8002d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d0e:	72fb      	strb	r3, [r7, #11]
   outep->DOEPTSIZ  &= ~(   USB_OTG_DOEPTSIZ_PKTCNT
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8002d22:	611a      	str	r2, [r3, #16]
    outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2a:	6919      	ldr	r1, [r3, #16]
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
 8002d2e:	04db      	lsls	r3, r3, #19
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0xa8>)
 8002d34:	4013      	ands	r3, r2
                          |(USB_OTG_DOEPTSIZ_XFRSIZ & (mps * pktcnt)) );
 8002d36:	89fa      	ldrh	r2, [r7, #14]
 8002d38:	7af8      	ldrb	r0, [r7, #11]
 8002d3a:	fb00 f202 	mul.w	r2, r0, r2
 8002d3e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002d42:	431a      	orrs	r2, r3
    outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	611a      	str	r2, [r3, #16]
    outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	1ff80000 	.word	0x1ff80000

08002d70 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::receiveZLP()
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  outep->DOEPTSIZ &= ~(   USB_OTG_DOEPTSIZ_PKTCNT
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d86:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8002d8a:	611a      	str	r2, [r3, #16]
                        | USB_OTG_DOEPTSIZ_XFRSIZ );

  outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d92:	691b      	ldr	r3, [r3, #16]
                      |  (USB_OTG_DOEPTSIZ_XFRSIZ & rxBuf.maxpacket) );
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
  outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19))
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002da6:	611a      	str	r2, [r3, #16]

  outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002dba:	601a      	str	r2, [r3, #0]
                        | USB_OTG_DOEPCTL_EPENA );  // Enable EP
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::EndpointOUT::getInterrupt( void )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return( outep->DOEPINT & USB_DEVICE->DOEPMSK );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv+0x24>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	4013      	ands	r3, r2
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	50000800 	.word	0x50000800

08002df0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::clrInterrupt( DWORD interruptID )
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  outep->DOEPINT |= interruptID;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e00:	6899      	ldr	r1, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv>:
  USB_OTG_FS->GAHBCFG |=  USB_OTG_GAHBCFG_GINT;      // enable USB interrupts
}

//-------------------------------------------------------------------
inline void USBdevice_Mcu::isr(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	; 0x30
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  // Current mode of operation = Host mode ?
  if( USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_CMOD )
 8002e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 82a7 	bne.w	800338c <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x570>
  {
    return;
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_MMIS ) )
 8002e3e:	2102      	movs	r1, #2
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 facf 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x42>
  {
    // incorrect mode
    clrInterrupt( USB_OTG_GINTSTS_MMIS);
 8002e56:	2102      	movs	r1, #2
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fadd 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_OEPINT ) )
 8002e5e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fabe 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8092 	beq.w	8002f9e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x182>
  {
    DWORD interruptBits = getOutInterrupt();
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fa9e 	bl	80033bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv>
 8002e80:	62f8      	str	r0, [r7, #44]	; 0x2c
    DWORD interruptType = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
    BYTE  epNum         = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    while ( interruptBits )
 8002e8c:	e083      	b.n	8002f96 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x17a>
    {
      if( interruptBits & 0x1 )
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d076      	beq.n	8002f86 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x16a>
      {
        interruptType = epOUT[epNum].getInterrupt();
 8002e98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e9c:	228c      	movs	r2, #140	; 0x8c
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff8c 	bl	8002dc8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv>
 8002eb0:	61f8      	str	r0, [r7, #28]

        if( interruptType & USB_OTG_DOEPINT_XFRC )
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0xe2>
        {
          // OUT-package received, non-control
          epOUT[epNum].receive();
 8002ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ec0:	228c      	movs	r2, #140	; 0x8c
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fef8 	bl	8002cc4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
          eventHandler( epNum, false );
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4798      	blx	r3
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_XFRC );
 8002ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ee8:	228c      	movs	r2, #140	; 0x8c
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff79 	bl	8002df0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DOEPINT_STUP )
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02c      	beq.n	8002f62 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x146>
        {
          // Setup-package received
          epOUT[epNum].receive();
 8002f08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f0c:	228c      	movs	r2, #140	; 0x8c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fed2 	bl	8002cc4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
          eventHandler( epNum, true );
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4798      	blx	r3
          epIN[epNum].transmit(true);
 8002f30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f34:	228c      	movs	r2, #140	; 0x8c
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	3350      	adds	r3, #80	; 0x50
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fd88 	bl	8002a58 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>
          // epIN[0].writeToFifo();
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_STUP );
 8002f48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f4c:	228c      	movs	r2, #140	; 0x8c
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	2108      	movs	r1, #8
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff47 	bl	8002df0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DOEPINT_OTEPDIS )
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x16a>
        {
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_OTEPDIS);
 8002f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f70:	228c      	movs	r2, #140	; 0x8c
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	2110      	movs	r1, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff35 	bl	8002df0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }
      }

      // handle next endpoint
      epNum++;
 8002f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      interruptBits >>= 1;
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    while ( interruptBits )
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f af78 	bne.w	8002e8e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x72>
    }
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_IEPINT ) )
 8002f9e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa1e 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80d7 	beq.w	8003168 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x34c>
  {
    DWORD interruptBits = getInInterrupt();
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f9ec 	bl	8003398 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv>
 8002fc0:	6278      	str	r0, [r7, #36]	; 0x24
    DWORD interruptType = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
    BYTE  epNum         = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    while( interruptBits )
 8002fcc:	e0c8      	b.n	8003160 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x344>
    {
      if( interruptBits & 0x1 )
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80bb 	beq.w	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x334>
      {
        interruptType = epIN[epNum].getInterrupt( );
 8002fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fde:	228c      	movs	r2, #140	; 0x8c
 8002fe0:	fb02 f303 	mul.w	r3, r2, r3
 8002fe4:	3350      	adds	r3, #80	; 0x50
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fdb4 	bl	8002b58 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv>
 8002ff0:	61b8      	str	r0, [r7, #24]

        if( interruptType & USB_OTG_DIEPINT_XFRC )
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d03e      	beq.n	800307a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x25e>
        {
          // USB_DEVICE->DIEPEMPMSK = ~(0x1 << epNum);
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_XFRC );
 8002ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003000:	228c      	movs	r2, #140	; 0x8c
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	3350      	adds	r3, #80	; 0x50
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	2101      	movs	r1, #1
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fdc0 	bl	8002b94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
          epOUT[epNum].receiveZLP();
 8003014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003018:	228c      	movs	r2, #140	; 0x8c
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fea2 	bl	8002d70 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>
          eventHandler( epNum | 0x80, true );
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800303c:	b2d1      	uxtb	r1, r2
 800303e:	2201      	movs	r2, #1
 8003040:	4798      	blx	r3

          // todo interrupt handling not correct for interrupt or ctrl transfers
          // workaround:
          if( epNum > 0 )
 8003042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x246>
            epIN[epNum].transmit( false );
 800304a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800304e:	228c      	movs	r2, #140	; 0x8c
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	3350      	adds	r3, #80	; 0x50
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fcfb 	bl	8002a58 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_XFRC );
 8003062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003066:	228c      	movs	r2, #140	; 0x8c
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	3350      	adds	r3, #80	; 0x50
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fd8d 	bl	8002b94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_TOC )
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x280>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_TOC );
 8003084:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003088:	228c      	movs	r2, #140	; 0x8c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	3350      	adds	r3, #80	; 0x50
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	2108      	movs	r1, #8
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fd7c 	bl	8002b94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_ITTXFE )
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2b8>
        {
          epIN[epNum].writeToFifo();
 80030a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030aa:	228c      	movs	r2, #140	; 0x8c
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	3350      	adds	r3, #80	; 0x50
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fc76 	bl	80029a8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_ITTXFE );
 80030bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c0:	228c      	movs	r2, #140	; 0x8c
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	3350      	adds	r3, #80	; 0x50
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	2110      	movs	r1, #16
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fd60 	bl	8002b94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_INEPNE )
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2da>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_INEPNE );
 80030de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030e2:	228c      	movs	r2, #140	; 0x8c
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	3350      	adds	r3, #80	; 0x50
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fd4f 	bl	8002b94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_EPDISD )
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2fc>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_EPDISD );
 8003100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003104:	228c      	movs	r2, #140	; 0x8c
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	3350      	adds	r3, #80	; 0x50
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fd3e 	bl	8002b94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_TXFE )
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d016      	beq.n	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x334>
        {
          epIN[epNum].writeToFifo();
 8003122:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003126:	228c      	movs	r2, #140	; 0x8c
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	3350      	adds	r3, #80	; 0x50
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fc38 	bl	80029a8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_TXFE );
 8003138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800313c:	228c      	movs	r2, #140	; 0x8c
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	3350      	adds	r3, #80	; 0x50
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fd22 	bl	8002b94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }
      }

      // handle next endpoint
      epNum++;
 8003150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003154:	3301      	adds	r3, #1
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      interruptBits >>= 1;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
    while( interruptBits )
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	f47f af33 	bne.w	8002fce <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x1b2>
    }
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_WKUINT ) )
 8003168:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f939 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x37c>
  {
    USB_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003182:	4b84      	ldr	r3, [pc, #528]	; (8003394 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4a83      	ldr	r2, [pc, #524]	; (8003394 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6053      	str	r3, [r2, #4]
    clrInterrupt( USB_OTG_GINTSTS_WKUINT );
 800318e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f940 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_USBSUSP ) )
 8003198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f921 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d004      	beq.n	80031bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x3a0>
  {
    clrInterrupt( USB_OTG_GINTSTS_USBSUSP );
 80031b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f92e 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_USBRST ) )
 80031bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f90f 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x3d0>
  {
    reset();
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
    clrInterrupt( USB_OTG_GINTSTS_USBRST );
 80031e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f916 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_ENUMDNE ) )
 80031ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8f7 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d029      	beq.n	800325a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x43e>
  {
    USB_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a62      	ldr	r2, [pc, #392]	; (8003394 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6053      	str	r3, [r2, #4]

    USB_OTG_FS->GUSBCFG &= ~(  USB_OTG_GUSBCFG_TRDT );
 8003212:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800321c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003220:	60d3      	str	r3, [r2, #12]
    USB_OTG_FS->GUSBCFG |=  (  USB_OTG_GUSBCFG_TRDT_0
 8003222:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800322c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003230:	60d3      	str	r3, [r2, #12]
                             | USB_OTG_GUSBCFG_TRDT_2 );

    epOUT[0].config( MAX_EP0_SIZE );
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003238:	2200      	movs	r2, #0
 800323a:	2140      	movs	r1, #64	; 0x40
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fcbf 	bl	8002bc0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth>
    epIN [0].config( MAX_EP0_SIZE );
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3350      	adds	r3, #80	; 0x50
 8003246:	2200      	movs	r2, #0
 8003248:	2140      	movs	r1, #64	; 0x40
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fb60 	bl	8002910 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth>

    clrInterrupt( USB_OTG_GINTSTS_ENUMDNE );
 8003250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8df 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_RXFLVL ) )
 800325a:	2110      	movs	r1, #16
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8c1 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d04d      	beq.n	800330e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4f2>
  {
    USB_OTG_FS->GINTMSK &= ~(USB_OTG_GINTMSK_RXFLVLM);
 8003272:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800327c:	f023 0310 	bic.w	r3, r3, #16
 8003280:	6193      	str	r3, [r2, #24]

    DWORD temp = USB_OTG_FS->GRXSTSP;
 8003282:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	617b      	str	r3, [r7, #20]

    BYTE epnum = temp & USB_OTG_GRXSTSP_EPNUM;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	74fb      	strb	r3, [r7, #19]

    if( ((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  2 ) // Packet status = OUT data packet received
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	0c5b      	lsrs	r3, r3, #17
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	2b02      	cmp	r3, #2
 800329e:	d118      	bne.n	80032d2 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4b6>
    {
      if( temp & USB_OTG_GRXSTSP_BCNT )
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d024      	beq.n	80032f6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
      {
        epOUT[epnum].readFromFifo( (temp & USB_OTG_GRXSTSP_BCNT) >> 4 );
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	228c      	movs	r2, #140	; 0x8c
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	441a      	add	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f7ff fcc6 	bl	8002c5c <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>
 80032d0:	e011      	b.n	80032f6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
      }
    }
    else if( ((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  6 ) // Packet status = Setup data packet received
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	0c5b      	lsrs	r3, r3, #17
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d10b      	bne.n	80032f6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
    {
      epOUT[epnum].readFromFifo( 8 );
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	228c      	movs	r2, #140	; 0x8c
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	2108      	movs	r1, #8
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fcb3 	bl	8002c5c <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>
    }
    USB_OTG_FS->GINTMSK |= (USB_OTG_GINTMSK_RXFLVLM);
 80032f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003300:	f043 0310 	orr.w	r3, r3, #16
 8003304:	6193      	str	r3, [r2, #24]
    clrInterrupt( USB_OTG_GINTSTS_RXFLVL );
 8003306:	2110      	movs	r1, #16
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f885 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_SOF ) )
 800330e:	2108      	movs	r1, #8
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f867 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x512>
  {
    clrInterrupt( USB_OTG_GINTSTS_SOF );
 8003326:	2108      	movs	r1, #8
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f875 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_SRQINT ) )
 800332e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f856 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x536>
  {
    clrInterrupt( USB_OTG_GINTSTS_SRQINT );
 8003348:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f863 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_OTGINT ) )
 8003352:	2104      	movs	r1, #4
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f845 	bl	80033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d011      	beq.n	800338e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x572>
  {
    DWORD temp = USB_OTG_FS->GOTGINT;
 800336a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
    USB_OTG_FS->GOTGINT |= temp;
 8003372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]

    clrInterrupt( USB_OTG_GINTSTS_OTGINT );
 8003382:	2104      	movs	r1, #4
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f847 	bl	8003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
 800338a:	e000      	b.n	800338e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x572>
    return;
 800338c:	bf00      	nop
  }
}
 800338e:	3730      	adds	r7, #48	; 0x30
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	50000800 	.word	0x50000800

08003398 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv>:
  return true;
}

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::getInInterrupt( void )
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return(    USB_DEVICE->DAINT
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv+0x20>)
 80033a2:	699a      	ldr	r2, [r3, #24]
           & USB_DEVICE->DAINTMSK
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv+0x20>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	4013      	ands	r3, r2
           & 0xFFFF               );
 80033aa:	b29b      	uxth	r3, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	50000800 	.word	0x50000800

080033bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::getOutInterrupt( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return( (   USB_DEVICE->DAINT
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv+0x24>)
 80033c6:	699a      	ldr	r2, [r3, #24]
            & USB_DEVICE->DAINTMSK
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv+0x24>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	4013      	ands	r3, r2
            & 0xFFFF0000           ) >> 16);
 80033ce:	0c1b      	lsrs	r3, r3, #16
 80033d0:	b29b      	uxth	r3, r3
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	50000800 	.word	0x50000800

080033e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>:

//-------------------------------------------------------------------
BYTE USBdevice_Mcu::isInterruptPending( DWORD interuptID )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  return( (   USB_OTG_FS->GINTSTS
 80033ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033f2:	695a      	ldr	r2, [r3, #20]
            & USB_OTG_FS->GINTMSK
 80033f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	401a      	ands	r2, r3
            & interuptID          ) == interuptID );
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4013      	ands	r3, r2
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::clrInterrupt( DWORD interuptID )
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  USB_OTG_FS->GINTSTS |= interuptID;
 8003422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	614b      	str	r3, [r1, #20]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <OTG_FS_IRQHandler>:
//*******************************************************************
//-------------------------------------------------------------------
extern "C"
{
  void OTG_FS_IRQHandler(void)
  {
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
    USBdevice_Mcu::usbPtr->isr();
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <OTG_FS_IRQHandler+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fce7 	bl	8002e1c <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv>
  }
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000370 	.word	0x20000370

08003458 <_ZN9EmbSysLib3Std6ReportC1Et>:
Report::Handler *Report::msgHandler   = 0;
WORD             Report::globalCode   = 0;
WORD             Report::globalModule = 0;

//-------------------------------------------------------------------
Report::Report( WORD moduleId_In )
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	807b      	strh	r3, [r7, #2]
{
  moduleId  = moduleId_In;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	805a      	strh	r2, [r3, #2]
  localCode = 0;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	801a      	strh	r2, [r3, #0]
}
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <_ZN9EmbSysLib3Std6Report5storeEt>:

//-------------------------------------------------------------------
void Report::store( const WORD code )
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
  if( localCode == 0 )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <_ZN9EmbSysLib3Std6Report5storeEt+0x1a>
  {
    localCode = code;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	801a      	strh	r2, [r3, #0]
  }
  if( globalCode == 0 )
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <_ZN9EmbSysLib3Std6Report5storeEt+0x3c>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <_ZN9EmbSysLib3Std6Report5storeEt+0x30>
  {
    globalCode = code;
 80034a2:	4a06      	ldr	r2, [pc, #24]	; (80034bc <_ZN9EmbSysLib3Std6Report5storeEt+0x3c>)
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	8013      	strh	r3, [r2, #0]
    globalModule = moduleId;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	885a      	ldrh	r2, [r3, #2]
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <_ZN9EmbSysLib3Std6Report5storeEt+0x40>)
 80034ae:	801a      	strh	r2, [r3, #0]
  }
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20000378 	.word	0x20000378
 80034c0:	2000037a 	.word	0x2000037a

080034c4 <_ZN9EmbSysLib3Std6Report5errorEt>:

//-------------------------------------------------------------------
void Report::error( const WORD code )
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
  store( code );
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	4619      	mov	r1, r3
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ffd3 	bl	8003480 <_ZN9EmbSysLib3Std6Report5storeEt>
  if( msgHandler )
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <_ZN9EmbSysLib3Std6Report5errorEt+0x36>
  {
    msgHandler->onReport( code, moduleId, true );
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681c      	ldr	r4, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	885a      	ldrh	r2, [r3, #2]
 80034f2:	8879      	ldrh	r1, [r7, #2]
 80034f4:	2301      	movs	r3, #1
 80034f6:	47a0      	blx	r4
  }
  else
  {
    Hw::System::reset();
  }
}
 80034f8:	e001      	b.n	80034fe <_ZN9EmbSysLib3Std6Report5errorEt+0x3a>
    Hw::System::reset();
 80034fa:	f7fd f859 	bl	80005b0 <_ZN9EmbSysLib2Hw6System5resetEv>
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	bf00      	nop
 8003508:	20000374 	.word	0x20000374

0800350c <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>:
//
// Report::Handler
//
//*******************************************************************
//-------------------------------------------------------------------
Report::Handler::Handler()
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	4a06      	ldr	r2, [pc, #24]	; (8003530 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev+0x24>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	601a      	str	r2, [r3, #0]
{
  Report::msgHandler = this;
 800351a:	4a06      	ldr	r2, [pc, #24]	; (8003534 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev+0x28>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	0800bb80 	.word	0x0800bb80
 8003534:	20000374 	.word	0x20000374

08003538 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>:

//-------------------------------------------------------------------
Report::Handler::~Handler()
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x2c>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
{
  if( this == Report::msgHandler )
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x30>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d102      	bne.n	8003556 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x1e>
  {
    Report::msgHandler = 0;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x30>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
  }
}
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	0800bb80 	.word	0x0800bb80
 8003568:	20000374 	.word	0x20000374

0800356c <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>:
    /*!
    \class Task

    \brief Base class for timer interrupt tasks
    */
    class Task : public Std::Sequence<Task>::Item
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f002 fa55 	bl	8005a2a <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_>
 8003580:	4a03      	ldr	r2, [pc, #12]	; (8003590 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev+0x24>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	0800bb74 	.word	0x0800bb74

08003594 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE>:
//
// Adc
//
//*******************************************************************
//-------------------------------------------------------------------
Adc::Adc( WORD moduleId, BYTE num, Timer &timer )
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	4613      	mov	r3, r2
 80035a4:	727b      	strb	r3, [r7, #9]
: report( moduleId ) 
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ffdf 	bl	800356c <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 80035ae:	4a25      	ldr	r2, [pc, #148]	; (8003644 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0xb0>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3316      	adds	r3, #22
 80035b8:	897a      	ldrh	r2, [r7, #10]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff4b 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  currentCh      = 0;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	749a      	strb	r2, [r3, #18]
  currentId      = 0;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	74da      	strb	r2, [r3, #19]
  numActivatedCh = 0;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	745a      	strb	r2, [r3, #17]
  numOfChannels  = num;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	7a7a      	ldrb	r2, [r7, #9]
 80035d8:	741a      	strb	r2, [r3, #16]
  result         = new WORD[num];
 80035da:	7a7b      	ldrb	r3, [r7, #9]
 80035dc:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0xb4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d801      	bhi.n	80035e6 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0x52>
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	e001      	b.n	80035ea <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0x56>
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ea:	4618      	mov	r0, r3
 80035ec:	f005 fa12 	bl	8008a14 <_Znaj>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	609a      	str	r2, [r3, #8]
  chList         = new BYTE[num];
 80035f8:	7a7b      	ldrb	r3, [r7, #9]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f005 fa0a 	bl	8008a14 <_Znaj>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	60da      	str	r2, [r3, #12]
  isRunning      = false;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	751a      	strb	r2, [r3, #20]

  if( !result || !chList )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0x8a>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0x96>
  {
    report.error( ReportID_Hw::Event::MEMORY_ALLOCTION_ERROR );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3316      	adds	r3, #22
 8003622:	2105      	movs	r1, #5
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff4d 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
  }

  timer.add( this ); // add to update list
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3304      	adds	r3, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4611      	mov	r1, r2
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
}
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0800bb34 	.word	0x0800bb34
 8003648:	3ffffffc 	.word	0x3ffffffc

0800364c <_ZN9EmbSysLib2Hw3Adc6enableEhh>:

//-------------------------------------------------------------------
void Adc::enable( BYTE ch, BYTE para )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
 8003658:	4613      	mov	r3, r2
 800365a:	70bb      	strb	r3, [r7, #2]
  if( ch >= numOfChannels )  // is requested channel supported?
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7c1b      	ldrb	r3, [r3, #16]
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	429a      	cmp	r2, r3
 8003664:	d306      	bcc.n	8003674 <_ZN9EmbSysLib2Hw3Adc6enableEhh+0x28>
  {
    report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3316      	adds	r3, #22
 800366a:	2108      	movs	r1, #8
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff29 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
    return;
 8003672:	e03c      	b.n	80036ee <_ZN9EmbSysLib2Hw3Adc6enableEhh+0xa2>
  }

  for( int i = 0; i < numActivatedCh; i++ )  // check, if ch in chList
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e013      	b.n	80036a2 <_ZN9EmbSysLib2Hw3Adc6enableEhh+0x56>
  {
    if( chList[i]  == ch )
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	429a      	cmp	r2, r3
 8003688:	d108      	bne.n	800369c <_ZN9EmbSysLib2Hw3Adc6enableEhh+0x50>
    {
      configCh( ch, para );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3318      	adds	r3, #24
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	78ba      	ldrb	r2, [r7, #2]
 8003694:	78f9      	ldrb	r1, [r7, #3]
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
      return;
 800369a:	e028      	b.n	80036ee <_ZN9EmbSysLib2Hw3Adc6enableEhh+0xa2>
  for( int i = 0; i < numActivatedCh; i++ )  // check, if ch in chList
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7c5b      	ldrb	r3, [r3, #17]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4293      	cmp	r3, r2
 80036ac:	dbe5      	blt.n	800367a <_ZN9EmbSysLib2Hw3Adc6enableEhh+0x2e>
    }
  }

  if( numActivatedCh < numOfChannels )  // add ch to chList if possible
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7c5a      	ldrb	r2, [r3, #17]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7c1b      	ldrb	r3, [r3, #16]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d219      	bcs.n	80036ee <_ZN9EmbSysLib2Hw3Adc6enableEhh+0xa2>
  {
    result[ch] = 0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	2200      	movs	r2, #0
 80036c6:	801a      	strh	r2, [r3, #0]
    chList[numActivatedCh++] = ch;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7c5b      	ldrb	r3, [r3, #17]
 80036d0:	1c59      	adds	r1, r3, #1
 80036d2:	b2c8      	uxtb	r0, r1
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	7448      	strb	r0, [r1, #17]
 80036d8:	4413      	add	r3, r2
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	701a      	strb	r2, [r3, #0]
    configCh( ch, para );               // call hardware configuration
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3318      	adds	r3, #24
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	78ba      	ldrb	r2, [r7, #2]
 80036e8:	78f9      	ldrb	r1, [r7, #3]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
  }
}
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_ZN9EmbSysLib2Hw3Adc3getEh>:

//-------------------------------------------------------------------
inline WORD Adc::get( BYTE ch )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  return( result[ch] ); // get result of this ch
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	881b      	ldrh	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_ZN9EmbSysLib2Hw3Adc6updateEv>:

//-------------------------------------------------------------------
inline void Adc::update( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if( numActivatedCh && !isRunning ) // while sampling is running, we
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7c5b      	ldrb	r3, [r3, #17]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01d      	beq.n	8003764 <_ZN9EmbSysLib2Hw3Adc6updateEv+0x4c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7d1b      	ldrb	r3, [r3, #20]
 800372c:	f083 0301 	eor.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <_ZN9EmbSysLib2Hw3Adc6updateEv+0x4c>
                                     // must not update. Otherwise it
                                     // stops actual scan
  {
    currentId = 0;                   // start with first one
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	74da      	strb	r2, [r3, #19]
    currentCh = chList[currentId];   // get channel from list
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	7cd2      	ldrb	r2, [r2, #19]
 8003744:	4413      	add	r3, r2
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	749a      	strb	r2, [r3, #18]
    isRunning = true;                // set flag ...
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	751a      	strb	r2, [r3, #20]
    startCh( currentCh );            // ... and start with sampling
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3314      	adds	r3, #20
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	7c92      	ldrb	r2, [r2, #18]
 800375e:	4611      	mov	r1, r2
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
  }
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZN9EmbSysLib2Hw3Adc3isrEv>:

//-------------------------------------------------------------------
inline void Adc::isr( void )
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  result[currentCh] = getResult(); // get Result from HW and
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3310      	adds	r3, #16
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6891      	ldr	r1, [r2, #8]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	7c92      	ldrb	r2, [r2, #18]
 8003784:	0052      	lsls	r2, r2, #1
 8003786:	188c      	adds	r4, r1, r2
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
 800378c:	4603      	mov	r3, r0
 800378e:	8023      	strh	r3, [r4, #0]
                                   // store it in result buffer
  currentId++;                     // next channel
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	7cdb      	ldrb	r3, [r3, #19]
 8003794:	3301      	adds	r3, #1
 8003796:	b2da      	uxtb	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	74da      	strb	r2, [r3, #19]

  if( currentId < numActivatedCh ) // is there a next one?
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	7cda      	ldrb	r2, [r3, #19]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7c5b      	ldrb	r3, [r3, #17]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d211      	bcs.n	80037cc <_ZN9EmbSysLib2Hw3Adc3isrEv+0x60>
  {
    currentCh = chList[currentId]; // get next ch from list
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	7cd2      	ldrb	r2, [r2, #19]
 80037b0:	4413      	add	r3, r2
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	749a      	strb	r2, [r3, #18]
    startCh( currentCh );          // start with sampling
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3314      	adds	r3, #20
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	7c92      	ldrb	r2, [r2, #18]
 80037c4:	4611      	mov	r1, r2
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
  {
    currentId = 0;
    currentCh = chList[currentId];
    isRunning = false;
  }
}
 80037ca:	e00d      	b.n	80037e8 <_ZN9EmbSysLib2Hw3Adc3isrEv+0x7c>
    currentId = 0;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	74da      	strb	r2, [r3, #19]
    currentCh = chList[currentId];
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	7cd2      	ldrb	r2, [r2, #19]
 80037da:	4413      	add	r3, r2
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	749a      	strb	r2, [r3, #18]
    isRunning = false;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	751a      	strb	r2, [r3, #20]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}

080037f0 <_ZN9EmbSysLib2Hw4FontC1EPKNS1_6HeaderEPKh>:
//
// Font
//
//*******************************************************************
//-------------------------------------------------------------------
Font::Font( const Header *header,
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
            const BYTE   *data )
{
  this->header   = header;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	601a      	str	r2, [r3, #0]
  this->data     = data;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	605a      	str	r2, [r3, #4]
  this->selected = data;  // default is first character
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
}
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>:
  this->data   = (BYTE*)(ptr + sizeof(Font::Header));
}

//-------------------------------------------------------------------
 BYTE Font::getCharWidth( void ) const
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return( GET_BYTE_PROGMEM(header->charWidth) );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	78db      	ldrb	r3, [r3, #3]
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>:

//-------------------------------------------------------------------
BYTE Font::getCharHeight( void ) const
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  return( GET_BYTE_PROGMEM(header->charHeight) );
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	791b      	ldrb	r3, [r3, #4]
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <_ZN9EmbSysLib2Hw4Font7setCharEh>:

//-------------------------------------------------------------------
void Font::setChar( BYTE c )
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
  BYTE id = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]

  if(         GET_BYTE_PROGMEM(header->firstId) <= c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	429a      	cmp	r2, r3
 800386a:	d30b      	bcc.n	8003884 <_ZN9EmbSysLib2Hw4Font7setCharEh+0x34>
      && c <= GET_BYTE_PROGMEM(header->lastId)        ) // is char c defined?
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	785b      	ldrb	r3, [r3, #1]
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	429a      	cmp	r2, r3
 8003876:	d805      	bhi.n	8003884 <_ZN9EmbSysLib2Hw4Font7setCharEh+0x34>
  {
    id = c - GET_BYTE_PROGMEM(header->firstId);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	73fb      	strb	r3, [r7, #15]
  }
  selected = data + (WORD)id * GET_BYTE_PROGMEM(header->bytePerChar);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	6809      	ldr	r1, [r1, #0]
 800388e:	7889      	ldrb	r1, [r1, #2]
 8003890:	fb01 f202 	mul.w	r2, r1, r2
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <_ZN9EmbSysLib2Hw4Font8getPixelEhh>:

//-------------------------------------------------------------------
BYTE Font::getPixel( BYTE x, BYTE y )
{                                                 // calc pixel number
 80038a6:	b5b0      	push	{r4, r5, r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70fb      	strb	r3, [r7, #3]
 80038b2:	4613      	mov	r3, r2
 80038b4:	70bb      	strb	r3, [r7, #2]
  WORD pixel  = ( (WORD)x + (WORD)y * getCharWidth() );
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	b29c      	uxth	r4, r3
 80038ba:	78bb      	ldrb	r3, [r7, #2]
 80038bc:	b29d      	uxth	r5, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ffac 	bl	800381c <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 80038c4:	4603      	mov	r3, r0
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	fb15 f303 	smulbb	r3, r5, r3
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4423      	add	r3, r4
 80038d0:	81fb      	strh	r3, [r7, #14]

                                                // get pixel value
  BYTE ret = GET_BYTE_PROGMEM_PTR(selected+(pixel>>3)) & ( 0x80>>(pixel&0x07) );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	89fa      	ldrh	r2, [r7, #14]
 80038d8:	08d2      	lsrs	r2, r2, #3
 80038da:	b292      	uxth	r2, r2
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b25a      	sxtb	r2, r3
 80038e2:	89fb      	ldrh	r3, [r7, #14]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	fa41 f303 	asr.w	r3, r1, r3
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	4013      	ands	r3, r2
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	737b      	strb	r3, [r7, #13]
  pixel++;
 80038f6:	89fb      	ldrh	r3, [r7, #14]
 80038f8:	3301      	adds	r3, #1
 80038fa:	81fb      	strh	r3, [r7, #14]
  return( ret ? true : false );
 80038fc:	7b7b      	ldrb	r3, [r7, #13]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bdb0      	pop	{r4, r5, r7, pc}

08003910 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>:
  this->data   = (WORD*)(ptr + sizeof(Bitmap::Header));
}

//-------------------------------------------------------------------
WORD Bitmap::getWidth( void ) const
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return( header->width );
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	881b      	ldrh	r3, [r3, #0]
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <_ZNK9EmbSysLib2Hw6Bitmap9getHeightEv>:

//-------------------------------------------------------------------
WORD Bitmap::getHeight( void ) const
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  return( header->height );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	885b      	ldrh	r3, [r3, #2]
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <_ZN9EmbSysLib2Hw6Bitmap8getPixelEtt>:

//-------------------------------------------------------------------
WORD Bitmap::getPixel( WORD x, WORD y )
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	807b      	strh	r3, [r7, #2]
 8003950:	4613      	mov	r3, r2
 8003952:	803b      	strh	r3, [r7, #0]
  DWORD pixel  = (DWORD)x + (DWORD)y * getWidth();
 8003954:	887c      	ldrh	r4, [r7, #2]
 8003956:	883d      	ldrh	r5, [r7, #0]
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ffd9 	bl	8003910 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>
 800395e:	4603      	mov	r3, r0
 8003960:	fb05 f303 	mul.w	r3, r5, r3
 8003964:	4423      	add	r3, r4
 8003966:	60fb      	str	r3, [r7, #12]

  return( data[pixel] );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bdb0      	pop	{r4, r5, r7, pc}

0800397c <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh>:
//
// DisplayChar
//
//*******************************************************************
//-------------------------------------------------------------------
DisplayChar::DisplayChar( WORD moduleId,
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	4603      	mov	r3, r0
 800398c:	807b      	strh	r3, [r7, #2]
 800398e:	460b      	mov	r3, r1
 8003990:	707b      	strb	r3, [r7, #1]
 8003992:	4613      	mov	r3, r2
 8003994:	703b      	strb	r3, [r7, #0]
	                        BYTE numberOfLines,
                          BYTE numberOfColumns )
: report( moduleId ) 
 8003996:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh+0x48>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3308      	adds	r3, #8
 80039a0:	887a      	ldrh	r2, [r7, #2]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fd57 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  this->numberOfLines   = numberOfLines;
 80039aa:	787b      	ldrb	r3, [r7, #1]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	809a      	strh	r2, [r3, #4]
  this->numberOfColumns = numberOfColumns;
 80039b2:	783b      	ldrb	r3, [r7, #0]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	80da      	strh	r2, [r3, #6]
}
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	0800b9b4 	.word	0x0800b9b4

080039c8 <_ZN9EmbSysLib2Hw11DisplayChar16getNumberOfLinesEv>:

//-------------------------------------------------------------------
inline BYTE DisplayChar::getNumberOfLines( void )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return( numberOfLines );
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	889b      	ldrh	r3, [r3, #4]
 80039d4:	b2db      	uxtb	r3, r3
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_ZN9EmbSysLib2Hw11DisplayChar18getNumberOfColumnsEv>:

//-------------------------------------------------------------------
inline BYTE DisplayChar::getNumberOfColumns( void )
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  return( numberOfColumns );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	88db      	ldrh	r3, [r3, #6]
 80039ee:	b2db      	uxtb	r3, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc>:

//-------------------------------------------------------------------
void DisplayChar::putString( const char *str )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  while( *str != 0 )
 8003a06:	e00b      	b.n	8003a20 <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc+0x24>
  {
    putChar( *str );
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	7812      	ldrb	r2, [r2, #0]
 8003a14:	4611      	mov	r1, r2
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
    str++;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	603b      	str	r3, [r7, #0]
  while( *str != 0 )
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ef      	bne.n	8003a08 <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc+0xc>
  }
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh>:
//
// DisplayGraphic
//
//*******************************************************************
//-------------------------------------------------------------------
DisplayGraphic::DisplayGraphic( WORD moduleId,
 8003a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	4608      	mov	r0, r1
 8003a40:	4611      	mov	r1, r2
 8003a42:	461a      	mov	r2, r3
 8003a44:	4603      	mov	r3, r0
 8003a46:	817b      	strh	r3, [r7, #10]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	813b      	strh	r3, [r7, #8]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80fb      	strh	r3, [r7, #6]
: DisplayChar( moduleId,
               height/((WORD)zoom*font.getCharHeight()),
               width /((WORD)zoom*font.getCharWidth() ) )
, font  ( font )
, zoom  ( zoom )
, report( moduleId )
 8003a50:	68fe      	ldr	r6, [r7, #12]
               height/((WORD)zoom*font.getCharHeight()),
 8003a52:	88fc      	ldrh	r4, [r7, #6]
 8003a54:	f897 5034 	ldrb.w	r5, [r7, #52]	; 0x34
 8003a58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003a5c:	f7ff feeb 	bl	8003836 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003a60:	4603      	mov	r3, r0
 8003a62:	fb05 f303 	mul.w	r3, r5, r3
 8003a66:	fb94 f3f3 	sdiv	r3, r4, r3
, report( moduleId )
 8003a6a:	fa5f f883 	uxtb.w	r8, r3
               width /((WORD)zoom*font.getCharWidth() ) )
 8003a6e:	893c      	ldrh	r4, [r7, #8]
 8003a70:	f897 5034 	ldrb.w	r5, [r7, #52]	; 0x34
 8003a74:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003a78:	f7ff fed0 	bl	800381c <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	fb05 f303 	mul.w	r3, r5, r3
 8003a82:	fb94 f3f3 	sdiv	r3, r4, r3
, report( moduleId )
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	8979      	ldrh	r1, [r7, #10]
 8003a8a:	4642      	mov	r2, r8
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f7ff ff75 	bl	800397c <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh>
 8003a92:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh+0xe4>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	601a      	str	r2, [r3, #0]
, font  ( font )
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
, zoom  ( zoom )
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003aac:	f883 2020 	strb.w	r2, [r3, #32]
, report( moduleId )
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3328      	adds	r3, #40	; 0x28
 8003ab4:	897a      	ldrh	r2, [r7, #10]
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fccd 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  Hsize = width;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	893a      	ldrh	r2, [r7, #8]
 8003ac2:	821a      	strh	r2, [r3, #16]
	Vsize = height;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	825a      	strh	r2, [r3, #18]

  BackColor  = RGB2color(  0,  0,255);  // Blue
 8003aca:	22ff      	movs	r2, #255	; 0xff
 8003acc:	2100      	movs	r1, #0
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7fc fc8c 	bl	80003ec <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	845a      	strh	r2, [r3, #34]	; 0x22
  PaintColor = RGB2color(128,128,128);  // Gray
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	2080      	movs	r0, #128	; 0x80
 8003ae2:	f7fc fc83 	bl	80003ec <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	849a      	strh	r2, [r3, #36]	; 0x24
  TextColor  = RGB2color(255,255,255);  // White
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	21ff      	movs	r1, #255	; 0xff
 8003af2:	20ff      	movs	r0, #255	; 0xff
 8003af4:	f7fc fc7a 	bl	80003ec <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	84da      	strh	r2, [r3, #38]	; 0x26

  xPos = 0;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	819a      	strh	r2, [r3, #12]
  yPos = 0;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	81da      	strh	r2, [r3, #14]
}
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b18:	0800b958 	.word	0x0800b958

08003b1c <_ZN9EmbSysLib2Hw14DisplayGraphic7setFontENS0_4FontEh>:

//-------------------------------------------------------------------
void DisplayGraphic::setFont( Font font,
                              BYTE zoom )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	4638      	mov	r0, r7
 8003b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  this->font = font;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	463a      	mov	r2, r7
 8003b30:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  this->zoom = zoom;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	7e3a      	ldrb	r2, [r7, #24]
 8003b3a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_ZN9EmbSysLib2Hw14DisplayGraphic7setZoomEh>:

//-------------------------------------------------------------------
void DisplayGraphic::setZoom( BYTE zoom )
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	70fb      	strb	r3, [r7, #3]
  this->zoom = zoom;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <_ZN9EmbSysLib2Hw14DisplayGraphic12setBackColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setBackColor( WORD color )
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	807b      	strh	r3, [r7, #2]
  BackColor = color;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	887a      	ldrh	r2, [r7, #2]
 8003b7a:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_ZN9EmbSysLib2Hw14DisplayGraphic13setPaintColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setPaintColor( WORD color )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
  PaintColor = color;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_ZN9EmbSysLib2Hw14DisplayGraphic12setTextColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setTextColor( WORD color )
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	807b      	strh	r3, [r7, #2]
  TextColor = color;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	887a      	ldrh	r2, [r7, #2]
 8003bb6:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN9EmbSysLib2Hw14DisplayGraphic12gotoPixelPosEtt>:

//---------------------------------------------------------------
void DisplayGraphic::gotoPixelPos( WORD x, WORD y )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	807b      	strh	r3, [r7, #2]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	803b      	strh	r3, [r7, #0]
  xPos = x;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	819a      	strh	r2, [r3, #12]
  yPos = y;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	883a      	ldrh	r2, [r7, #0]
 8003bde:	81da      	strh	r2, [r3, #14]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_ZN9EmbSysLib2Hw14DisplayGraphic11gotoTextPosEhh>:

//---------------------------------------------------------------
void DisplayGraphic::gotoTextPos( BYTE line, BYTE colum )
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	70bb      	strb	r3, [r7, #2]
  xPos = (WORD)colum * zoom * font.getCharWidth();
 8003bfc:	78bb      	ldrb	r3, [r7, #2]
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	fb12 f303 	smulbb	r3, r2, r3
 8003c0c:	b29c      	uxth	r4, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3314      	adds	r3, #20
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fe02 	bl	800381c <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	fb14 f303 	smulbb	r3, r4, r3
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	819a      	strh	r2, [r3, #12]
  yPos = (WORD)line  * zoom * font.getCharHeight();
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	fb12 f303 	smulbb	r3, r2, r3
 8003c36:	b29c      	uxth	r4, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fdfa 	bl	8003836 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003c42:	4603      	mov	r3, r0
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	fb14 f303 	smulbb	r3, r4, r3
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	81da      	strh	r2, [r3, #14]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd90      	pop	{r4, r7, pc}

08003c58 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc>:

//---------------------------------------------------------------
void DisplayGraphic::putChar( char ch )
{
 8003c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c5c:	b087      	sub	sp, #28
 8003c5e:	af02      	add	r7, sp, #8
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70fb      	strb	r3, [r7, #3]
  font.setChar( ch );                                       // select char
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fdee 	bl	8003850 <_ZN9EmbSysLib2Hw4Font7setCharEh>

  setArea( xPos,                                            // set painting area
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3348      	adds	r3, #72	; 0x48
 8003c7a:	681c      	ldr	r4, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	899e      	ldrh	r6, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 800e 	ldrh.w	r8, [r3, #14]
           yPos,
           zoom*font.getCharWidth(),
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c8c:	b29d      	uxth	r5, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3314      	adds	r3, #20
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fdc2 	bl	800381c <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	b29b      	uxth	r3, r3
  setArea( xPos,                                            // set painting area
 8003c9c:	fb15 f303 	smulbb	r3, r5, r3
 8003ca0:	fa1f f983 	uxth.w	r9, r3
           zoom*font.getCharHeight() );
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003caa:	b29d      	uxth	r5, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fdc0 	bl	8003836 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	b29b      	uxth	r3, r3
  setArea( xPos,                                            // set painting area
 8003cba:	fb15 f303 	smulbb	r3, r5, r3
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	4631      	mov	r1, r6
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	47a0      	blx	r4

  for( BYTE py = 0; py < font.getCharHeight(); py++ )       // scan vert.
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e047      	b.n	8003d62 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x10a>
  {
     for( BYTE zoomY = 0; zoomY < zoom; zoomY++ )
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73bb      	strb	r3, [r7, #14]
 8003cd6:	e03b      	b.n	8003d50 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xf8>
     {
        for( BYTE px = 0 ; px < font.getCharWidth(); px++ ) // scan hor.
 8003cd8:	2300      	movs	r3, #0
 8003cda:	737b      	strb	r3, [r7, #13]
 8003cdc:	e026      	b.n	8003d2c <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xd4>
        {
          BYTE pixel = font.getPixel( px, py );             // what color?
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	7b79      	ldrb	r1, [r7, #13]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fddd 	bl	80038a6 <_ZN9EmbSysLib2Hw4Font8getPixelEhh>
 8003cec:	4603      	mov	r3, r0
 8003cee:	72fb      	strb	r3, [r7, #11]
          for( BYTE zoomX = 0; zoomX < zoom; zoomX++ )
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	733b      	strb	r3, [r7, #12]
 8003cf4:	e011      	b.n	8003d1a <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xc2>
          {
            setPixel( (pixel) ? TextColor : BackColor );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3350      	adds	r3, #80	; 0x50
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	7afb      	ldrb	r3, [r7, #11]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xb2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d08:	e001      	b.n	8003d0e <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xb6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4790      	blx	r2
          for( BYTE zoomX = 0; zoomX < zoom; zoomX++ )
 8003d14:	7b3b      	ldrb	r3, [r7, #12]
 8003d16:	3301      	adds	r3, #1
 8003d18:	733b      	strb	r3, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d20:	7b3a      	ldrb	r2, [r7, #12]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3e7      	bcc.n	8003cf6 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x9e>
        for( BYTE px = 0 ; px < font.getCharWidth(); px++ ) // scan hor.
 8003d26:	7b7b      	ldrb	r3, [r7, #13]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	737b      	strb	r3, [r7, #13]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fd73 	bl	800381c <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	7b7b      	ldrb	r3, [r7, #13]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bf34      	ite	cc
 8003d40:	2301      	movcc	r3, #1
 8003d42:	2300      	movcs	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1c9      	bne.n	8003cde <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x86>
     for( BYTE zoomY = 0; zoomY < zoom; zoomY++ )
 8003d4a:	7bbb      	ldrb	r3, [r7, #14]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	73bb      	strb	r3, [r7, #14]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d56:	7bba      	ldrb	r2, [r7, #14]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d3bd      	bcc.n	8003cd8 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x80>
  for( BYTE py = 0; py < font.getCharHeight(); py++ )       // scan vert.
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3314      	adds	r3, #20
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fd65 	bl	8003836 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	4293      	cmp	r3, r2
 8003d74:	bf34      	ite	cc
 8003d76:	2301      	movcc	r3, #1
 8003d78:	2300      	movcs	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1a8      	bne.n	8003cd2 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x7a>
          }
        }
     }
  }
  xPos += (WORD)zoom*font.getCharWidth();                   // emulate cursor increment
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d86:	461c      	mov	r4, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fd45 	bl	800381c <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	fb03 f104 	mul.w	r1, r3, r4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	899a      	ldrh	r2, [r3, #12]
 8003d9c:	b28b      	uxth	r3, r1
 8003d9e:	4413      	add	r3, r2
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	819a      	strh	r2, [r3, #12]
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003db0 <_ZN9EmbSysLib2Hw14DisplayGraphic8putPixelEtt>:

//---------------------------------------------------------------
void DisplayGraphic::putPixel( WORD x, WORD y )
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	803b      	strh	r3, [r7, #0]
  setPixel( PaintColor, x, y );
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	334c      	adds	r3, #76	; 0x4c
 8003dc6:	681c      	ldr	r4, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8003dcc:	883b      	ldrh	r3, [r7, #0]
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	47a0      	blx	r4
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd90      	pop	{r4, r7, pc}

08003ddc <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt>:
//---------------------------------------------------------------
void DisplayGraphic::putRectangle( WORD x,
                                   WORD y,
                                   WORD w,
                                   WORD h )
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b089      	sub	sp, #36	; 0x24
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	4608      	mov	r0, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	817b      	strh	r3, [r7, #10]
 8003dee:	460b      	mov	r3, r1
 8003df0:	813b      	strh	r3, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  setArea( x, y, w, h );             // set painting area
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3348      	adds	r3, #72	; 0x48
 8003dfc:	681c      	ldr	r4, [r3, #0]
 8003dfe:	88f8      	ldrh	r0, [r7, #6]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	4603      	mov	r3, r0
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	47a0      	blx	r4

  for( WORD py = 0; py < h; py++ )   // scan vert.
 8003e0e:	2300      	movs	r3, #0
 8003e10:	82fb      	strh	r3, [r7, #22]
 8003e12:	e015      	b.n	8003e40 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x64>
  {
    for( WORD px = 0; px < w; px++ ) // scan hor.
 8003e14:	2300      	movs	r3, #0
 8003e16:	82bb      	strh	r3, [r7, #20]
 8003e18:	e00b      	b.n	8003e32 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x56>
    {
      setPixel( PaintColor );        // draw pixel
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3350      	adds	r3, #80	; 0x50
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003e26:	4611      	mov	r1, r2
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	4798      	blx	r3
    for( WORD px = 0; px < w; px++ ) // scan hor.
 8003e2c:	8abb      	ldrh	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	82bb      	strh	r3, [r7, #20]
 8003e32:	8aba      	ldrh	r2, [r7, #20]
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3ef      	bcc.n	8003e1a <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x3e>
  for( WORD py = 0; py < h; py++ )   // scan vert.
 8003e3a:	8afb      	ldrh	r3, [r7, #22]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	82fb      	strh	r3, [r7, #22]
 8003e40:	8afa      	ldrh	r2, [r7, #22]
 8003e42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d3e5      	bcc.n	8003e14 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x38>
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd90      	pop	{r4, r7, pc}

08003e52 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE>:

//---------------------------------------------------------------
void DisplayGraphic::putBitmap( WORD   x,
                                WORD   y,
                                Bitmap bitmap )
{
 8003e52:	b082      	sub	sp, #8
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	460b      	mov	r3, r1
 8003e60:	807b      	strh	r3, [r7, #2]
 8003e62:	4613      	mov	r3, r2
 8003e64:	803b      	strh	r3, [r7, #0]
  WORD w = bitmap.getWidth();
 8003e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fd50 	bl	8003910 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>
 8003e70:	4603      	mov	r3, r0
 8003e72:	817b      	strh	r3, [r7, #10]
  WORD h = bitmap.getHeight();
 8003e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fd56 	bl	800392a <_ZNK9EmbSysLib2Hw6Bitmap9getHeightEv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	813b      	strh	r3, [r7, #8]

  setArea( x, y, w, h );                   // set painting area
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3348      	adds	r3, #72	; 0x48
 8003e88:	681c      	ldr	r4, [r3, #0]
 8003e8a:	8978      	ldrh	r0, [r7, #10]
 8003e8c:	883a      	ldrh	r2, [r7, #0]
 8003e8e:	8879      	ldrh	r1, [r7, #2]
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	4603      	mov	r3, r0
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	47a0      	blx	r4

  for( WORD py = 0; py < h; py++ )         // scan vert.
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	81fb      	strh	r3, [r7, #14]
 8003e9e:	e01b      	b.n	8003ed8 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x86>
  {
    for( WORD px = 0; px < w; px++ )       // scan hor.
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	81bb      	strh	r3, [r7, #12]
 8003ea4:	e011      	b.n	8003eca <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x78>
    {
      setPixel( bitmap.getPixel(px,py) );  // draw pixel and set to next
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3350      	adds	r3, #80	; 0x50
 8003eac:	681c      	ldr	r4, [r3, #0]
 8003eae:	89fa      	ldrh	r2, [r7, #14]
 8003eb0:	89b9      	ldrh	r1, [r7, #12]
 8003eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fd44 	bl	8003944 <_ZN9EmbSysLib2Hw6Bitmap8getPixelEtt>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	47a0      	blx	r4
    for( WORD px = 0; px < w; px++ )       // scan hor.
 8003ec4:	89bb      	ldrh	r3, [r7, #12]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	81bb      	strh	r3, [r7, #12]
 8003eca:	89ba      	ldrh	r2, [r7, #12]
 8003ecc:	897b      	ldrh	r3, [r7, #10]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3e9      	bcc.n	8003ea6 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x54>
  for( WORD py = 0; py < h; py++ )         // scan vert.
 8003ed2:	89fb      	ldrh	r3, [r7, #14]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	81fb      	strh	r3, [r7, #14]
 8003ed8:	89fa      	ldrh	r2, [r7, #14]
 8003eda:	893b      	ldrh	r3, [r7, #8]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d3df      	bcc.n	8003ea0 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x4e>
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003eec:	b002      	add	sp, #8
 8003eee:	4770      	bx	lr

08003ef0 <_ZN9EmbSysLib2Hw9I2CmasterC1Et>:
//
// I2Cmaster
//
//*******************************************************************
//-------------------------------------------------------------------
I2Cmaster::I2Cmaster( WORD moduleId )
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
: report( moduleId ) 
 8003efc:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <_ZN9EmbSysLib2Hw9I2CmasterC1Et+0x30>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3306      	adds	r3, #6
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff faa4 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  isHardwareOK = true;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	711a      	strb	r2, [r3, #4]
}
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	0800bae8 	.word	0x0800bae8

08003f24 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h>:
BYTE I2Cmaster::write( BYTE  hwAddr,
                       BYTE *adr,
                       BYTE  sizeAdr,
                       BYTE *data,
                       BYTE  sizeData )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	460b      	mov	r3, r1
 8003f32:	72fb      	strb	r3, [r7, #11]
 8003f34:	4613      	mov	r3, r2
 8003f36:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	75fb      	strb	r3, [r7, #23]

  isHardwareOK = true;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	711a      	strb	r2, [r3, #4]

  if( sizeAdr || sizeData )
 8003f42:	7abb      	ldrb	r3, [r7, #10]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x2c>
 8003f48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d03e      	beq.n	8003fce <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0xaa>
  {
    start( sizeAdr + sizeData );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3308      	adds	r3, #8
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	7ab9      	ldrb	r1, [r7, #10]
 8003f5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f5e:	440a      	add	r2, r1
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	4611      	mov	r1, r2
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	4798      	blx	r3
    sendAddr( hwAddr ); // master write
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3310      	adds	r3, #16
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	7afa      	ldrb	r2, [r7, #11]
 8003f72:	4611      	mov	r1, r2
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
 8003f7c:	e00d      	b.n	8003f9a <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x76>
    {
       writeByte( adr[i] );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3314      	adds	r3, #20
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	7dfa      	ldrb	r2, [r7, #23]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	3301      	adds	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
 8003f9a:	7dfa      	ldrb	r2, [r7, #23]
 8003f9c:	7abb      	ldrb	r3, [r7, #10]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3ed      	bcc.n	8003f7e <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x5a>
    }
    for( i=0; i< sizeData; i++ )
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75fb      	strb	r3, [r7, #23]
 8003fa6:	e00d      	b.n	8003fc4 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0xa0>
    {
       writeByte( data[i] );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3314      	adds	r3, #20
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	7dfa      	ldrb	r2, [r7, #23]
 8003fb2:	6a39      	ldr	r1, [r7, #32]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	4798      	blx	r3
    for( i=0; i< sizeData; i++ )
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
 8003fc4:	7dfa      	ldrb	r2, [r7, #23]
 8003fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3ec      	bcc.n	8003fa8 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x84>
    }
  }
  stop();
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	4798      	blx	r3
  return( !isHardwareOK );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	791b      	ldrb	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2301      	moveq	r3, #1
 8003fe4:	2300      	movne	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h>:
BYTE I2Cmaster::read( BYTE  hwAddr,
                      BYTE *adr,
                      BYTE  sizeAdr,
                      BYTE *data,
                      BYTE  sizeData )
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	72fb      	strb	r3, [r7, #11]
 8004000:	4613      	mov	r3, r2
 8004002:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	75fb      	strb	r3, [r7, #23]

  isHardwareOK = true;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	711a      	strb	r2, [r3, #4]

  if( sizeAdr )
 800400e:	7abb      	ldrb	r3, [r7, #10]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d024      	beq.n	800405e <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x6e>
  {
    start( sizeAdr );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	7aba      	ldrb	r2, [r7, #10]
 800401e:	4611      	mov	r1, r2
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	4798      	blx	r3
    sendAddr( hwAddr ); // master write
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3310      	adds	r3, #16
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	7afa      	ldrb	r2, [r7, #11]
 800402e:	4611      	mov	r1, r2
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8004034:	2300      	movs	r3, #0
 8004036:	75fb      	strb	r3, [r7, #23]
 8004038:	e00d      	b.n	8004056 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x66>
    {
      writeByte( adr[i] );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	7dfa      	ldrb	r2, [r7, #23]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	440a      	add	r2, r1
 8004048:	7812      	ldrb	r2, [r2, #0]
 800404a:	4611      	mov	r1, r2
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	3301      	adds	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
 8004056:	7dfa      	ldrb	r2, [r7, #23]
 8004058:	7abb      	ldrb	r3, [r7, #10]
 800405a:	429a      	cmp	r2, r3
 800405c:	d3ed      	bcc.n	800403a <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x4a>
    }
  }
  if( sizeData )
 800405e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d035      	beq.n	80040d2 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xe2>
  {
    start(sizeData);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3308      	adds	r3, #8
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004072:	4611      	mov	r1, r2
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	4798      	blx	r3
    sendAddr( hwAddr | 0x01 ); // master read
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3310      	adds	r3, #16
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	7afa      	ldrb	r2, [r7, #11]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	4611      	mov	r1, r2
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	4798      	blx	r3
    for( i=0; i < sizeData - 1; i++ )
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]
 8004092:	e00d      	b.n	80040b0 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xc0>
    {
      data[i] = readByteAck();
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3318      	adds	r3, #24
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	7dfa      	ldrb	r2, [r7, #23]
 800409e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a0:	188c      	adds	r4, r1, r2
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	4798      	blx	r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	7023      	strb	r3, [r4, #0]
    for( i=0; i < sizeData - 1; i++ )
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	3301      	adds	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
 80040b0:	7dfa      	ldrb	r2, [r7, #23]
 80040b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040b6:	3b01      	subs	r3, #1
 80040b8:	429a      	cmp	r2, r3
 80040ba:	dbeb      	blt.n	8004094 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xa4>
    }
    data[i] = readByteNack();
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	331c      	adds	r3, #28
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	7dfa      	ldrb	r2, [r7, #23]
 80040c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c8:	188c      	adds	r4, r1, r2
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	4798      	blx	r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	7023      	strb	r3, [r4, #0]
  }
  stop();
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	4798      	blx	r3
  return( !isHardwareOK );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	791b      	ldrb	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}

080040f4 <_ZN9EmbSysLib2Hw4PortC1Et>:
//
// Port
//
//*******************************************************************
//-------------------------------------------------------------------
Port::Port( WORD moduleId )
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
: report( moduleId )
 8004100:	4a07      	ldr	r2, [pc, #28]	; (8004120 <_ZN9EmbSysLib2Hw4PortC1Et+0x2c>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff f9a2 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
{
}
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	0800ba80 	.word	0x0800ba80

08004124 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>:
//
// Port::Pin
//
//*******************************************************************
//-------------------------------------------------------------------
Port::Pin::Pin( Port &port, BYTE pinId )
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	71fb      	strb	r3, [r7, #7]
: pinId  ( pinId    )
, pinMask( 1<<pinId )
, port   ( port     )
 8004132:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h+0x3c>)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	601a      	str	r2, [r3, #0]
: pinId  ( pinId    )
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	79fa      	ldrb	r2, [r7, #7]
 800413c:	711a      	strb	r2, [r3, #4]
, pinMask( 1<<pinId )
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	2201      	movs	r2, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]
, port   ( port     )
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	60da      	str	r2, [r3, #12]
{
}
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	0800baa0 	.word	0x0800baa0

08004164 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>:
  port.setPinMode( pinId, mode );
}

//-------------------------------------------------------------------
inline void Port::Pin::setMode( Mode mode )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  port.setPinMode( pinId, mode );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68d8      	ldr	r0, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3304      	adds	r3, #4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	7911      	ldrb	r1, [r2, #4]
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	4798      	blx	r3
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <_ZN9EmbSysLib2Hw4Port3Pin3setEv>:

//-------------------------------------------------------------------
inline void Port::Pin::set( void )
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  port.set( pinMask );
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68d8      	ldr	r0, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6892      	ldr	r2, [r2, #8]
 80041a8:	4611      	mov	r1, r2
 80041aa:	4798      	blx	r3
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>:

//-------------------------------------------------------------------
inline void Port::Pin::set( bool value )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
  if( value )  port.set( pinMask );
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <_ZN9EmbSysLib2Hw4Port3Pin3setEb+0x2a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68d8      	ldr	r0, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6892      	ldr	r2, [r2, #8]
 80041d8:	4611      	mov	r1, r2
 80041da:	4798      	blx	r3
  else         port.clr( pinMask );
}
 80041dc:	e00a      	b.n	80041f4 <_ZN9EmbSysLib2Hw4Port3Pin3setEb+0x40>
  else         port.clr( pinMask );
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68d8      	ldr	r0, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3310      	adds	r3, #16
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6892      	ldr	r2, [r2, #8]
 80041f0:	4611      	mov	r1, r2
 80041f2:	4798      	blx	r3
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_ZN9EmbSysLib2Hw4Port3Pin3clrEv>:

//-------------------------------------------------------------------
inline void Port::Pin::clr( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  port.clr( pinMask );
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68d8      	ldr	r0, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3310      	adds	r3, #16
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6892      	ldr	r2, [r2, #8]
 8004216:	4611      	mov	r1, r2
 8004218:	4798      	blx	r3
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <_ZN9EmbSysLib2Hw4Port3Pin3getEv>:

//-------------------------------------------------------------------
inline bool Port::Pin::get( void )
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  return( (port.get() & pinMask) != 0 );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4610      	mov	r0, r2
 800423a:	4798      	blx	r3
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <_ZN9EmbSysLib2Hw5TimerC1Et>:
//
// Timer
//
//*******************************************************************
//-------------------------------------------------------------------
Timer::Timer( WORD moduleId )
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
: report( moduleId )
 8004264:	4a09      	ldr	r2, [pc, #36]	; (800428c <_ZN9EmbSysLib2Hw5TimerC1Et+0x34>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3308      	adds	r3, #8
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fbf1 	bl	8005a56 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEEC1Ev>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	330c      	adds	r3, #12
 8004278:	887a      	ldrh	r2, [r7, #2]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff f8eb 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
{
}
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	0800bb58 	.word	0x0800bb58

08004290 <_ZN9EmbSysLib2Hw5Timer12getCycleTimeEv>:

//-------------------------------------------------------------------
DWORD Timer::getCycleTime( void )
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return( cycleTime );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <_ZN9EmbSysLib2Hw5Timer3addEPNS1_4TaskE>:

//-------------------------------------------------------------------
void Timer::add( Timer::Task *ptr )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  isrSeq.add( ptr );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3308      	adds	r3, #8
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 fbda 	bl	8005a72 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv>:

//-------------------------------------------------------------------
inline void Timer::isrHandler( void )
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  Task *ptr = isrSeq.getFirst();
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3308      	adds	r3, #8
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fbf9 	bl	8005aca <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE8getFirstEv>
 80042d8:	60f8      	str	r0, [r7, #12]
  while( ptr )
 80042da:	e00a      	b.n	80042f2 <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv+0x2c>
  {
    ptr->update();
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	4798      	blx	r3
    ptr = ptr->getNext();
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 fbf9 	bl	8005ae2 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4Item7getNextEv>
 80042f0:	60f8      	str	r0, [r7, #12]
  while( ptr )
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f1      	bne.n	80042dc <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv+0x16>
  }
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <_ZN9EmbSysLib2Hw5TouchC1Ettt>:
//
// Touch
//
//*******************************************************************
//-------------------------------------------------------------------
Touch::Touch( WORD moduleId, WORD widthIn, WORD heightIn )
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	817b      	strh	r3, [r7, #10]
 8004316:	460b      	mov	r3, r1
 8004318:	813b      	strh	r3, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
: report( moduleId )
 800431e:	4a0f      	ldr	r2, [pc, #60]	; (800435c <_ZN9EmbSysLib2Hw5TouchC1Ettt+0x58>)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	330e      	adds	r3, #14
 8004328:	897a      	ldrh	r2, [r7, #10]
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff f893 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  width  = widthIn;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	893a      	ldrh	r2, [r7, #8]
 8004336:	815a      	strh	r2, [r3, #10]
  height = heightIn;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	819a      	strh	r2, [r3, #12]
  xPos   = 0;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	809a      	strh	r2, [r3, #4]
  yPos   = 0;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	80da      	strh	r2, [r3, #6]
  isTouchedFlag = false;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	721a      	strb	r2, [r3, #8]
}
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	0800b940 	.word	0x0800b940

08004360 <_ZN9EmbSysLib2Hw5Touch7getPosXEv>:

//-------------------------------------------------------------------
inline WORD Touch::getPosX( void )
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  return( xPos );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	889b      	ldrh	r3, [r3, #4]
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_ZN9EmbSysLib2Hw5Touch7getPosYEv>:

//-------------------------------------------------------------------
inline WORD Touch::getPosY( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  return( yPos );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	88db      	ldrh	r3, [r3, #6]
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_ZN9EmbSysLib2Hw5Touch9isTouchedEv>:

//-------------------------------------------------------------------
inline BYTE Touch::isTouched( void )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return( isTouchedFlag );
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	7a1b      	ldrb	r3, [r3, #8]
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_ZN9EmbSysLib2Hw4UartC1Ettt>:
//
// Uart
//
//*******************************************************************
//-------------------------------------------------------------------
Uart::Uart( WORD moduleId, WORD sizeRxBuf, WORD sizeTxBuf )
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	461a      	mov	r2, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	817b      	strh	r3, [r7, #10]
 80043ba:	460b      	mov	r3, r1
 80043bc:	813b      	strh	r3, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]

: dataRxBuf( sizeRxBuf ) // initialize both FIFOs
, dataTxBuf( sizeTxBuf )
, report( moduleId )
 80043c2:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x98>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]
: dataRxBuf( sizeRxBuf ) // initialize both FIFOs
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3304      	adds	r3, #4
 80043cc:	893a      	ldrh	r2, [r7, #8]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 fb92 	bl	8005afa <_ZN9EmbSysLib3Std4FifoIhEC1Et>
, dataTxBuf( sizeTxBuf )
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3310      	adds	r3, #16
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 fb8b 	bl	8005afa <_ZN9EmbSysLib3Std4FifoIhEC1Et>
, report( moduleId )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	331e      	adds	r3, #30
 80043e8:	897a      	ldrh	r2, [r7, #10]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f833 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  if(   dataRxBuf.getSize() != sizeRxBuf
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 fbaa 	bl	8005b50 <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
     || dataTxBuf.getSize() != sizeTxBuf )
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	4293      	cmp	r3, r2
 8004404:	d109      	bne.n	800441a <_ZN9EmbSysLib2Hw4UartC1Ettt+0x72>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3310      	adds	r3, #16
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fba0 	bl	8005b50 <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>
 8004410:	4603      	mov	r3, r0
 8004412:	461a      	mov	r2, r3
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	4293      	cmp	r3, r2
 8004418:	d001      	beq.n	800441e <_ZN9EmbSysLib2Hw4UartC1Ettt+0x76>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x78>
 800441e:	2300      	movs	r3, #0
  if(   dataRxBuf.getSize() != sizeRxBuf
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x88>
  {
    report.error( ReportID_Hw::Event::MEMORY_ALLOCTION_ERROR );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	331e      	adds	r3, #30
 8004428:	2105      	movs	r1, #5
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff f84a 	bl	80034c4 <_ZN9EmbSysLib3Std6Report5errorEt>
  }
  txReady = true;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	771a      	strb	r2, [r3, #28]
}
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	0800ba10 	.word	0x0800ba10

08004444 <_ZN9EmbSysLib2Hw4Uart5isrRxEv>:

//-------------------------------------------------------------------
void Uart::isrRx( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  BYTE data = getByte(); // read data from hardware
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3328      	adds	r3, #40	; 0x28
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
 8004458:	4603      	mov	r3, r0
 800445a:	73fb      	strb	r3, [r7, #15]

  dataRxBuf << data;     // pipe data into FIFO
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	f107 020f 	add.w	r2, r7, #15
 8004464:	4611      	mov	r1, r2
 8004466:	4618      	mov	r0, r3
 8004468:	f001 fb7e 	bl	8005b68 <_ZN9EmbSysLib3Std4FifoIhElsERKh>
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <_ZN9EmbSysLib2Hw4Uart5isrTxEv>:

//-------------------------------------------------------------------
inline void Uart::isrTx( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  BYTE data = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]

  if( !dataTxBuf.isEmpty() ) // data to been sent?
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3310      	adds	r3, #16
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fba5 	bl	8005bd4 <_ZN9EmbSysLib3Std4FifoIhE7isEmptyEv>
 800448a:	4603      	mov	r3, r0
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d013      	beq.n	80044be <_ZN9EmbSysLib2Hw4Uart5isrTxEv+0x4a>
  {
    dataTxBuf >> data;       // read data from FIFO
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3310      	adds	r3, #16
 800449a:	f107 020f 	add.w	r2, r7, #15
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 fbab 	bl	8005bfc <_ZN9EmbSysLib3Std4FifoIhErsERh>
    txReady = false;         // set flag before setByte() because
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
                             // some hardware doesn't support
                             // interrupts and isrTx is called recursiv
    setByte( data );         // write data to hardware
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3324      	adds	r3, #36	; 0x24
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	4611      	mov	r1, r2
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
  }
  else
  {
    txReady = true;          // we are ready
  }
}
 80044bc:	e002      	b.n	80044c4 <_ZN9EmbSysLib2Hw4Uart5isrTxEv+0x50>
    txReady = true;          // we are ready
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	771a      	strb	r2, [r3, #28]
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <_ZN9EmbSysLib2Hw4Uart12transmitByteEh>:

//-------------------------------------------------------------------
void Uart::transmitByte( BYTE data )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 80044d8:	e00a      	b.n	80044f0 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x24>
  {
    if( txReady )             // this case is an error:
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	7f1b      	ldrb	r3, [r3, #28]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x24>
                              //   FIFO is full,
                              //   but isrTx is not running
    {
      isrTx();                // call isrTx explicit
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	331c      	adds	r3, #28
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3310      	adds	r3, #16
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 fbb5 	bl	8005c64 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ec      	bne.n	80044da <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0xe>
    }
                              // else: Data transfer is running,
                              //       we have to wait until complete
  }

  dataTxBuf << data;          // pipe data into FIFO
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3310      	adds	r3, #16
 8004504:	1cfa      	adds	r2, r7, #3
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f001 fb2d 	bl	8005b68 <_ZN9EmbSysLib3Std4FifoIhElsERKh>

  if( txReady )               // at first time, isrTx has to be
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7f1b      	ldrb	r3, [r3, #28]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x58>
                              // called explicit without interrupt
  {
    isrTx();
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	331c      	adds	r3, #28
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
  }
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_ZN9EmbSysLib2Hw4Uart3setEh>:

//-------------------------------------------------------------------
void Uart::set( BYTE data )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
  transmitByte( data );
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3320      	adds	r3, #32
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	4611      	mov	r1, r2
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZN9EmbSysLib2Hw4Uart3setEPKht>:

//-------------------------------------------------------------------
void Uart::set( const BYTE *data, WORD length )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  while( length-- )
 800455e:	e00a      	b.n	8004576 <_ZN9EmbSysLib2Hw4Uart3setEPKht+0x26>
  {
    transmitByte( *(data++ ) ); // put a character and set pointer to next
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3320      	adds	r3, #32
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4619      	mov	r1, r3
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	4790      	blx	r2
  while( length-- )
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	1e5a      	subs	r2, r3, #1
 800457a:	80fa      	strh	r2, [r7, #6]
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ea      	bne.n	8004560 <_ZN9EmbSysLib2Hw4Uart3setEPKht+0x10>
  }
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_ZN9EmbSysLib2Hw4Uart3setEPKc>:

//-------------------------------------------------------------------
void Uart::set( const char *str )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  while( *str )                // until end of null terminated string
 800459e:	e00a      	b.n	80045b6 <_ZN9EmbSysLib2Hw4Uart3setEPKc+0x22>
  {
    transmitByte( *(str++ ) ); // put a character and set pointer to next
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3320      	adds	r3, #32
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	1c59      	adds	r1, r3, #1
 80045ac:	6039      	str	r1, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4790      	blx	r2
  while( *str )                // until end of null terminated string
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <_ZN9EmbSysLib2Hw4Uart3setEPKc+0xc>
  }
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <_ZN9EmbSysLib2Hw4Uart14isTxBufferFullEv>:
//-------------------------------------------------------------------
inline bool Uart::isTxBufferFull( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return( dataTxBuf.isFull() );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3310      	adds	r3, #16
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fb45 	bl	8005c64 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>
 80045da:	4603      	mov	r3, r0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN9EmbSysLib2Hw4Uart3getERh>:

//-------------------------------------------------------------------
bool Uart::get( BYTE &data )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  BYTE tmp = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]

  if( dataRxBuf >> tmp )   // is there a data byte in the FIFO?
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	f107 020f 	add.w	r2, r7, #15
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 fafd 	bl	8005bfc <_ZN9EmbSysLib3Std4FifoIhErsERh>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <_ZN9EmbSysLib2Hw4Uart3getERh+0x2e>
  {
    data = tmp;            // copy data byte to pointer
 8004608:	7bfa      	ldrb	r2, [r7, #15]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	701a      	strb	r2, [r3, #0]
    return( true );        // yes, we received a data byte
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <_ZN9EmbSysLib2Hw4Uart3getERh+0x30>
  }
  else
  {
    return( false );       // no data byte received
 8004612:	2300      	movs	r3, #0
  }
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <_ZN9EmbSysLib2Hw4Uart3getEv>:

//-------------------------------------------------------------------
BYTE Uart::get( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  BYTE tmp = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]

  if( get(tmp) )    // is there a data byte in the FIFO?
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3310      	adds	r3, #16
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f107 020f 	add.w	r2, r7, #15
 8004634:	4611      	mov	r1, r2
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <_ZN9EmbSysLib2Hw4Uart3getEv+0x28>
  {
    return( tmp );  // yes, we received a data byte
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	e000      	b.n	8004646 <_ZN9EmbSysLib2Hw4Uart3getEv+0x2a>
  }
  else
  {
    return( 0 );    // no data byte received
 8004644:	2300      	movs	r3, #0
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>:
//
// Digital
//
//*******************************************************************
//-------------------------------------------------------------------
Digital::Digital( Port  &port,
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	460b      	mov	r3, r1
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	4613      	mov	r3, r2
 8004664:	71bb      	strb	r3, [r7, #6]
                  BYTE   pinId,
                  Mode   mode,
                  bool   def )
: pin( port, pinId )
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb+0x64>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3308      	adds	r3, #8
 8004670:	79fa      	ldrb	r2, [r7, #7]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fd55 	bl	8004124 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
{
  valueIn    = 0;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	711a      	strb	r2, [r3, #4]
  valueOut   = 0;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	715a      	strb	r2, [r3, #5]
  pinDefault = def;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	7e3a      	ldrb	r2, [r7, #24]
 800468a:	719a      	strb	r2, [r3, #6]

  pin.set( def );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3308      	adds	r3, #8
 8004690:	7e3a      	ldrb	r2, [r7, #24]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fd8d 	bl	80041b4 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>
  pin.setMode( (Port::Mode)mode );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3308      	adds	r3, #8
 800469e:	79ba      	ldrb	r2, [r7, #6]
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fd5e 	bl	8004164 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
}
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	0800b910 	.word	0x0800b910

080046b8 <_ZN9EmbSysLib3Dev7Digital7setModeENS1_4ModeE>:

//-------------------------------------------------------------------
void Digital::setMode( Mode mode )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  pin.setMode( (Port::Mode)mode );
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3308      	adds	r3, #8
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fd49 	bl	8004164 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <_ZN9EmbSysLib3Dev7Digital3setEb>:

//-------------------------------------------------------------------
void Digital::set( bool value )
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	70fb      	strb	r3, [r7, #3]
  valueOut = value;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	715a      	strb	r2, [r3, #5]
  pin.set( value ^ pinDefault );
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f103 0008 	add.w	r0, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	799b      	ldrb	r3, [r3, #6]
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	4619      	mov	r1, r3
 8004704:	f7ff fd56 	bl	80041b4 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <_ZN9EmbSysLib3Dev7Digital3getEv>:

//-------------------------------------------------------------------
bool Digital::get( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  return( pin.get() != pinDefault );
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3308      	adds	r3, #8
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fd80 	bl	8004222 <_ZN9EmbSysLib2Hw4Port3Pin3getEv>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	799b      	ldrb	r3, [r3, #6]
 800472a:	429a      	cmp	r2, r3
 800472c:	bf14      	ite	ne
 800472e:	2301      	movne	r3, #1
 8004730:	2300      	moveq	r3, #0
 8004732:	b2db      	uxtb	r3, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE>:
//
// ScreenGraphic
//
//*******************************************************************
//-------------------------------------------------------------------
ScreenGraphic::ScreenGraphic( DisplayGraphic &display )
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]

: display( display )
 8004746:	4a11      	ldr	r2, [pc, #68]	; (800478c <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE+0x50>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	605a      	str	r2, [r3, #4]

{
  maxStrLength = display.getNumberOfColumns();
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3318      	adds	r3, #24
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4610      	mov	r0, r2
 800475e:	4798      	blx	r3
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	721a      	strb	r2, [r3, #8]
  str = new char[maxStrLength+1];
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	7a1b      	ldrb	r3, [r3, #8]
 800476c:	3301      	adds	r3, #1
 800476e:	4618      	mov	r0, r3
 8004770:	f004 f950 	bl	8008a14 <_Znaj>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]
  clear();
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f807 	bl	8004790 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>
}
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	0800b8cc 	.word	0x0800b8cc

08004790 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>:


//-------------------------------------------------------------------
void ScreenGraphic::clear( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  display.clear();
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4610      	mov	r0, r2
 80047a8:	4798      	blx	r3
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <_ZN9EmbSysLib3Dev13ScreenGraphic7refreshEv>:

//-------------------------------------------------------------------
void ScreenGraphic::refresh( void )
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  display.refresh();
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3304      	adds	r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <_ZN9EmbSysLib3Dev13ScreenGraphic6printfEhhPKcz>:
//-------------------------------------------------------------------
void ScreenGraphic::printf( BYTE        line,
                            BYTE        column,
                            const char *format,
                            ... )
{
 80047d4:	b408      	push	{r3}
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
 80047e2:	4613      	mov	r3, r2
 80047e4:	70bb      	strb	r3, [r7, #2]
  va_list argzeiger;
  va_start( argzeiger, format );
 80047e6:	f107 0320 	add.w	r3, r7, #32
 80047ea:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68d8      	ldr	r0, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7a1b      	ldrb	r3, [r3, #8]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4619      	mov	r1, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	f004 ff6e 	bl	80096dc <vsniprintf>
  va_end  ( argzeiger );

  display.gotoTextPos( line, column );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6858      	ldr	r0, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	78ba      	ldrb	r2, [r7, #2]
 8004810:	78f9      	ldrb	r1, [r7, #3]
 8004812:	4798      	blx	r3
  display.putString( str );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4618      	mov	r0, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3310      	adds	r3, #16
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68d2      	ldr	r2, [r2, #12]
 8004828:	4611      	mov	r1, r2
 800482a:	4798      	blx	r3
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004836:	b001      	add	sp, #4
 8004838:	4770      	bx	lr

0800483a <_ZN9EmbSysLib3Dev13ScreenGraphic7setFontENS_2Hw4FontEh>:

//-------------------------------------------------------------------
void ScreenGraphic::setFont( Font font, BYTE zoom )
{
 800483a:	b590      	push	{r4, r7, lr}
 800483c:	b087      	sub	sp, #28
 800483e:	af02      	add	r7, sp, #8
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	4638      	mov	r0, r7
 8004844:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  display.setFont( font, zoom );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6858      	ldr	r0, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	331c      	adds	r3, #28
 8004854:	681c      	ldr	r4, [r3, #0]
 8004856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	463b      	mov	r3, r7
 800485e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004860:	47a0      	blx	r4
};
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bd90      	pop	{r4, r7, pc}

0800486a <_ZN9EmbSysLib3Dev13ScreenGraphic7setZoomEh>:

//-------------------------------------------------------------------
void ScreenGraphic::setZoom( BYTE zoom )
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	70fb      	strb	r3, [r7, #3]
  display.setZoom( zoom );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3320      	adds	r3, #32
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	78f9      	ldrb	r1, [r7, #3]
 8004886:	4610      	mov	r0, r2
 8004888:	4798      	blx	r3
};
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <_ZN9EmbSysLib3Dev13ScreenGraphic12setBackColorEt>:

//-------------------------------------------------------------------
void ScreenGraphic::setBackColor( WORD color )
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	807b      	strh	r3, [r7, #2]
  display.setBackColor( color );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3324      	adds	r3, #36	; 0x24
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	8879      	ldrh	r1, [r7, #2]
 80048ae:	4610      	mov	r0, r2
 80048b0:	4798      	blx	r3
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <_ZN9EmbSysLib3Dev13ScreenGraphic12setTextColorEt>:

//-------------------------------------------------------------------
void ScreenGraphic::setTextColor( WORD color )
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	807b      	strh	r3, [r7, #2]
  display.setTextColor( color );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	332c      	adds	r3, #44	; 0x2c
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	8879      	ldrh	r1, [r7, #2]
 80048d6:	4610      	mov	r0, r2
 80048d8:	4798      	blx	r3
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawTextEttPKcz>:
//-------------------------------------------------------------------
void ScreenGraphic::drawText( WORD        x,
                              WORD        y,
                              const char *format,
                              ... )
{
 80048e2:	b408      	push	{r3}
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
 80048f0:	4613      	mov	r3, r2
 80048f2:	803b      	strh	r3, [r7, #0]
  va_list argzeiger;
  va_start( argzeiger, format );
 80048f4:	f107 0320 	add.w	r3, r7, #32
 80048f8:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68d8      	ldr	r0, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	7a1b      	ldrb	r3, [r3, #8]
 8004902:	3301      	adds	r3, #1
 8004904:	4619      	mov	r1, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	f004 fee7 	bl	80096dc <vsniprintf>
  va_end  ( argzeiger );

  display.gotoPixelPos( x, y );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6858      	ldr	r0, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3330      	adds	r3, #48	; 0x30
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	883a      	ldrh	r2, [r7, #0]
 800491e:	8879      	ldrh	r1, [r7, #2]
 8004920:	4798      	blx	r3
  display.putString( str );
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3310      	adds	r3, #16
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	4611      	mov	r1, r2
 8004938:	4798      	blx	r3
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004944:	b001      	add	sp, #4
 8004946:	4770      	bx	lr

08004948 <_ZN9EmbSysLib3Dev13ScreenGraphic9drawPixelEttt>:

//-------------------------------------------------------------------
void ScreenGraphic::drawPixel( WORD x, WORD y, WORD color )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	4608      	mov	r0, r1
 8004952:	4611      	mov	r1, r2
 8004954:	461a      	mov	r2, r3
 8004956:	4603      	mov	r3, r0
 8004958:	817b      	strh	r3, [r7, #10]
 800495a:	460b      	mov	r3, r1
 800495c:	813b      	strh	r3, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	80fb      	strh	r3, [r7, #6]
   display.setPaintColor( color );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3328      	adds	r3, #40	; 0x28
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	88f9      	ldrh	r1, [r7, #6]
 8004972:	4610      	mov	r0, r2
 8004974:	4798      	blx	r3
   display.putPixel( x, y );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6858      	ldr	r0, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3334      	adds	r3, #52	; 0x34
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	893a      	ldrh	r2, [r7, #8]
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	4798      	blx	r3
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <_ZN9EmbSysLib3Dev13ScreenGraphic13drawRectangleEttttt>:
void ScreenGraphic::drawRectangle( WORD x,
                                   WORD y,
                                   WORD w,
                                   WORD h,
                                   WORD color )
{
 8004992:	b5b0      	push	{r4, r5, r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af02      	add	r7, sp, #8
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	4608      	mov	r0, r1
 800499c:	4611      	mov	r1, r2
 800499e:	461a      	mov	r2, r3
 80049a0:	4603      	mov	r3, r0
 80049a2:	817b      	strh	r3, [r7, #10]
 80049a4:	460b      	mov	r3, r1
 80049a6:	813b      	strh	r3, [r7, #8]
 80049a8:	4613      	mov	r3, r2
 80049aa:	80fb      	strh	r3, [r7, #6]
   display.setPaintColor( color );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3328      	adds	r3, #40	; 0x28
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80049bc:	4610      	mov	r0, r2
 80049be:	4798      	blx	r3
   display.putRectangle( x, y, w, h );
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6858      	ldr	r0, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3338      	adds	r3, #56	; 0x38
 80049cc:	681c      	ldr	r4, [r3, #0]
 80049ce:	88fd      	ldrh	r5, [r7, #6]
 80049d0:	893a      	ldrh	r2, [r7, #8]
 80049d2:	8979      	ldrh	r1, [r7, #10]
 80049d4:	8c3b      	ldrh	r3, [r7, #32]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	462b      	mov	r3, r5
 80049da:	47a0      	blx	r4
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bdb0      	pop	{r4, r5, r7, pc}

080049e4 <_ZN9EmbSysLib3Dev13ScreenGraphic13drawRectangleEtttttt>:
                                   WORD y,
                                   WORD w,
                                   WORD h,
                                   WORD th,
                                   WORD color )
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	460b      	mov	r3, r1
 80049f8:	813b      	strh	r3, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  th = MIN( th, MIN(h,w) );
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	8c3b      	ldrh	r3, [r7, #32]
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 ffe6 	bl	80059d6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 ffdf 	bl	80059d6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	84bb      	strh	r3, [r7, #36]	; 0x24

  // horizontal
  drawRectangle( x, y     , w, th, color );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3324      	adds	r3, #36	; 0x24
 8004a22:	681c      	ldr	r4, [r3, #0]
 8004a24:	88f8      	ldrh	r0, [r7, #6]
 8004a26:	893a      	ldrh	r2, [r7, #8]
 8004a28:	8979      	ldrh	r1, [r7, #10]
 8004a2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4603      	mov	r3, r0
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	47a0      	blx	r4
  drawRectangle( x, y+h-th, w, th, color );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3324      	adds	r3, #36	; 0x24
 8004a3e:	681c      	ldr	r4, [r3, #0]
 8004a40:	893a      	ldrh	r2, [r7, #8]
 8004a42:	8c3b      	ldrh	r3, [r7, #32]
 8004a44:	4413      	add	r3, r2
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	88f8      	ldrh	r0, [r7, #6]
 8004a50:	8979      	ldrh	r1, [r7, #10]
 8004a52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	47a0      	blx	r4

  // vertikal
  drawRectangle( x,      y, th, h, color );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3324      	adds	r3, #36	; 0x24
 8004a66:	681c      	ldr	r4, [r3, #0]
 8004a68:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8004a6a:	893a      	ldrh	r2, [r7, #8]
 8004a6c:	8979      	ldrh	r1, [r7, #10]
 8004a6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	8c3b      	ldrh	r3, [r7, #32]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	4603      	mov	r3, r0
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	47a0      	blx	r4
  drawRectangle( x+w-th, y, th, h, color );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3324      	adds	r3, #36	; 0x24
 8004a82:	681c      	ldr	r4, [r3, #0]
 8004a84:	897a      	ldrh	r2, [r7, #10]
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	4413      	add	r3, r2
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	b299      	uxth	r1, r3
 8004a92:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8004a94:	893a      	ldrh	r2, [r7, #8]
 8004a96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	8c3b      	ldrh	r3, [r7, #32]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	47a0      	blx	r4
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd90      	pop	{r4, r7, pc}

08004aac <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt>:
void ScreenGraphic::drawCircle( WORD x0,
                                WORD y0,
                                WORD r,
                                WORD th,
                                WORD color)
{
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	817b      	strh	r3, [r7, #10]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	813b      	strh	r3, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
  if( th >= r ) // filled circle?
 8004ac6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d30c      	bcc.n	8004ae8 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x3c>
  {
    drawCircle( x0, y0, r, color );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3330      	adds	r3, #48	; 0x30
 8004ad4:	681c      	ldr	r4, [r3, #0]
 8004ad6:	88f8      	ldrh	r0, [r7, #6]
 8004ad8:	893a      	ldrh	r2, [r7, #8]
 8004ada:	8979      	ldrh	r1, [r7, #10]
 8004adc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	47a0      	blx	r4
    return;
 8004ae6:	e130      	b.n	8004d4a <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x29e>
  }

  display.setPaintColor( color );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3328      	adds	r3, #40	; 0x28
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004af8:	4610      	mov	r0, r2
 8004afa:	4798      	blx	r3

  // Inner circle
  short fi  = 1 - (r-th);
 8004afc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3301      	adds	r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	83fb      	strh	r3, [r7, #30]
  short dyi = -2*(r-th);
 8004b0a:	88fa      	ldrh	r2, [r7, #6]
 8004b0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	03d2      	lsls	r2, r2, #15
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	83bb      	strh	r3, [r7, #28]
  short yi  = r-th;
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	837b      	strh	r3, [r7, #26]

  // Outer circle
  short f  = 1 - r;
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	f1c3 0301 	rsb	r3, r3, #1
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	833b      	strh	r3, [r7, #24]
  short dy = -2 * r;
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	461a      	mov	r2, r3
 8004b36:	03d2      	lsls	r2, r2, #15
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	82fb      	strh	r3, [r7, #22]
  short y  = r;
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	82bb      	strh	r3, [r7, #20]

  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004b44:	2300      	movs	r3, #0
 8004b46:	827b      	strh	r3, [r7, #18]
 8004b48:	2302      	movs	r3, #2
 8004b4a:	823b      	strh	r3, [r7, #16]
 8004b4c:	e0f6      	b.n	8004d3c <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x290>
  {
                                                             // Sector:
    display.putRectangle(x0 - x,      y0 - y,      1,  th ); // N->NW
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6858      	ldr	r0, [r3, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3338      	adds	r3, #56	; 0x38
 8004b5a:	681c      	ldr	r4, [r3, #0]
 8004b5c:	8a7b      	ldrh	r3, [r7, #18]
 8004b5e:	897a      	ldrh	r2, [r7, #10]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	b299      	uxth	r1, r3
 8004b64:	8abb      	ldrh	r3, [r7, #20]
 8004b66:	893a      	ldrh	r2, [r7, #8]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2301      	movs	r3, #1
 8004b72:	47a0      	blx	r4
    display.putRectangle(x0 + x,      y0 - y,      1,  th ); // N->NE
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6858      	ldr	r0, [r3, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3338      	adds	r3, #56	; 0x38
 8004b80:	681c      	ldr	r4, [r3, #0]
 8004b82:	8a7a      	ldrh	r2, [r7, #18]
 8004b84:	897b      	ldrh	r3, [r7, #10]
 8004b86:	4413      	add	r3, r2
 8004b88:	b299      	uxth	r1, r3
 8004b8a:	8abb      	ldrh	r3, [r7, #20]
 8004b8c:	893a      	ldrh	r2, [r7, #8]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	2301      	movs	r3, #1
 8004b98:	47a0      	blx	r4
    display.putRectangle(x0 + y-th+1, y0 - x,      th, 1  ); // E->NE
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6858      	ldr	r0, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3338      	adds	r3, #56	; 0x38
 8004ba6:	681c      	ldr	r4, [r3, #0]
 8004ba8:	8aba      	ldrh	r2, [r7, #20]
 8004baa:	897b      	ldrh	r3, [r7, #10]
 8004bac:	4413      	add	r3, r2
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	b299      	uxth	r1, r3
 8004bba:	8a7b      	ldrh	r3, [r7, #18]
 8004bbc:	893a      	ldrh	r2, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bc4:	2501      	movs	r5, #1
 8004bc6:	9500      	str	r5, [sp, #0]
 8004bc8:	47a0      	blx	r4
    display.putRectangle(x0 + y-th+1, y0 + x,      th, 1  ); // E->SE
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6858      	ldr	r0, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3338      	adds	r3, #56	; 0x38
 8004bd6:	681c      	ldr	r4, [r3, #0]
 8004bd8:	8aba      	ldrh	r2, [r7, #20]
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	4413      	add	r3, r2
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	b299      	uxth	r1, r3
 8004bea:	8a7a      	ldrh	r2, [r7, #18]
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	4413      	add	r3, r2
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bf4:	2501      	movs	r5, #1
 8004bf6:	9500      	str	r5, [sp, #0]
 8004bf8:	47a0      	blx	r4
    display.putRectangle(x0 + x,      y0 + y-th+1, 1,  th ); // S->SE
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6858      	ldr	r0, [r3, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3338      	adds	r3, #56	; 0x38
 8004c06:	681c      	ldr	r4, [r3, #0]
 8004c08:	8a7a      	ldrh	r2, [r7, #18]
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	b299      	uxth	r1, r3
 8004c10:	8aba      	ldrh	r2, [r7, #20]
 8004c12:	893b      	ldrh	r3, [r7, #8]
 8004c14:	4413      	add	r3, r2
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2301      	movs	r3, #1
 8004c28:	47a0      	blx	r4
    display.putRectangle(x0 - x,      y0 + y-th+1, 1,  th ); // S->SW
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6858      	ldr	r0, [r3, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3338      	adds	r3, #56	; 0x38
 8004c36:	681c      	ldr	r4, [r3, #0]
 8004c38:	8a7b      	ldrh	r3, [r7, #18]
 8004c3a:	897a      	ldrh	r2, [r7, #10]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	b299      	uxth	r1, r3
 8004c40:	8aba      	ldrh	r2, [r7, #20]
 8004c42:	893b      	ldrh	r3, [r7, #8]
 8004c44:	4413      	add	r3, r2
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2301      	movs	r3, #1
 8004c58:	47a0      	blx	r4
    display.putRectangle(x0 - y,      y0 + x,      th, 1  ); // W->SW
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6858      	ldr	r0, [r3, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3338      	adds	r3, #56	; 0x38
 8004c66:	681c      	ldr	r4, [r3, #0]
 8004c68:	8abb      	ldrh	r3, [r7, #20]
 8004c6a:	897a      	ldrh	r2, [r7, #10]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	b299      	uxth	r1, r3
 8004c70:	8a7a      	ldrh	r2, [r7, #18]
 8004c72:	893b      	ldrh	r3, [r7, #8]
 8004c74:	4413      	add	r3, r2
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c7a:	2501      	movs	r5, #1
 8004c7c:	9500      	str	r5, [sp, #0]
 8004c7e:	47a0      	blx	r4
    display.putRectangle(x0 - y,      y0 - x,      th, 1  ); // W->NW
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6858      	ldr	r0, [r3, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3338      	adds	r3, #56	; 0x38
 8004c8c:	681c      	ldr	r4, [r3, #0]
 8004c8e:	8abb      	ldrh	r3, [r7, #20]
 8004c90:	897a      	ldrh	r2, [r7, #10]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	b299      	uxth	r1, r3
 8004c96:	8a7b      	ldrh	r3, [r7, #18]
 8004c98:	893a      	ldrh	r2, [r7, #8]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ca0:	2501      	movs	r5, #1
 8004ca2:	9500      	str	r5, [sp, #0]
 8004ca4:	47a0      	blx	r4

    // Inner circle
    if (fi >= 0)
 8004ca6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	db0c      	blt.n	8004cc8 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x21c>
    {
      yi  -= 1;
 8004cae:	8b7b      	ldrh	r3, [r7, #26]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	837b      	strh	r3, [r7, #26]
      dyi += 2;
 8004cb6:	8bbb      	ldrh	r3, [r7, #28]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	83bb      	strh	r3, [r7, #28]
      fi  += dyi;
 8004cbe:	8bfa      	ldrh	r2, [r7, #30]
 8004cc0:	8bbb      	ldrh	r3, [r7, #28]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	83fb      	strh	r3, [r7, #30]
    }
    fi += dx + 1;
 8004cc8:	8a3a      	ldrh	r2, [r7, #16]
 8004cca:	8bfb      	ldrh	r3, [r7, #30]
 8004ccc:	4413      	add	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	83fb      	strh	r3, [r7, #30]

    // Outer circle
    if (f >= 0)
 8004cd6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	db0c      	blt.n	8004cf8 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x24c>
    {
      y  -= 1;
 8004cde:	8abb      	ldrh	r3, [r7, #20]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	82bb      	strh	r3, [r7, #20]
      dy += 2;
 8004ce6:	8afb      	ldrh	r3, [r7, #22]
 8004ce8:	3302      	adds	r3, #2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	82fb      	strh	r3, [r7, #22]
      f  += dy;
 8004cee:	8b3a      	ldrh	r2, [r7, #24]
 8004cf0:	8afb      	ldrh	r3, [r7, #22]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	833b      	strh	r3, [r7, #24]
    }
    f += dx + 1;
 8004cf8:	8a3a      	ldrh	r2, [r7, #16]
 8004cfa:	8b3b      	ldrh	r3, [r7, #24]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	833b      	strh	r3, [r7, #24]

    // length of line from inner to outer circle
    if( yi<x)
 8004d06:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004d0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	da06      	bge.n	8004d20 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x274>
      th = y - x + 1;
 8004d12:	8aba      	ldrh	r2, [r7, #20]
 8004d14:	8a7b      	ldrh	r3, [r7, #18]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	863b      	strh	r3, [r7, #48]	; 0x30
 8004d1e:	e003      	b.n	8004d28 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x27c>
    else
      th = y - yi;
 8004d20:	8aba      	ldrh	r2, [r7, #20]
 8004d22:	8b7b      	ldrh	r3, [r7, #26]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	863b      	strh	r3, [r7, #48]	; 0x30
  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004d28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	827b      	strh	r3, [r7, #18]
 8004d34:	8a3b      	ldrh	r3, [r7, #16]
 8004d36:	3302      	adds	r3, #2
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	823b      	strh	r3, [r7, #16]
 8004d3c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004d40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	f77f af02 	ble.w	8004b4e <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0xa2>
    }
}
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bdb0      	pop	{r4, r5, r7, pc}

08004d50 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt>:
//
void ScreenGraphic::drawCircle( WORD x0,
                                WORD y0,
                                WORD r,
                                WORD color )
{
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b08b      	sub	sp, #44	; 0x2c
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	817b      	strh	r3, [r7, #10]
 8004d62:	460b      	mov	r3, r1
 8004d64:	813b      	strh	r3, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  short f  = 1 - r;
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	f1c3 0301 	rsb	r3, r3, #1
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	83fb      	strh	r3, [r7, #30]
  short dy = -2 * r;
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	461a      	mov	r2, r3
 8004d78:	03d2      	lsls	r2, r2, #15
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	83bb      	strh	r3, [r7, #28]
  short y  = r;
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	837b      	strh	r3, [r7, #26]

  display.setPaintColor( color );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3328      	adds	r3, #40	; 0x28
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004d96:	4610      	mov	r0, r2
 8004d98:	4798      	blx	r3

  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	833b      	strh	r3, [r7, #24]
 8004d9e:	2302      	movs	r3, #2
 8004da0:	82fb      	strh	r3, [r7, #22]
 8004da2:	e075      	b.n	8004e90 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x140>
  {
    display.putRectangle ( x0+x, y0-y, 1, y+y );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6858      	ldr	r0, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3338      	adds	r3, #56	; 0x38
 8004db0:	681c      	ldr	r4, [r3, #0]
 8004db2:	8b3a      	ldrh	r2, [r7, #24]
 8004db4:	897b      	ldrh	r3, [r7, #10]
 8004db6:	4413      	add	r3, r2
 8004db8:	b299      	uxth	r1, r3
 8004dba:	8b7b      	ldrh	r3, [r7, #26]
 8004dbc:	893a      	ldrh	r2, [r7, #8]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	8b7b      	ldrh	r3, [r7, #26]
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	47a0      	blx	r4
    display.putRectangle ( x0-x, y0-y, 1, y+y );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6858      	ldr	r0, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3338      	adds	r3, #56	; 0x38
 8004dda:	681c      	ldr	r4, [r3, #0]
 8004ddc:	8b3b      	ldrh	r3, [r7, #24]
 8004dde:	897a      	ldrh	r2, [r7, #10]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	b299      	uxth	r1, r3
 8004de4:	8b7b      	ldrh	r3, [r7, #26]
 8004de6:	893a      	ldrh	r2, [r7, #8]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	8b7b      	ldrh	r3, [r7, #26]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	2301      	movs	r3, #1
 8004df6:	47a0      	blx	r4
    display.putRectangle ( x0+y, y0-x, 1, x+x );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6858      	ldr	r0, [r3, #4]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3338      	adds	r3, #56	; 0x38
 8004e04:	681c      	ldr	r4, [r3, #0]
 8004e06:	8b7a      	ldrh	r2, [r7, #26]
 8004e08:	897b      	ldrh	r3, [r7, #10]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	b299      	uxth	r1, r3
 8004e0e:	8b3b      	ldrh	r3, [r7, #24]
 8004e10:	893a      	ldrh	r2, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	8b3b      	ldrh	r3, [r7, #24]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	47a0      	blx	r4
    display.putRectangle ( x0-y, y0-x, 1, x+x );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6858      	ldr	r0, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3338      	adds	r3, #56	; 0x38
 8004e2e:	681c      	ldr	r4, [r3, #0]
 8004e30:	8b7b      	ldrh	r3, [r7, #26]
 8004e32:	897a      	ldrh	r2, [r7, #10]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	b299      	uxth	r1, r3
 8004e38:	8b3b      	ldrh	r3, [r7, #24]
 8004e3a:	893a      	ldrh	r2, [r7, #8]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	8b3b      	ldrh	r3, [r7, #24]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2301      	movs	r3, #1
 8004e4a:	47a0      	blx	r4

    if (f >= 0)
 8004e4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	db0c      	blt.n	8004e6e <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x11e>
    {
      y  -= 1;
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	837b      	strh	r3, [r7, #26]
      dy += 2;
 8004e5c:	8bbb      	ldrh	r3, [r7, #28]
 8004e5e:	3302      	adds	r3, #2
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	83bb      	strh	r3, [r7, #28]
      f  += dy;
 8004e64:	8bfa      	ldrh	r2, [r7, #30]
 8004e66:	8bbb      	ldrh	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	83fb      	strh	r3, [r7, #30]
    }
    f += dx + 1;
 8004e6e:	8afa      	ldrh	r2, [r7, #22]
 8004e70:	8bfb      	ldrh	r3, [r7, #30]
 8004e72:	4413      	add	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3301      	adds	r3, #1
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	83fb      	strh	r3, [r7, #30]
  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004e7c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3301      	adds	r3, #1
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	833b      	strh	r3, [r7, #24]
 8004e88:	8afb      	ldrh	r3, [r7, #22]
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	82fb      	strh	r3, [r7, #22]
 8004e90:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004e94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	dd83      	ble.n	8004da4 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x54>
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	3724      	adds	r7, #36	; 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}

08004ea6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>:
                              WORD y0,
                              WORD x1,
                              WORD y1,
                              WORD th,
                              WORD color )
{
 8004ea6:	b5b0      	push	{r4, r5, r7, lr}
 8004ea8:	b08e      	sub	sp, #56	; 0x38
 8004eaa:	af02      	add	r7, sp, #8
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	4608      	mov	r0, r1
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	817b      	strh	r3, [r7, #10]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	813b      	strh	r3, [r7, #8]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  long t;
  int  x;
  int  y;
  int  dx = (int)x1-x0;
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	897b      	ldrh	r3, [r7, #10]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	623b      	str	r3, [r7, #32]
  int  dy = (int)y1-y0;
 8004ec8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004ecc:	893b      	ldrh	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	61fb      	str	r3, [r7, #28]

  if( dy == 0 ) // horizontal
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d12e      	bne.n	8004f36 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x90>
  {
    x0 = (x0 < x1) ? x0 : x1;
 8004ed8:	897a      	ldrh	r2, [r7, #10]
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d201      	bcs.n	8004ee4 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x3e>
 8004ee0:	897b      	ldrh	r3, [r7, #10]
 8004ee2:	e000      	b.n	8004ee6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x40>
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	817b      	strh	r3, [r7, #10]
    y0 = (y0 < y1) ? y0 : y1;
 8004ee8:	893a      	ldrh	r2, [r7, #8]
 8004eea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d201      	bcs.n	8004ef6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x50>
 8004ef2:	893b      	ldrh	r3, [r7, #8]
 8004ef4:	e001      	b.n	8004efa <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x54>
 8004ef6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004efa:	813b      	strh	r3, [r7, #8]
    drawRectangle( x0, y0-th/2, abs(dx)+1, th, color );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3324      	adds	r3, #36	; 0x24
 8004f02:	681c      	ldr	r4, [r3, #0]
 8004f04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	893a      	ldrh	r2, [r7, #8]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bfb8      	it	lt
 8004f18:	425b      	neglt	r3, r3
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	b298      	uxth	r0, r3
 8004f20:	8979      	ldrh	r1, [r7, #10]
 8004f22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4603      	mov	r3, r0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	47a0      	blx	r4
      {
        drawPixel( x, y+i, color );
      }
    }
  }
}
 8004f34:	e0c4      	b.n	80050c0 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
  else if( dx == 0 ) // vertikal
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d12f      	bne.n	8004f9c <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xf6>
    x0 = (x0 < x1) ? x0 : x1;
 8004f3c:	897a      	ldrh	r2, [r7, #10]
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d201      	bcs.n	8004f48 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xa2>
 8004f44:	897b      	ldrh	r3, [r7, #10]
 8004f46:	e000      	b.n	8004f4a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xa4>
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	817b      	strh	r3, [r7, #10]
    y0 = (y0 < y1) ? y0 : y1;
 8004f4c:	893a      	ldrh	r2, [r7, #8]
 8004f4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d201      	bcs.n	8004f5a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xb4>
 8004f56:	893b      	ldrh	r3, [r7, #8]
 8004f58:	e001      	b.n	8004f5e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xb8>
 8004f5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f5e:	813b      	strh	r3, [r7, #8]
    drawRectangle(x0-th/2, y0, th, abs(dy)+1, color );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3324      	adds	r3, #36	; 0x24
 8004f66:	681c      	ldr	r4, [r3, #0]
 8004f68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	897a      	ldrh	r2, [r7, #10]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	b299      	uxth	r1, r3
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bfb8      	it	lt
 8004f7c:	425b      	neglt	r3, r3
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3301      	adds	r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 8004f88:	8938      	ldrh	r0, [r7, #8]
 8004f8a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004f8e:	9201      	str	r2, [sp, #4]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	462b      	mov	r3, r5
 8004f94:	4602      	mov	r2, r0
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	47a0      	blx	r4
}
 8004f9a:	e091      	b.n	80050c0 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
  else if( abs(dx) <= abs(dy) )
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004fa2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bfb8      	it	lt
 8004fac:	425b      	neglt	r3, r3
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	dc43      	bgt.n	800503a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x194>
    for( t = abs(dy); t >= 0; t-- )  // t = 1 downto 0
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bfb8      	it	lt
 8004fb8:	425b      	neglt	r3, r3
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fbc:	e039      	b.n	8005032 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x18c>
      x = x0 + t*dx/abs(dy)-th/2;    // x = x0+dx downto x0
 8004fbe:	897a      	ldrh	r2, [r7, #10]
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	6a39      	ldr	r1, [r7, #32]
 8004fc4:	fb03 f101 	mul.w	r1, r3, r1
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bfb8      	it	lt
 8004fce:	425b      	neglt	r3, r3
 8004fd0:	fb91 f3f3 	sdiv	r3, r1, r3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8004fda:	0852      	lsrs	r2, r2, #1
 8004fdc:	b292      	uxth	r2, r2
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
      y = y0 + ( (dy>0) ? +t : -t ); // y = y0+dy downto y0
 8004fe2:	893a      	ldrh	r2, [r7, #8]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dc02      	bgt.n	8004ff0 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x14a>
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	425b      	negs	r3, r3
 8004fee:	e000      	b.n	8004ff2 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x14c>
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	4413      	add	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]
      for( int i = th-1; i >= 0; i-- )
 8004ff6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffe:	e012      	b.n	8005026 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x180>
        drawPixel( x+i, y, color );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3320      	adds	r3, #32
 8005006:	681c      	ldr	r4, [r3, #0]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	b29a      	uxth	r2, r3
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	b29b      	uxth	r3, r3
 8005010:	4413      	add	r3, r2
 8005012:	b299      	uxth	r1, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	b29a      	uxth	r2, r3
 8005018:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	47a0      	blx	r4
      for( int i = th-1; i >= 0; i-- )
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	dae9      	bge.n	8005000 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x15a>
    for( t = abs(dy); t >= 0; t-- )  // t = 1 downto 0
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	3b01      	subs	r3, #1
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	dac2      	bge.n	8004fbe <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x118>
}
 8005038:	e042      	b.n	80050c0 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
    for( t = abs(dx); t >= 0; t-- )  // t = 1 downto 0
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	2b00      	cmp	r3, #0
 800503e:	bfb8      	it	lt
 8005040:	425b      	neglt	r3, r3
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005044:	e039      	b.n	80050ba <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x214>
      x = x0 + ( (dx>0) ? +t : -t ); // x = x0+dx downto x0
 8005046:	897a      	ldrh	r2, [r7, #10]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	dc02      	bgt.n	8005054 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1ae>
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	425b      	negs	r3, r3
 8005052:	e000      	b.n	8005056 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1b0>
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	4413      	add	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
      y = y0 + t*dy/abs(dx)-th/2;    // y = y0+dy downto y0
 800505a:	893a      	ldrh	r2, [r7, #8]
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	69f9      	ldr	r1, [r7, #28]
 8005060:	fb03 f101 	mul.w	r1, r3, r1
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2b00      	cmp	r3, #0
 8005068:	bfb8      	it	lt
 800506a:	425b      	neglt	r3, r3
 800506c:	fb91 f3f3 	sdiv	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	b292      	uxth	r2, r2
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	617b      	str	r3, [r7, #20]
      for( int i = th-1; i >= 0; i-- )
 800507e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005082:	3b01      	subs	r3, #1
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
 8005086:	e012      	b.n	80050ae <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x208>
        drawPixel( x, y+i, color );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3320      	adds	r3, #32
 800508e:	681c      	ldr	r4, [r3, #0]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	b299      	uxth	r1, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	b29a      	uxth	r2, r3
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	b29b      	uxth	r3, r3
 800509c:	4413      	add	r3, r2
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	47a0      	blx	r4
      for( int i = th-1; i >= 0; i-- )
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	3b01      	subs	r3, #1
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	dae9      	bge.n	8005088 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1e2>
    for( t = abs(dx); t >= 0; t-- )  // t = 1 downto 0
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	3b01      	subs	r3, #1
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dac2      	bge.n	8005046 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1a0>
}
 80050c0:	bf00      	nop
 80050c2:	3730      	adds	r7, #48	; 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bdb0      	pop	{r4, r5, r7, pc}

080050c8 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawBitmapEttRNS_2Hw6BitmapE>:

//-------------------------------------------------------------------
void ScreenGraphic::drawBitmap( WORD    x,
                                WORD    y,
                                Bitmap &bitmap )
{
 80050c8:	b5b0      	push	{r4, r5, r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	817b      	strh	r3, [r7, #10]
 80050d6:	4613      	mov	r3, r2
 80050d8:	813b      	strh	r3, [r7, #8]
  display.putBitmap( x, y, bitmap );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6858      	ldr	r0, [r3, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	333c      	adds	r3, #60	; 0x3c
 80050e6:	681c      	ldr	r4, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	893d      	ldrh	r5, [r7, #8]
 80050ec:	8979      	ldrh	r1, [r7, #10]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	9200      	str	r2, [sp, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	462a      	mov	r2, r5
 80050f6:	47a0      	blx	r4
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bdb0      	pop	{r4, r5, r7, pc}

08005100 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE>:
//
// Pointer
//
//*******************************************************************
//-------------------------------------------------------------------
Pointer::Pointer( Touch &touchIn )
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]

: touch( touchIn )
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE+0x3c>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	605a      	str	r2, [r3, #4]

{
  data.flags = Data::NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	751a      	strb	r2, [r3, #20]
  data.posX  = 0;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	819a      	strh	r2, [r3, #12]
  data.posY  = 0;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	81da      	strh	r2, [r3, #14]
  data.delta = 0;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]
}
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	0800b8c0 	.word	0x0800b8c0

08005140 <_ZN9EmbSysLib3Dev7Pointer3getEv>:

//-------------------------------------------------------------------
Pointer::Data Pointer::get( void )
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  touch.update();
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4610      	mov	r0, r2
 8005158:	4798      	blx	r3

  int x = RANGE( (short)touch.getPosX(), (short)0, (short)0x7FFF );
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3304      	adds	r3, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
 800516c:	4603      	mov	r3, r0
 800516e:	b21b      	sxth	r3, r3
 8005170:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fd8a 	bl	8005c90 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>
 800517c:	4603      	mov	r3, r0
 800517e:	61fb      	str	r3, [r7, #28]
  int y = RANGE( (short)touch.getPosY(), (short)0, (short)0x7FFF );
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4610      	mov	r0, r2
 8005190:	4798      	blx	r3
 8005192:	4603      	mov	r3, r0
 8005194:	b21b      	sxth	r3, r3
 8005196:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fd77 	bl	8005c90 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>
 80051a2:	4603      	mov	r3, r0
 80051a4:	61bb      	str	r3, [r7, #24]
  BYTE isTouched = touch.isTouched();
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4610      	mov	r0, r2
 80051b6:	4798      	blx	r3
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]

  if( isTouched && !isTouchedPrev )
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xb4>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	7a1b      	ldrb	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d114      	bne.n	80051f4 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xb4>
  {
    data.flags = Data::CTRL_DWN;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2210      	movs	r2, #16
 80051ce:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	611a      	str	r2, [r3, #16]
    posXprev   = x;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	619a      	str	r2, [r3, #24]
    posYprev   = y;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	61da      	str	r2, [r3, #28]
 80051f2:	e078      	b.n	80052e6 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
  else if( !isTouched  && isTouchedPrev )
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d112      	bne.n	8005220 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xe0>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	7a1b      	ldrb	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00e      	beq.n	8005220 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xe0>
  {
    data.flags = Data::CTRL_UP;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2220      	movs	r2, #32
 8005206:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	b29a      	uxth	r2, r3
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	b29a      	uxth	r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2200      	movs	r2, #0
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	e062      	b.n	80052e6 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
  else if( isTouched  && isTouchedPrev )
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d057      	beq.n	80052d6 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x196>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	7a1b      	ldrb	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d053      	beq.n	80052d6 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x196>
  {
    data.flags = Data::PRESSED;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2201      	movs	r2, #1
 8005232:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	b29a      	uxth	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	b29a      	uxth	r2, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]

    if( x != posXprev || y != posYprev )
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	429a      	cmp	r2, r3
 8005252:	d104      	bne.n	800525e <_ZN9EmbSysLib3Dev7Pointer3getEv+0x11e>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	429a      	cmp	r2, r3
 800525c:	d042      	beq.n	80052e4 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
    {
      if( abs(posXprev-x) > 15 || abs(posYprev-y) > 15 )
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfb8      	it	lt
 800526a:	425b      	neglt	r3, r3
 800526c:	2b0f      	cmp	r3, #15
 800526e:	dc08      	bgt.n	8005282 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x142>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	bfb8      	it	lt
 800527c:	425b      	neglt	r3, r3
 800527e:	2b0f      	cmp	r3, #15
 8005280:	dd30      	ble.n	80052e4 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
      {
        int deltaX = x-posXprev;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	613b      	str	r3, [r7, #16]
        int deltaY = y-posYprev;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	60fb      	str	r3, [r7, #12]
        if( abs(deltaX) > abs(deltaY) )
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800529c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bfb8      	it	lt
 80052a6:	425b      	neglt	r3, r3
 80052a8:	429a      	cmp	r2, r3
 80052aa:	dd06      	ble.n	80052ba <_ZN9EmbSysLib3Dev7Pointer3getEv+0x17a>
        {
          data.flags = Data::MOVE_X;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2203      	movs	r2, #3
 80052b0:	751a      	strb	r2, [r3, #20]
          data.delta = deltaX;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	611a      	str	r2, [r3, #16]
 80052b8:	e006      	b.n	80052c8 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x188>
        }
        else
        {
          data.flags = Data::MOVE_Y;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2205      	movs	r2, #5
 80052be:	751a      	strb	r2, [r3, #20]
          data.delta = -deltaY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	425a      	negs	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	611a      	str	r2, [r3, #16]
        }
        posXprev = x;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	619a      	str	r2, [r3, #24]
        posYprev = y;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	61da      	str	r2, [r3, #28]
      }
    }
  }
 80052d4:	e006      	b.n	80052e4 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
  else
  {
    data.flags = Data::NONE;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2200      	movs	r2, #0
 80052da:	751a      	strb	r2, [r3, #20]
    data.delta = 0;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
 80052e2:	e000      	b.n	80052e6 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
 80052e4:	bf00      	nop
  }
  isTouchedPrev = isTouched ;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	7dfa      	ldrb	r2, [r7, #23]
 80052ea:	721a      	strb	r2, [r3, #8]
  return( data );
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	4614      	mov	r4, r2
 80052f2:	330c      	adds	r3, #12
 80052f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	3724      	adds	r7, #36	; 0x24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd90      	pop	{r4, r7, pc}

08005304 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>:
//
// Terminal
//
//*******************************************************************
//-------------------------------------------------------------------
Terminal::Terminal( Uart       &uart,
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4611      	mov	r1, r2
 8005310:	461a      	mov	r2, r3
 8005312:	460b      	mov	r3, r1
 8005314:	80fb      	strh	r3, [r7, #6]
 8005316:	4613      	mov	r3, r2
 8005318:	80bb      	strh	r3, [r7, #4]
                    WORD        inBufSize,
                    WORD        outBufSize,
                    const char *key,
                    const char *eos )
: uart( uart )
 800531a:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_+0x90>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	605a      	str	r2, [r3, #4]

{
  this->inBufSize  = inBufSize;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	811a      	strh	r2, [r3, #8]
  this->outBufSize = outBufSize;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88ba      	ldrh	r2, [r7, #4]
 8005330:	815a      	strh	r2, [r3, #10]
  this->key        = key;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	60da      	str	r2, [r3, #12]
  this->eos        = eos;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	611a      	str	r2, [r3, #16]
  strIn            = new char[ inBufSize  + 1 ];
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	3301      	adds	r3, #1
 8005342:	4618      	mov	r0, r3
 8005344:	f003 fb66 	bl	8008a14 <_Znaj>
 8005348:	4603      	mov	r3, r0
 800534a:	461a      	mov	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	615a      	str	r2, [r3, #20]
  strOut           = new char[ outBufSize + 1 ];
 8005350:	88bb      	ldrh	r3, [r7, #4]
 8005352:	3301      	adds	r3, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f003 fb5d 	bl	8008a14 <_Znaj>
 800535a:	4603      	mov	r3, r0
 800535c:	461a      	mov	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	619a      	str	r2, [r3, #24]
  idx              = 0;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
  escape           = 0;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	775a      	strb	r2, [r3, #29]
  last             = 0;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	779a      	strb	r2, [r3, #30]
  pending          = 0;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	849a      	strh	r2, [r3, #36]	; 0x24
  ctrl             = 0;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	841a      	strh	r2, [r3, #32]
  num              = 0;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	0800b8a8 	.word	0x0800b8a8

08005398 <_ZN9EmbSysLib3Dev8Terminal6printfEPKcz>:
  return( 0 );
}

//-------------------------------------------------------------------
void Terminal::printf( const char *format, ... )
{
 8005398:	b40e      	push	{r1, r2, r3}
 800539a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  va_list argzeiger;

  va_start ( argzeiger, format );
 80053a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a6:	60fb      	str	r3, [r7, #12]
  vsnprintf( strOut, outBufSize, format, argzeiger );
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6998      	ldr	r0, [r3, #24]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	895b      	ldrh	r3, [r3, #10]
 80053b0:	4619      	mov	r1, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	f004 f991 	bl	80096dc <vsniprintf>
  va_end   ( argzeiger );

  // Set output
  uart.set( (BYTE*)strOut, strlen(strOut) );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685d      	ldr	r5, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3304      	adds	r3, #4
 80053c6:	681c      	ldr	r4, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699e      	ldr	r6, [r3, #24]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fa ffad 	bl	8000330 <strlen>
 80053d6:	4603      	mov	r3, r0
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	47a0      	blx	r4
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80053ec:	b003      	add	sp, #12
 80053ee:	4770      	bx	lr

080053f0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>:
    //*******************************************************************
    /*!
    \class Task
    \brief Base class for a Task
    */
    class Task : public Timer::Task
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe f8b6 	bl	800356c <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 8005400:	4a03      	ldr	r2, [pc, #12]	; (8005410 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev+0x20>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	0800b8b4 	.word	0x0800b8b4

08005414 <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt>:
//
// DigitalButton
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalButton::DigitalButton( Digital     &digital,
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	807b      	strh	r3, [r7, #2]
                              TaskManager &taskManager,
                              WORD         timeDebounce,
                              WORD         timeLong )
: digital     ( digital )
, timeDebounce( (DWORD)timeDebounce*1000/taskManager.getCycleTime() )
, timeLong    ( (DWORD)timeLong    *1000/taskManager.getCycleTime() )
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff ffe3 	bl	80053f0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 800542a:	4a20      	ldr	r2, [pc, #128]	; (80054ac <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt+0x98>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	601a      	str	r2, [r3, #0]
: digital     ( digital )
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	609a      	str	r2, [r3, #8]
, timeDebounce( (DWORD)timeDebounce*1000/taskManager.getCycleTime() )
 8005436:	887b      	ldrh	r3, [r7, #2]
 8005438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800543c:	fb02 f403 	mul.w	r4, r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3304      	adds	r3, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
 800544c:	4603      	mov	r3, r0
 800544e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	819a      	strh	r2, [r3, #12]
, timeLong    ( (DWORD)timeLong    *1000/taskManager.getCycleTime() )
 8005458:	8c3b      	ldrh	r3, [r7, #32]
 800545a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800545e:	fb02 f403 	mul.w	r4, r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3304      	adds	r3, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
 800546e:	4603      	mov	r3, r0
 8005470:	fbb4 f3f3 	udiv	r3, r4, r3
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	81da      	strh	r2, [r3, #14]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3316      	adds	r3, #22
 800547e:	2100      	movs	r1, #0
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fc28 	bl	8005cd6 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEC1ES4_>
{
  timeOut = 0;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	821a      	strh	r2, [r3, #16]
  time    = 0;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	825a      	strh	r2, [r3, #18]
  taskManager.add(this);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4611      	mov	r1, r2
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
}
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd90      	pop	{r4, r7, pc}
 80054aa:	bf00      	nop
 80054ac:	0800b89c 	.word	0x0800b89c

080054b0 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv>:

//-------------------------------------------------------------------
void DigitalButton::update( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  // debounce: get new value after timeOut only
  if( timeOut == 0 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	8a1b      	ldrh	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d117      	bne.n	80054f0 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x40>
  {
    bool in = digital.get();
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3314      	adds	r3, #20
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4610      	mov	r0, r2
 80054d0:	4798      	blx	r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	73fb      	strb	r3, [r7, #15]
    if( in != value )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	7d1b      	ldrb	r3, [r3, #20]
 80054da:	7bfa      	ldrb	r2, [r7, #15]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d00d      	beq.n	80054fc <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x4c>
    {
      value   = in;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	751a      	strb	r2, [r3, #20]
      timeOut = timeDebounce;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	899a      	ldrh	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	821a      	strh	r2, [r3, #16]
 80054ee:	e005      	b.n	80054fc <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x4c>
    }
  }
  else
  {
    timeOut--;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8a1b      	ldrh	r3, [r3, #16]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	821a      	strh	r2, [r3, #16]
  }

  // Edge detection
  if( value != valuePre )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	7d1a      	ldrb	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	7d5b      	ldrb	r3, [r3, #21]
 8005504:	429a      	cmp	r2, r3
 8005506:	d025      	beq.n	8005554 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xa4>
  {
    if( value ) // rising edge
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7d1b      	ldrb	r3, [r3, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x7c>
    {
      time = 0;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	825a      	strh	r2, [r3, #18]
      action = ACTIVATED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3316      	adds	r3, #22
 800551a:	2201      	movs	r2, #1
 800551c:	733a      	strb	r2, [r7, #12]
 800551e:	f107 020c 	add.w	r2, r7, #12
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fbe9 	bl	8005cfc <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
 800552a:	e00f      	b.n	800554c <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x9c>
    }
    else // falling edge
    {
      if( time < timeLong )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8a5a      	ldrh	r2, [r3, #18]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	89db      	ldrh	r3, [r3, #14]
 8005534:	429a      	cmp	r2, r3
 8005536:	d209      	bcs.n	800554c <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x9c>
      {
        action = SHORT;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3316      	adds	r3, #22
 800553c:	2202      	movs	r2, #2
 800553e:	737a      	strb	r2, [r7, #13]
 8005540:	f107 020d 	add.w	r2, r7, #13
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fbd8 	bl	8005cfc <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
      }
    }
    valuePre = value;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	7d1a      	ldrb	r2, [r3, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	755a      	strb	r2, [r3, #21]
  }

  // time measurement
  if( value )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	7d1b      	ldrb	r3, [r3, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
  {
    if( time < timeLong )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8a5a      	ldrh	r2, [r3, #18]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	89db      	ldrh	r3, [r3, #14]
 8005564:	429a      	cmp	r2, r3
 8005566:	d215      	bcs.n	8005594 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
    {
      time++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8a5b      	ldrh	r3, [r3, #18]
 800556c:	3301      	adds	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	825a      	strh	r2, [r3, #18]
      if( time == timeLong )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8a5a      	ldrh	r2, [r3, #18]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	89db      	ldrh	r3, [r3, #14]
 800557c:	429a      	cmp	r2, r3
 800557e:	d109      	bne.n	8005594 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
      {
        action = LONG;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3316      	adds	r3, #22
 8005584:	2203      	movs	r2, #3
 8005586:	73ba      	strb	r2, [r7, #14]
 8005588:	f107 020e 	add.w	r2, r7, #14
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fbb4 	bl	8005cfc <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
      }
    }
  }
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE>:
//
// DigitalEncoder
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalEncoder::DigitalEncoder( Digital *btnCtrlIn,
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
                          TaskManager    &taskManager )

: btnCtrl( btnCtrlIn )
, fifo   ( 20 )
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ff20 	bl	80053f0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 80055b0:	4a0b      	ldr	r2, [pc, #44]	; (80055e0 <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE+0x44>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	601a      	str	r2, [r3, #0]
: btnCtrl( btnCtrlIn )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]
, fifo   ( 20 )
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	330c      	adds	r3, #12
 80055c0:	2114      	movs	r1, #20
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fba9 	bl	8005d1a <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et>

{
  taskManager.add(this);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4611      	mov	r1, r2
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
}
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	0800b888 	.word	0x0800b888

080055e4 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv>:
  }
}

//-------------------------------------------------------------------
void DigitalEncoder::update( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  if( !fifo.isFull() )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	330c      	adds	r3, #12
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fbbd 	bl	8005d70 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f083 0301 	eor.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d021      	beq.n	8005646 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
  {
    switch( getIncrement() )
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
 800560e:	4603      	mov	r3, r0
 8005610:	2b01      	cmp	r3, #1
 8005612:	d002      	beq.n	800561a <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x36>
 8005614:	2b02      	cmp	r3, #2
 8005616:	d00b      	beq.n	8005630 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x4c>
    {
      case LEFT:  fifo << LEFT;    break;
      case RIGHT: fifo << RIGHT;   break;
      default:                     break;
 8005618:	e015      	b.n	8005646 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
      case LEFT:  fifo << LEFT;    break;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	330c      	adds	r3, #12
 800561e:	2201      	movs	r2, #1
 8005620:	733a      	strb	r2, [r7, #12]
 8005622:	f107 020c 	add.w	r2, r7, #12
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fbb7 	bl	8005d9c <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 800562e:	e00a      	b.n	8005646 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
      case RIGHT: fifo << RIGHT;   break;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	330c      	adds	r3, #12
 8005634:	2202      	movs	r2, #2
 8005636:	737a      	strb	r2, [r7, #13]
 8005638:	f107 020d 	add.w	r2, r7, #13
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fbac 	bl	8005d9c <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 8005644:	bf00      	nop
    }
  }

  if( !fifo.isFull() )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	330c      	adds	r3, #12
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fb90 	bl	8005d70 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>
 8005650:	4603      	mov	r3, r0
 8005652:	f083 0301 	eor.w	r3, r3, #1
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d021      	beq.n	80056a0 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
  {
    switch( getCtrl() )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3304      	adds	r3, #4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
 8005668:	4603      	mov	r3, r0
 800566a:	2b03      	cmp	r3, #3
 800566c:	d002      	beq.n	8005674 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x90>
 800566e:	2b04      	cmp	r3, #4
 8005670:	d00b      	beq.n	800568a <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xa6>
    {
      case CTRL_DWN:  fifo << CTRL_DWN;  break;
      case CTRL_UP:   fifo << CTRL_UP;   break;
      default:                           break;
 8005672:	e015      	b.n	80056a0 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
      case CTRL_DWN:  fifo << CTRL_DWN;  break;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	330c      	adds	r3, #12
 8005678:	2203      	movs	r2, #3
 800567a:	73ba      	strb	r2, [r7, #14]
 800567c:	f107 020e 	add.w	r2, r7, #14
 8005680:	4611      	mov	r1, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb8a 	bl	8005d9c <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 8005688:	e00a      	b.n	80056a0 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
      case CTRL_UP:   fifo << CTRL_UP;   break;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	330c      	adds	r3, #12
 800568e:	2204      	movs	r2, #4
 8005690:	73fa      	strb	r2, [r7, #15]
 8005692:	f107 020f 	add.w	r2, r7, #15
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fb7f 	bl	8005d9c <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 800569e:	bf00      	nop
    }
  }
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoder::getCtrl( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  if( btnCtrl )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x36>
  {
    switch( btnCtrl->getEvent() )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3318      	adds	r3, #24
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4610      	mov	r0, r2
 80056c8:	4798      	blx	r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d002      	beq.n	80056d6 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x2e>
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d002      	beq.n	80056da <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x32>
    {
      case Digital::ACTIVATED: return( CTRL_DWN );
      case Digital::RELEASED:  return( CTRL_UP );
      default:                 break;
 80056d4:	e003      	b.n	80056de <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x36>
      case Digital::ACTIVATED: return( CTRL_DWN );
 80056d6:	2303      	movs	r3, #3
 80056d8:	e002      	b.n	80056e0 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x38>
      case Digital::RELEASED:  return( CTRL_UP );
 80056da:	2304      	movs	r3, #4
 80056dc:	e000      	b.n	80056e0 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x38>
    }
  }
  return( NONE );
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt>:
//
// DigitalEncoderJoystick
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalEncoderJoystick::DigitalEncoderJoystick( Digital     *btnLeft,
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
                                                TaskManager &taskManager,
                                                WORD         repeatTime )
: DigitalEncoder( btnCtrl, taskManager )
, timerStart    ( 1000UL*repeatTime/taskManager.getCycleTime() )
, btnLeft       ( btnLeft )
, btnRight      ( btnRight )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff ff4d 	bl	800559c <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE>
 8005702:	4a11      	ldr	r2, [pc, #68]	; (8005748 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt+0x60>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]
, timerStart    ( 1000UL*repeatTime/taskManager.getCycleTime() )
 8005708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800570a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800570e:	fb02 f403 	mul.w	r4, r2, r3
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3304      	adds	r3, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6a38      	ldr	r0, [r7, #32]
 800571c:	4798      	blx	r3
 800571e:	4603      	mov	r3, r0
 8005720:	fbb4 f3f3 	udiv	r3, r4, r3
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	831a      	strh	r2, [r3, #24]
, btnLeft       ( btnLeft )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	61da      	str	r2, [r3, #28]
, btnRight      ( btnRight )
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]
{
  timerCnt = timerStart;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8b1a      	ldrh	r2, [r3, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bd90      	pop	{r4, r7, pc}
 8005748:	0800b874 	.word	0x0800b874

0800574c <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoderJoystick::getIncrement( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  if( timerCnt )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x1c>
  {
    timerCnt--;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	849a      	strh	r2, [r3, #36]	; 0x24
  }

  if( btnLeft )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d02a      	beq.n	80057c6 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x7a>
  {
    if(    btnLeft->getEvent() == Digital::ACTIVATED
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3318      	adds	r3, #24
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4610      	mov	r0, r2
 8005780:	4798      	blx	r3
 8005782:	4603      	mov	r3, r0
        || (!timerCnt && timerStart && btnLeft->get()) )
 8005784:	2b01      	cmp	r3, #1
 8005786:	d013      	beq.n	80057b0 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x64>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d111      	bne.n	80057b4 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8b1b      	ldrh	r3, [r3, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4610      	mov	r0, r2
 80057a8:	4798      	blx	r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x6a>
 80057b4:	2300      	movs	r3, #0
    if(    btnLeft->getEvent() == Digital::ACTIVATED
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x7a>
    {
      timerCnt = timerStart;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8b1a      	ldrh	r2, [r3, #24]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	849a      	strh	r2, [r3, #36]	; 0x24
      return( LEFT );
 80057c2:	2301      	movs	r3, #1
 80057c4:	e02f      	b.n	8005826 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xda>
    }
  }

  if( btnRight )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d02a      	beq.n	8005824 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xd8>
  {
    if(   btnRight->getEvent() == Digital::ACTIVATED
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3318      	adds	r3, #24
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4610      	mov	r0, r2
 80057de:	4798      	blx	r3
 80057e0:	4603      	mov	r3, r0
       || (!timerCnt && timerStart && btnRight->get()) )
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d013      	beq.n	800580e <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d111      	bne.n	8005812 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8b1b      	ldrh	r3, [r3, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc8>
 8005812:	2300      	movs	r3, #0
    if(   btnRight->getEvent() == Digital::ACTIVATED
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xd8>
    {
      timerCnt = timerStart;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8b1a      	ldrh	r2, [r3, #24]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	849a      	strh	r2, [r3, #36]	; 0x24
      return( RIGHT );
 8005820:	2302      	movs	r3, #2
 8005822:	e000      	b.n	8005826 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xda>
    }
  }
  return( NONE );
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE>:
//
// DigitalIndicator
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalIndicator::DigitalIndicator( Digital     &digital,
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
                                    TaskManager &taskManager )
: digital( digital )
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fdd6 	bl	80053f0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 8005844:	4a0e      	ldr	r2, [pc, #56]	; (8005880 <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE+0x50>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	609a      	str	r2, [r3, #8]
{
  clr();
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f85f 	bl	8005914 <_ZN9EmbSysLib4Ctrl16DigitalIndicator3clrEv>
  cycleTime = taskManager.getCycleTime();
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3304      	adds	r3, #4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
 8005862:	4602      	mov	r2, r0
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	60da      	str	r2, [r3, #12]
  taskManager.add(this);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4611      	mov	r1, r2
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
}
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	0800b860 	.word	0x0800b860

08005884 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv>:

//-------------------------------------------------------------------
void DigitalIndicator::update( void )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if( runUpdate )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	7ddb      	ldrb	r3, [r3, #23]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d03b      	beq.n	800590c <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
  {
    if( t >= maximum )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	8a9a      	ldrh	r2, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	8a5b      	ldrh	r3, [r3, #18]
 800589c:	429a      	cmp	r2, r3
 800589e:	d312      	bcc.n	80058c6 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x42>
    {
      if( repeat && maximum )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7d9b      	ldrb	r3, [r3, #22]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x34>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8a5b      	ldrh	r3, [r3, #18]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x34>
      {
        t = 0;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	829a      	strh	r2, [r3, #20]
        digital.clr();
      }
      t++;
    }
  }
}
 80058b6:	e029      	b.n	800590c <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
        clr();
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3304      	adds	r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
}
 80058c4:	e022      	b.n	800590c <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
      if( t == 0 )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8a9b      	ldrh	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x5e>
        digital.set();
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
 80058e0:	e00e      	b.n	8005900 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x7c>
      else if( t >= limit )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8a9a      	ldrh	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8a1b      	ldrh	r3, [r3, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d308      	bcc.n	8005900 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x7c>
        digital.clr();
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4610      	mov	r0, r2
 80058fe:	4798      	blx	r3
      t++;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8a9b      	ldrh	r3, [r3, #20]
 8005904:	3301      	adds	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	829a      	strh	r2, [r3, #20]
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <_ZN9EmbSysLib4Ctrl16DigitalIndicator3clrEv>:

//-------------------------------------------------------------------
void DigitalIndicator::clr( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  runUpdate = false;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	75da      	strb	r2, [r3, #23]
  maximum   = 0;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	825a      	strh	r2, [r3, #18]
  repeat    = false;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	759a      	strb	r2, [r3, #22]
  t         = 0;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	829a      	strh	r2, [r3, #20]
  digital.clr();
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330c      	adds	r3, #12
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4610      	mov	r0, r2
 8005944:	4798      	blx	r3
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <_ZN9EmbSysLib4Ctrl16DigitalIndicator7triggerEt>:

//-------------------------------------------------------------------
void DigitalIndicator::trigger( WORD time )
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	460b      	mov	r3, r1
 8005958:	807b      	strh	r3, [r7, #2]
  runUpdate = false;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	75da      	strb	r2, [r3, #23]
  repeat    = false;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	759a      	strb	r2, [r3, #22]
  maximum   = ((DWORD)time*1000)/cycleTime;
 8005966:	887b      	ldrh	r3, [r7, #2]
 8005968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800596c:	fb03 f202 	mul.w	r2, r3, r2
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	b29a      	uxth	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	825a      	strh	r2, [r3, #18]
  limit     = maximum;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8a5a      	ldrh	r2, [r3, #18]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	821a      	strh	r2, [r3, #16]
  t         = 0;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	829a      	strh	r2, [r3, #20]
  runUpdate = true;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	75da      	strb	r2, [r3, #23]
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_>:
    \return
            - input value x, if min < x < max
            - min, if x < min
            - max, if x > max
*/
template <class T> inline T RANGE( T x, T min, T max )
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	4603      	mov	r3, r0
 80059a6:	80fb      	strh	r3, [r7, #6]
 80059a8:	460b      	mov	r3, r1
 80059aa:	80bb      	strh	r3, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	807b      	strh	r3, [r7, #2]
{
  if( x > max )
 80059b0:	88fa      	ldrh	r2, [r7, #6]
 80059b2:	887b      	ldrh	r3, [r7, #2]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d901      	bls.n	80059bc <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x1e>
    return( max );
 80059b8:	887b      	ldrh	r3, [r7, #2]
 80059ba:	e006      	b.n	80059ca <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2c>
  if( x < min )
 80059bc:	88fa      	ldrh	r2, [r7, #6]
 80059be:	88bb      	ldrh	r3, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d201      	bcs.n	80059c8 <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2a>
    return( min );
 80059c4:	88bb      	ldrh	r3, [r7, #4]
 80059c6:	e000      	b.n	80059ca <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2c>
  return( x );
 80059c8:	88fb      	ldrh	r3, [r7, #6]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>:
template <class T> inline T MIN( T x, T y )
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	4603      	mov	r3, r0
 80059de:	460a      	mov	r2, r1
 80059e0:	80fb      	strh	r3, [r7, #6]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80bb      	strh	r3, [r7, #4]
  if( x < y )
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	88bb      	ldrh	r3, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d201      	bcs.n	80059f2 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_+0x1c>
    return( x );
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	e000      	b.n	80059f4 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_+0x1e>
    return( y );
 80059f2:	88bb      	ldrh	r3, [r7, #4]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>:
template <class T> inline T MIN( T x, T y )
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	460a      	mov	r2, r1
 8005a0a:	71fb      	strb	r3, [r7, #7]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	71bb      	strb	r3, [r7, #6]
  if( x < y )
 8005a10:	79fa      	ldrb	r2, [r7, #7]
 8005a12:	79bb      	ldrb	r3, [r7, #6]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d201      	bcs.n	8005a1c <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_+0x1c>
    return( x );
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	e000      	b.n	8005a1e <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_+0x1e>
    return( y );
 8005a1c:	79bb      	ldrb	r3, [r7, #6]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_>:
      public:
        //-----------------------------------------------------------
        /*! Instatiate a Sequence::Item
            \param sequence If not zero, the item is added to \a Sequence
        */
        Item( Sequence<T> *sequence = 0 )
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
        {
          PtrNext = 0;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
          if( sequence )
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_+0x22>
          {
            sequence->add( (T*)this );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3b04      	subs	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	6838      	ldr	r0, [r7, #0]
 8005a48:	f000 f813 	bl	8005a72 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>
          }
        }
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEEC1Ev>:

  public:
    //---------------------------------------------------------------
    /*! Instantiate an empty list
    */
    Sequence( void )
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
    {
      PtrFirst = 0;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
    }
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>:
        \param itemPtr Pointer to the item
        \return
                - true: Item added
                - false: Item not added, because it is already in list
    */
    BYTE add( T *itemPtr )
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
    {
      T *ptr;

      // Is itemPtr still in list?
      ptr = PtrFirst;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]

      while( ptr )
 8005a82:	e00c      	b.n	8005a9e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x2c>
      {
        if( ptr == itemPtr )
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d101      	bne.n	8005a90 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x1e>
        {
          return( false );
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e016      	b.n	8005abe <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x4c>
        }
        if(ptr->PtrNext) // Does curent object have a next object?
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d006      	beq.n	8005aa6 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x34>
        {
          ptr = ptr->PtrNext;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]
      while( ptr )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1ef      	bne.n	8005a84 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x12>
 8005aa4:	e000      	b.n	8005aa8 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x36>
        }
        else
        {
          break;
 8005aa6:	bf00      	nop
        }
      }

      // Add a new object,
      // ptr may referes to last object in the list
      if( ptr ) // append new object to last object in list
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x44>
      {
        ptr->PtrNext = itemPtr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	e002      	b.n	8005abc <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x4a>
      }
      else // insert first object into list
      {
        PtrFirst = itemPtr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	601a      	str	r2, [r3, #0]
      }
      return( true );
 8005abc:	2301      	movs	r3, #1
    }
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE8getFirstEv>:
    //---------------------------------------------------------------
    /*! Get the pointer to the first item in the list
        \return Pointer to the first item\n
                Zero, if list is empty
    */
    T* getFirst( void )
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
    {
      return( PtrFirst );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
    }
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4Item7getNextEv>:
        T *getNext( void )
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
          return( PtrNext );
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
        }
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <_ZN9EmbSysLib3Std4FifoIhEC1Et>:
  public:
    //---------------------------------------------------------------
    /*! Create a FIFO and allocate it's memory
        \param sizeIn FIFO size (max number of objects stored in FIFO), default = 3
    */
    Fifo( WORD sizeIn = 3 )
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	807b      	strh	r3, [r7, #2]
    {
      in   = 0;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	809a      	strh	r2, [r3, #4]
      out  = 0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	80da      	strh	r2, [r3, #6]
      anz  = 0;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	811a      	strh	r2, [r3, #8]
      size = sizeIn;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	887a      	ldrh	r2, [r7, #2]
 8005b1c:	815a      	strh	r2, [r3, #10]
      if( size > 0 )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	895b      	ldrh	r3, [r3, #10]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x40>
      {
        speicher = new T[size];
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	895b      	ldrh	r3, [r3, #10]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 ff72 	bl	8008a14 <_Znaj>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e005      	b.n	8005b46 <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x4c>
      }
      else
      {
        size     = 0;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	815a      	strh	r2, [r3, #10]
        speicher = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
      }
    }
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>:

    //---------------------------------------------------------------
    /*! Get FIFO size
        \return FIFO size
    */
    WORD getSize( void )
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
    {
      return( size );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	895b      	ldrh	r3, [r3, #10]
    }
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <_ZN9EmbSysLib3Std4FifoIhElsERKh>:
        \param ref Reference to an object
        \return
                - true, if succeeded
                - false, if FIFO is full, object not written
    */
    bool operator<<( const T &ref )
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
    {
      bool ret = false;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]

      Hw::System::disableInterrupt();
 8005b76:	f7fa fcef 	bl	8000558 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz < size )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	891a      	ldrh	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	895b      	ldrh	r3, [r3, #10]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d21f      	bcs.n	8005bc6 <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x5e>
      {
        speicher[in] = ref;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	8892      	ldrh	r2, [r2, #4]
 8005b8e:	4413      	add	r3, r2
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	7812      	ldrb	r2, [r2, #0]
 8005b94:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	889b      	ldrh	r3, [r3, #4]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	895b      	ldrh	r3, [r3, #10]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	da04      	bge.n	8005bb0 <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x48>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	889b      	ldrh	r3, [r3, #4]
 8005baa:	3301      	adds	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	e000      	b.n	8005bb2 <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x4a>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	809a      	strh	r2, [r3, #4]
        anz++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	891b      	ldrh	r3, [r3, #8]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	811a      	strh	r2, [r3, #8]
        ret = true;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
      }
      Hw::System::enableInterrupt();
 8005bc6:	f7fa fcd9 	bl	800057c <_ZN9EmbSysLib2Hw6System15enableInterruptEv>

      return( ret );
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_ZN9EmbSysLib3Std4FifoIhE7isEmptyEv>:
    bool isEmpty( void )
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005bdc:	f7fa fcbc 	bl	8000558 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz == 0 );
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	891b      	ldrh	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005bee:	f7fa fcc5 	bl	800057c <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <_ZN9EmbSysLib3Std4FifoIhErsERh>:
        \param ref Referenc to an object
        \return
                - true, if succeeded
                - false, if FIFO is empty, no object read
    */
    bool operator>>( T &ref )
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
    {
      bool ret = false;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]

      Hw::System::disableInterrupt();
 8005c0a:	f7fa fca5 	bl	8000558 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz != 0 )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	891b      	ldrh	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01f      	beq.n	8005c56 <_ZN9EmbSysLib3Std4FifoIhErsERh+0x5a>
      {
        ref = speicher[out];
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	88d2      	ldrh	r2, [r2, #6]
 8005c1e:	4413      	add	r3, r2
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	701a      	strb	r2, [r3, #0]
        out = (out < size-1) ? out+1 : 0;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	88db      	ldrh	r3, [r3, #6]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	895b      	ldrh	r3, [r3, #10]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	429a      	cmp	r2, r3
 8005c34:	da04      	bge.n	8005c40 <_ZN9EmbSysLib3Std4FifoIhErsERh+0x44>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	88db      	ldrh	r3, [r3, #6]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	e000      	b.n	8005c42 <_ZN9EmbSysLib3Std4FifoIhErsERh+0x46>
 8005c40:	2200      	movs	r2, #0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	80da      	strh	r2, [r3, #6]
        anz--;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	891b      	ldrh	r3, [r3, #8]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	811a      	strh	r2, [r3, #8]
        ret = true;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
      }
      Hw::System::enableInterrupt();
 8005c56:	f7fa fc91 	bl	800057c <_ZN9EmbSysLib2Hw6System15enableInterruptEv>

      return( ret );
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>:
    bool isFull( void )
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005c6c:	f7fa fc74 	bl	8000558 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz >= size );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	891a      	ldrh	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	895b      	ldrh	r3, [r3, #10]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	bf2c      	ite	cs
 8005c7c:	2301      	movcs	r3, #1
 8005c7e:	2300      	movcc	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005c82:	f7fa fc7b 	bl	800057c <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>:
template <class T> inline T RANGE( T x, T min, T max )
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	80fb      	strh	r3, [r7, #6]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	80bb      	strh	r3, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	807b      	strh	r3, [r7, #2]
  if( x > max )
 8005ca2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ca6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	dd02      	ble.n	8005cb4 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x24>
    return( max );
 8005cae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cb2:	e00a      	b.n	8005cca <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x3a>
  if( x < min )
 8005cb4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	da02      	bge.n	8005cc6 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x36>
    return( min );
 8005cc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005cc4:	e001      	b.n	8005cca <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x3a>
  return( x );
 8005cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEC1ES4_>:
  public:
    //---------------------------------------------------------------
    /*! Create a Flag
        \param def Initial value of the Flag (optional, otherwise value = 0)
    */
    Flag( T def = (T)0 )
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
    {
      value = def;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	701a      	strb	r2, [r3, #0]
      prev  = (T)0;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	705a      	strb	r2, [r3, #1]
    }
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>:

    //---------------------------------------------------------------
    /*! Set the Flag
        \param value New value of Flag
    */
    void operator=( const T &value )
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
    {
      this->value = value;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	701a      	strb	r2, [r3, #0]
    }
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et>:
    Fifo( WORD sizeIn = 3 )
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	807b      	strh	r3, [r7, #2]
      in   = 0;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	809a      	strh	r2, [r3, #4]
      out  = 0;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	80da      	strh	r2, [r3, #6]
      anz  = 0;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	811a      	strh	r2, [r3, #8]
      size = sizeIn;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	887a      	ldrh	r2, [r7, #2]
 8005d3c:	815a      	strh	r2, [r3, #10]
      if( size > 0 )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	895b      	ldrh	r3, [r3, #10]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x40>
        speicher = new T[size];
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	895b      	ldrh	r3, [r3, #10]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f002 fe62 	bl	8008a14 <_Znaj>
 8005d50:	4603      	mov	r3, r0
 8005d52:	461a      	mov	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e005      	b.n	8005d66 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x4c>
        size     = 0;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	815a      	strh	r2, [r3, #10]
        speicher = NULL;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
    }
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>:
    bool isFull( void )
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005d78:	f7fa fbee 	bl	8000558 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz >= size );
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	891a      	ldrh	r2, [r3, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	895b      	ldrh	r3, [r3, #10]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	bf2c      	ite	cs
 8005d88:	2301      	movcs	r3, #1
 8005d8a:	2300      	movcc	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005d8e:	f7fa fbf5 	bl	800057c <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>:
    bool operator<<( const T &ref )
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
      bool ret = false;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
      Hw::System::disableInterrupt();
 8005daa:	f7fa fbd5 	bl	8000558 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz < size )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	891a      	ldrh	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	895b      	ldrh	r3, [r3, #10]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d21f      	bcs.n	8005dfa <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x5e>
        speicher[in] = ref;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	8892      	ldrh	r2, [r2, #4]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	7812      	ldrb	r2, [r2, #0]
 8005dc8:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	889b      	ldrh	r3, [r3, #4]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	895b      	ldrh	r3, [r3, #10]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	da04      	bge.n	8005de4 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x48>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	889b      	ldrh	r3, [r3, #4]
 8005dde:	3301      	adds	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	e000      	b.n	8005de6 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x4a>
 8005de4:	2200      	movs	r2, #0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	809a      	strh	r2, [r3, #4]
        anz++;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	891b      	ldrh	r3, [r3, #8]
 8005dee:	3301      	adds	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	811a      	strh	r2, [r3, #8]
        ret = true;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005dfa:	f7fa fbbf 	bl	800057c <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <_Z41__static_initialization_and_destruction_0ii>:
//-------------------------------------------------------------------
//
// nothing to do ...
//

}  } //namespace
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d109      	bne.n	8005e2c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d104      	bne.n	8005e2c <_Z41__static_initialization_and_destruction_0ii+0x24>
Std::Report PinConfig::report( ReportID_Hw::Module::SYSTEM_PIN_CONFIG );
 8005e22:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005e26:	4803      	ldr	r0, [pc, #12]	; (8005e34 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005e28:	f7fd fb16 	bl	8003458 <_ZN9EmbSysLib3Std6ReportC1Et>
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	2000030c 	.word	0x2000030c

08005e38 <_GLOBAL__sub_I__ZN9EmbSysLib2Hw6System12cntInterruptE>:
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e40:	2001      	movs	r0, #1
 8005e42:	f7ff ffe1 	bl	8005e08 <_Z41__static_initialization_and_destruction_0ii>
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	ed87 0b00 	vstr	d0, [r7]
 8005e52:	ed97 7b00 	vldr	d7, [r7]
 8005e56:	eeb0 7bc7 	vabs.f64	d7, d7
 8005e5a:	eeb0 0b47 	vmov.f64	d0, d7
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h>:
        //-----------------------------------------------------------
        /*! Initialize and connect the device to the bus
            \param i2c    Reference to I2C hardware (I2C bus interface)
            \param hwAddr Device's hardware address
        */
        Device( I2Cmaster &i2c,
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	71fb      	strb	r3, [r7, #7]
                BYTE       hwAddr )
        : i2c( i2c )
 8005e76:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h+0x34>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	605a      	str	r2, [r3, #4]
        {
          this->hwAddr = hwAddr;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	79fa      	ldrb	r2, [r7, #7]
 8005e86:	721a      	strb	r2, [r3, #8]
          isErrorFlag  = false;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	725a      	strb	r2, [r3, #9]
        }
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	0800c5fc 	.word	0x0800c5fc

08005ea0 <_ZN9EmbSysLib2Hw9I2Cmaster6Device7isErrorEv>:
            call of \a read() or \a write()
            \return
                    - true:  Error, previous transfer was aborted
                    - false: No error
        */
        virtual BYTE isError( void )
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
        {
          BYTE ret = isErrorFlag;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	7a5b      	ldrb	r3, [r3, #9]
 8005eac:	73fb      	strb	r3, [r7, #15]
          isErrorFlag = false;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	725a      	strb	r2, [r3, #9]
          return( ret );
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
        }
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em>:
*/
class Ltdc_Mcu
{
  public:
    //---------------------------------------------------------------
    Ltdc_Mcu( uint32_t startAddrIn )
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
    {
      startAddr = startAddrIn;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	601a      	str	r2, [r3, #0]

      RCC->APB2ENR  |=  RCC_APB2ENR_LTDCEN;   // clock enable
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005eda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ede:	6453      	str	r3, [r2, #68]	; 0x44
      RCC->APB2RSTR |=  RCC_APB2RSTR_LTDCRST; // reset cycle
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eea:	6253      	str	r3, [r2, #36]	; 0x24
      RCC->APB2RSTR &= ~RCC_APB2RSTR_LTDCRST;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	4a05      	ldr	r2, [pc, #20]	; (8005f08 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ef6:	6253      	str	r3, [r2, #36]	; 0x24
    }
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40023800 	.word	0x40023800

08005f0c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt>:

    //---------------------------------------------------------------
    void Init( WORD Hsize, WORD Vsize )
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	807b      	strh	r3, [r7, #2]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	803b      	strh	r3, [r7, #0]
    {
      DWORD h = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
      DWORD v = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60bb      	str	r3, [r7, #8]

      // Global control register
      LTDC->GCR = (!LTDC_GCR_HSPOL   // Horizontal Synchronization Polarity: activ low
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	619a      	str	r2, [r3, #24]
                  |!LTDC_GCR_VSPOL   // Vertical Synchronization Polarity: activ low
                  |!LTDC_GCR_DEPOL   // Not Data Enable Polarity: activ low
                  |!LTDC_GCR_PCPOL );// Pixel Clock Polarity: activ low

      // Synchronization size configuration register
      h += 1; // add H-Sync
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Sync
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
      LTDC->SSCR = ((h << 16)  // Horizontal Synchronization Width: 1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	041a      	lsls	r2, r3, #16
 8005f3a:	491e      	ldr	r1, [pc, #120]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Vertical Synchronization Height: 1
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
      LTDC->SSCR = ((h << 16)  // Horizontal Synchronization Width: 1
 8005f40:	608b      	str	r3, [r1, #8]

      // Back porch configuration register
      h += 1; // add H-Back porch
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3301      	adds	r3, #1
 8005f46:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Back porch
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60bb      	str	r3, [r7, #8]
      LTDC->BPCR = ((h << 16)  // Accumulated Horizontal back porch
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	041a      	lsls	r2, r3, #16
 8005f52:	4918      	ldr	r1, [pc, #96]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Accumulated Vertical back porch
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
      LTDC->BPCR = ((h << 16)  // Accumulated Horizontal back porch
 8005f58:	60cb      	str	r3, [r1, #12]

      // Active width configuration register
      h += Hsize;
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
      v += Vsize;
 8005f62:	883b      	ldrh	r3, [r7, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4413      	add	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]
      LTDC->AWCR = ((h << 16)  // Accumulated Active Width
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	041a      	lsls	r2, r3, #16
 8005f6e:	4911      	ldr	r1, [pc, #68]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Accumulated Active Height
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
      LTDC->AWCR = ((h << 16)  // Accumulated Active Width
 8005f74:	610b      	str	r3, [r1, #16]

      // Total width configuration register
      h += 1; // add H-Front porch
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Front porch
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60bb      	str	r3, [r7, #8]
      LTDC->TWCR = ((h << 16)  // Total Width
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	041a      	lsls	r2, r3, #16
 8005f86:	490b      	ldr	r1, [pc, #44]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Total Height
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4313      	orrs	r3, r2
      LTDC->TWCR = ((h << 16)  // Total Width
 8005f8c:	614b      	str	r3, [r1, #20]

      // Background color configuration register
      LTDC->BCCR = ( (0x00 << 16)    // Red value
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	62da      	str	r2, [r3, #44]	; 0x2c
                   | (0x00 <<  8)    // Green value
                   | (0x00 <<  0) ); // Blue value

      // Interrupt enable register
      LTDC->IER = 0; // no interrupts
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	635a      	str	r2, [r3, #52]	; 0x34

      // Global control register
      LTDC->GCR |= LTDC_GCR_LTDCEN; // LTDC enable
 8005f9a:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	4a05      	ldr	r2, [pc, #20]	; (8005fb4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6193      	str	r3, [r2, #24]
    }
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	40016800 	.word	0x40016800

08005fb8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh>:

    //---------------------------------------------------------------
    uint32_t LayerConfig( uint32_t width, uint32_t height, uint8_t layerID = 0 )
 8005fb8:	b480      	push	{r7}
 8005fba:	b089      	sub	sp, #36	; 0x24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	70fb      	strb	r3, [r7, #3]
    {
      LTDC_Layer_TypeDef *layer = (layerID) ? LTDC_Layer2 : LTDC_Layer1;
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0x18>
 8005fcc:	4b2a      	ldr	r3, [pc, #168]	; (8006078 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc0>)
 8005fce:	e000      	b.n	8005fd2 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0x1a>
 8005fd0:	4b2a      	ldr	r3, [pc, #168]	; (800607c <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc4>)
 8005fd2:	61fb      	str	r3, [r7, #28]

      uint32_t hbp  = (LTDC->BPCR & LTDC_BPCR_AHBP) >> 16; // H-Back porch
 8005fd4:	4b2a      	ldr	r3, [pc, #168]	; (8006080 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fde:	61bb      	str	r3, [r7, #24]
      uint32_t vbp  = (LTDC->BPCR & LTDC_BPCR_AVBP) >> 0;  // V-Back porch
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fe8:	617b      	str	r3, [r7, #20]
      uint32_t bpp  = 2; // RGB565: 16-Bit pixel format = 2 bytes per pixel
 8005fea:	2302      	movs	r3, #2
 8005fec:	613b      	str	r3, [r7, #16]

      // Layerx window horizontal position configuration register
      layer->WHPCR = ( ((width       + hbp) << 16)    // Window Horizontal Stop Position
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	041a      	lsls	r2, r3, #16
                     | ((0/*X0*/ + 1 + hbp) <<  0) ); // Window Horizontal Start Position
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	431a      	orrs	r2, r3
      layer->WHPCR = ( ((width       + hbp) << 16)    // Window Horizontal Stop Position
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	605a      	str	r2, [r3, #4]

      // Layerx window vertical position configuration register
      layer->WVPCR = ( ((height      + vbp) << 16)    // Window Vertical Stop Position
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	4413      	add	r3, r2
 8006006:	041a      	lsls	r2, r3, #16
                     | ((0/*Y0*/ + 1 + vbp) <<  0) ); // Window Vertical Start Position
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	3301      	adds	r3, #1
 800600c:	431a      	orrs	r2, r3
      layer->WVPCR = ( ((height      + vbp) << 16)    // Window Vertical Stop Position
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	609a      	str	r2, [r3, #8]

      // Layerx pixel format configuration register
      layer->PFCR = 0x02; // PixelFormat: RGB565
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	2202      	movs	r2, #2
 8006016:	611a      	str	r2, [r3, #16]

      // Layerx default color configuration register
      layer->DCCR = ( (0x00 << 24)    // Alpha
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2200      	movs	r2, #0
 800601c:	619a      	str	r2, [r3, #24]
                    | (0x00 << 16)    // Red
                    | (0x00 <<  8)    // Green
                    | (0x00 <<  0) ); // Blue

      // Layerx constant alpha configuration register
      layer->CACR = (0xFF); // Alpha
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	22ff      	movs	r2, #255	; 0xff
 8006022:	615a      	str	r2, [r3, #20]

      // Layerx blending factors configuration register
      layer->BFCR = ( (0x06 << 8)   // Blending Factor 1:Pixel Alpha x Constant Alpha
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f240 6207 	movw	r2, #1543	; 0x607
 800602a:	61da      	str	r2, [r3, #28]
                    | (0x07 << 0) );// Blending Factor 2:1-(Pixel Alpha x Constant Alpha)

      // Layerx color frame buffer address register
      layer->CFBAR = startAddr;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	629a      	str	r2, [r3, #40]	; 0x28


      // Layerx color frame buffer length register
      layer->CFBLR  = ( ((((width          )*bpp)  ) << 16)   // Color Frame Buffer Pitch in bytes
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	fb02 f303 	mul.w	r3, r2, r3
 800603c:	041a      	lsls	r2, r3, #16
                      | ((((width - 0/*X0*/)*bpp)+3) <<  0) );// Color Frame Buffer Line Length
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6939      	ldr	r1, [r7, #16]
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	3303      	adds	r3, #3
 8006048:	431a      	orrs	r2, r3
      layer->CFBLR  = ( ((((width          )*bpp)  ) << 16)   // Color Frame Buffer Pitch in bytes
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c

      // Layerx color frame buffer line number register
      layer->CFBLNR = height; // Frame Buffer Number of Lines
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	631a      	str	r2, [r3, #48]	; 0x30

      // Layerx control register
      layer->CR |= LTDC_LxCR_LEN; // Layer Enable
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f043 0201 	orr.w	r2, r3, #1
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	601a      	str	r2, [r3, #0]

      // Shadow reload configuration register
      LTDC->SRCR = LTDC_SRCR_IMR; // Immediate Reload: enable
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8006062:	2201      	movs	r2, #1
 8006064:	625a      	str	r2, [r3, #36]	; 0x24

      return( startAddr );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
    }
 800606a:	4618      	mov	r0, r3
 800606c:	3724      	adds	r7, #36	; 0x24
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40016904 	.word	0x40016904
 800607c:	40016884 	.word	0x40016884
 8006080:	40016800 	.word	0x40016800

08006084 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb>:
  public:
    //---------------------------------------------------------------
    /*! Initialize the FSCM hardware
        \param xxx  xxx
    */
    Fmc_Mcu( FMCtype typeIn, bool bothIn = false )
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
 8006090:	4613      	mov	r3, r2
 8006092:	70bb      	strb	r3, [r7, #2]
    {
      type = typeIn&0x0F;
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	b2da      	uxtb	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	701a      	strb	r2, [r3, #0]
      bank = (typeIn>>4)&0x0F;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	091b      	lsrs	r3, r3, #4
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	705a      	strb	r2, [r3, #1]
      both = bothIn;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	78ba      	ldrb	r2, [r7, #2]
 80060ae:	709a      	strb	r2, [r3, #2]

      WORD mode =  PinConfig::FAST_SPEED
 80060b0:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80060b4:	81fb      	strh	r3, [r7, #14]
                 | PinConfig::PUSH_PULL
                 | PinConfig::PULL_UP // ???
                 | PinConfig::NO_PUPD;

      PinConfig::set(PinConfig::FMC_D0,mode);
 80060b6:	89fb      	ldrh	r3, [r7, #14]
 80060b8:	4619      	mov	r1, r3
 80060ba:	208f      	movs	r0, #143	; 0x8f
 80060bc:	f7fa fcbe 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D1,mode);
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	4619      	mov	r1, r3
 80060c4:	2090      	movs	r0, #144	; 0x90
 80060c6:	f7fa fcb9 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D2,mode);
 80060ca:	89fb      	ldrh	r3, [r7, #14]
 80060cc:	4619      	mov	r1, r3
 80060ce:	209b      	movs	r0, #155	; 0x9b
 80060d0:	f7fa fcb4 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D3,mode);
 80060d4:	89fb      	ldrh	r3, [r7, #14]
 80060d6:	4619      	mov	r1, r3
 80060d8:	20a6      	movs	r0, #166	; 0xa6
 80060da:	f7fa fcaf 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D4,mode);
 80060de:	89fb      	ldrh	r3, [r7, #14]
 80060e0:	4619      	mov	r1, r3
 80060e2:	20a9      	movs	r0, #169	; 0xa9
 80060e4:	f7fa fcaa 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D5,mode);
 80060e8:	89fb      	ldrh	r3, [r7, #14]
 80060ea:	4619      	mov	r1, r3
 80060ec:	20aa      	movs	r0, #170	; 0xaa
 80060ee:	f7fa fca5 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D6,mode);
 80060f2:	89fb      	ldrh	r3, [r7, #14]
 80060f4:	4619      	mov	r1, r3
 80060f6:	20ab      	movs	r0, #171	; 0xab
 80060f8:	f7fa fca0 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D7,mode);
 80060fc:	89fb      	ldrh	r3, [r7, #14]
 80060fe:	4619      	mov	r1, r3
 8006100:	20ac      	movs	r0, #172	; 0xac
 8006102:	f7fa fc9b 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D8,mode);
 8006106:	89fb      	ldrh	r3, [r7, #14]
 8006108:	4619      	mov	r1, r3
 800610a:	20ad      	movs	r0, #173	; 0xad
 800610c:	f7fa fc96 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D9,mode);
 8006110:	89fb      	ldrh	r3, [r7, #14]
 8006112:	4619      	mov	r1, r3
 8006114:	20ae      	movs	r0, #174	; 0xae
 8006116:	f7fa fc91 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D10,mode);
 800611a:	89fb      	ldrh	r3, [r7, #14]
 800611c:	4619      	mov	r1, r3
 800611e:	2091      	movs	r0, #145	; 0x91
 8006120:	f7fa fc8c 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D11,mode);
 8006124:	89fb      	ldrh	r3, [r7, #14]
 8006126:	4619      	mov	r1, r3
 8006128:	2092      	movs	r0, #146	; 0x92
 800612a:	f7fa fc87 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D12,mode);
 800612e:	89fb      	ldrh	r3, [r7, #14]
 8006130:	4619      	mov	r1, r3
 8006132:	2093      	movs	r0, #147	; 0x93
 8006134:	f7fa fc82 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D13,mode);
 8006138:	89fb      	ldrh	r3, [r7, #14]
 800613a:	4619      	mov	r1, r3
 800613c:	2094      	movs	r0, #148	; 0x94
 800613e:	f7fa fc7d 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D14,mode);
 8006142:	89fb      	ldrh	r3, [r7, #14]
 8006144:	4619      	mov	r1, r3
 8006146:	2095      	movs	r0, #149	; 0x95
 8006148:	f7fa fc78 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D15,mode);
 800614c:	89fb      	ldrh	r3, [r7, #14]
 800614e:	4619      	mov	r1, r3
 8006150:	2096      	movs	r0, #150	; 0x96
 8006152:	f7fa fc73 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D16,mode);
 8006156:	89fb      	ldrh	r3, [r7, #14]
 8006158:	4619      	mov	r1, r3
 800615a:	2097      	movs	r0, #151	; 0x97
 800615c:	f7fa fc6e 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D17,mode);
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	4619      	mov	r1, r3
 8006164:	2098      	movs	r0, #152	; 0x98
 8006166:	f7fa fc69 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D18,mode);
 800616a:	89fb      	ldrh	r3, [r7, #14]
 800616c:	4619      	mov	r1, r3
 800616e:	2099      	movs	r0, #153	; 0x99
 8006170:	f7fa fc64 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D19,mode);
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	4619      	mov	r1, r3
 8006178:	209a      	movs	r0, #154	; 0x9a
 800617a:	f7fa fc5f 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D20,mode);
 800617e:	89fb      	ldrh	r3, [r7, #14]
 8006180:	4619      	mov	r1, r3
 8006182:	209c      	movs	r0, #156	; 0x9c
 8006184:	f7fa fc5a 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D21,mode);
 8006188:	89fb      	ldrh	r3, [r7, #14]
 800618a:	4619      	mov	r1, r3
 800618c:	209d      	movs	r0, #157	; 0x9d
 800618e:	f7fa fc55 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D22,mode);
 8006192:	89fb      	ldrh	r3, [r7, #14]
 8006194:	4619      	mov	r1, r3
 8006196:	209e      	movs	r0, #158	; 0x9e
 8006198:	f7fa fc50 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D23,mode);
 800619c:	89fb      	ldrh	r3, [r7, #14]
 800619e:	4619      	mov	r1, r3
 80061a0:	209f      	movs	r0, #159	; 0x9f
 80061a2:	f7fa fc4b 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D24,mode);
 80061a6:	89fb      	ldrh	r3, [r7, #14]
 80061a8:	4619      	mov	r1, r3
 80061aa:	20a0      	movs	r0, #160	; 0xa0
 80061ac:	f7fa fc46 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D25,mode);
 80061b0:	89fb      	ldrh	r3, [r7, #14]
 80061b2:	4619      	mov	r1, r3
 80061b4:	20a1      	movs	r0, #161	; 0xa1
 80061b6:	f7fa fc41 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D26,mode);
 80061ba:	89fb      	ldrh	r3, [r7, #14]
 80061bc:	4619      	mov	r1, r3
 80061be:	20a2      	movs	r0, #162	; 0xa2
 80061c0:	f7fa fc3c 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D27,mode);
 80061c4:	89fb      	ldrh	r3, [r7, #14]
 80061c6:	4619      	mov	r1, r3
 80061c8:	20a3      	movs	r0, #163	; 0xa3
 80061ca:	f7fa fc37 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D28,mode);
 80061ce:	89fb      	ldrh	r3, [r7, #14]
 80061d0:	4619      	mov	r1, r3
 80061d2:	20a4      	movs	r0, #164	; 0xa4
 80061d4:	f7fa fc32 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D29,mode);
 80061d8:	89fb      	ldrh	r3, [r7, #14]
 80061da:	4619      	mov	r1, r3
 80061dc:	20a5      	movs	r0, #165	; 0xa5
 80061de:	f7fa fc2d 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D30,mode);
 80061e2:	89fb      	ldrh	r3, [r7, #14]
 80061e4:	4619      	mov	r1, r3
 80061e6:	20a7      	movs	r0, #167	; 0xa7
 80061e8:	f7fa fc28 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D31,mode);
 80061ec:	89fb      	ldrh	r3, [r7, #14]
 80061ee:	4619      	mov	r1, r3
 80061f0:	20a8      	movs	r0, #168	; 0xa8
 80061f2:	f7fa fc23 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_NBL0,mode);
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	4619      	mov	r1, r3
 80061fa:	20c0      	movs	r0, #192	; 0xc0
 80061fc:	f7fa fc1e 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL1,mode);
 8006200:	89fb      	ldrh	r3, [r7, #14]
 8006202:	4619      	mov	r1, r3
 8006204:	20c1      	movs	r0, #193	; 0xc1
 8006206:	f7fa fc19 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_A0,mode);
 800620a:	89fb      	ldrh	r3, [r7, #14]
 800620c:	4619      	mov	r1, r3
 800620e:	2070      	movs	r0, #112	; 0x70
 8006210:	f7fa fc14 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A1,mode);
 8006214:	89fb      	ldrh	r3, [r7, #14]
 8006216:	4619      	mov	r1, r3
 8006218:	2071      	movs	r0, #113	; 0x71
 800621a:	f7fa fc0f 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A2,mode);
 800621e:	89fb      	ldrh	r3, [r7, #14]
 8006220:	4619      	mov	r1, r3
 8006222:	207c      	movs	r0, #124	; 0x7c
 8006224:	f7fa fc0a 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A3,mode);
 8006228:	89fb      	ldrh	r3, [r7, #14]
 800622a:	4619      	mov	r1, r3
 800622c:	2083      	movs	r0, #131	; 0x83
 800622e:	f7fa fc05 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A4,mode);
 8006232:	89fb      	ldrh	r3, [r7, #14]
 8006234:	4619      	mov	r1, r3
 8006236:	2084      	movs	r0, #132	; 0x84
 8006238:	f7fa fc00 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A5,mode);
 800623c:	89fb      	ldrh	r3, [r7, #14]
 800623e:	4619      	mov	r1, r3
 8006240:	2085      	movs	r0, #133	; 0x85
 8006242:	f7fa fbfb 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A6,mode);
 8006246:	89fb      	ldrh	r3, [r7, #14]
 8006248:	4619      	mov	r1, r3
 800624a:	2086      	movs	r0, #134	; 0x86
 800624c:	f7fa fbf6 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A7,mode);
 8006250:	89fb      	ldrh	r3, [r7, #14]
 8006252:	4619      	mov	r1, r3
 8006254:	2087      	movs	r0, #135	; 0x87
 8006256:	f7fa fbf1 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A8,mode);
 800625a:	89fb      	ldrh	r3, [r7, #14]
 800625c:	4619      	mov	r1, r3
 800625e:	2088      	movs	r0, #136	; 0x88
 8006260:	f7fa fbec 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A9,mode);
 8006264:	89fb      	ldrh	r3, [r7, #14]
 8006266:	4619      	mov	r1, r3
 8006268:	2089      	movs	r0, #137	; 0x89
 800626a:	f7fa fbe7 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A10,mode);
 800626e:	89fb      	ldrh	r3, [r7, #14]
 8006270:	4619      	mov	r1, r3
 8006272:	2072      	movs	r0, #114	; 0x72
 8006274:	f7fa fbe2 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A11,mode);
 8006278:	89fb      	ldrh	r3, [r7, #14]
 800627a:	4619      	mov	r1, r3
 800627c:	2073      	movs	r0, #115	; 0x73
 800627e:	f7fa fbdd 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A12,mode);
 8006282:	89fb      	ldrh	r3, [r7, #14]
 8006284:	4619      	mov	r1, r3
 8006286:	2074      	movs	r0, #116	; 0x74
 8006288:	f7fa fbd8 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A13,mode);
 800628c:	89fb      	ldrh	r3, [r7, #14]
 800628e:	4619      	mov	r1, r3
 8006290:	2075      	movs	r0, #117	; 0x75
 8006292:	f7fa fbd3 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A14,mode);
 8006296:	89fb      	ldrh	r3, [r7, #14]
 8006298:	4619      	mov	r1, r3
 800629a:	2076      	movs	r0, #118	; 0x76
 800629c:	f7fa fbce 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A15,mode);
 80062a0:	89fb      	ldrh	r3, [r7, #14]
 80062a2:	4619      	mov	r1, r3
 80062a4:	2077      	movs	r0, #119	; 0x77
 80062a6:	f7fa fbc9 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDCLK,mode);
 80062aa:	89fb      	ldrh	r3, [r7, #14]
 80062ac:	4619      	mov	r1, r3
 80062ae:	20cf      	movs	r0, #207	; 0xcf
 80062b0:	f7fa fbc4 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNCAS,mode);
 80062b4:	89fb      	ldrh	r3, [r7, #14]
 80062b6:	4619      	mov	r1, r3
 80062b8:	20d0      	movs	r0, #208	; 0xd0
 80062ba:	f7fa fbbf 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDNRAS,mode);
 80062be:	89fb      	ldrh	r3, [r7, #14]
 80062c0:	4619      	mov	r1, r3
 80062c2:	20d3      	movs	r0, #211	; 0xd3
 80062c4:	f7fa fbba 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDCKE0,mode);
 80062c8:	89fb      	ldrh	r3, [r7, #14]
 80062ca:	4619      	mov	r1, r3
 80062cc:	20cd      	movs	r0, #205	; 0xcd
 80062ce:	f7fa fbb5 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNE0,mode);
 80062d2:	89fb      	ldrh	r3, [r7, #14]
 80062d4:	4619      	mov	r1, r3
 80062d6:	20d1      	movs	r0, #209	; 0xd1
 80062d8:	f7fa fbb0 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNWE,mode);
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	4619      	mov	r1, r3
 80062e0:	20d4      	movs	r0, #212	; 0xd4
 80062e2:	f7fa fbab 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL2,mode);
 80062e6:	89fb      	ldrh	r3, [r7, #14]
 80062e8:	4619      	mov	r1, r3
 80062ea:	20c2      	movs	r0, #194	; 0xc2
 80062ec:	f7fa fba6 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL3,mode);
 80062f0:	89fb      	ldrh	r3, [r7, #14]
 80062f2:	4619      	mov	r1, r3
 80062f4:	20c3      	movs	r0, #195	; 0xc3
 80062f6:	f7fa fba1 	bl	8000a3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      /* Enable FMC clock */
      RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x29c>)
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	4a08      	ldr	r2, [pc, #32]	; (8006320 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x29c>)
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	6393      	str	r3, [r2, #56]	; 0x38

      if( type == SDRAM )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d102      	bne.n	8006314 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x290>
      {
        SDRAM_Init( );
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f81c 	bl	800634c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv>
      }
    }
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40023800 	.word	0x40023800

08006324 <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv>:
    
    //---------------------------------------------------------------
    uint32_t startAddr( void )
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
    {
      if( bank == 0 )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv+0x16>
        return( 0xC0000000 );
 8006334:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8006338:	e001      	b.n	800633e <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv+0x1a>
      else
        return( 0xD0000000 );
 800633a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
    }
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv>:
    
  private:
    //---------------------------------------------------------------
    void SDRAM_Init(  )
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
    {
      uint32_t reg  = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
      // Step 1 and 2
      // Common initialization,
      // see Reference Manual, DocID028270-Rev 3, page 388
      //--------------------------------------------------
      // SDRAM Control registers
      reg  = FMC_Bank5_6->SDCR[0/*BANK1*/];
 8006358:	4b37      	ldr	r3, [pc, #220]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDCR1_SDCLK
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006364:	60fb      	str	r3, [r7, #12]
              | FMC_SDCR1_RBURST
              | FMC_SDCR1_RPIPE );
      reg |=  (  (2<<10)          // Clock configuration: 2xHCLK periods
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800636c:	60fb      	str	r3, [r7, #12]
              |  FMC_SDCR1_RBURST // Burst read:enable
              |  (0<<13) );       // Read pipe: No HCLK clock cycle delay
      FMC_Bank5_6->SDCR[0/*BANK1*/] = reg;
 800636e:	4a32      	ldr	r2, [pc, #200]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6013      	str	r3, [r2, #0]

      // SDRAM Timing registers
      reg  = FMC_Bank5_6->SDTR[0/*BANK1*/];
 8006374:	4b30      	ldr	r3, [pc, #192]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDTR1_TRC
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4b2f      	ldr	r3, [pc, #188]	; (800643c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf0>)
 800637e:	4013      	ands	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
              | FMC_SDTR1_TRP );
      reg |=  ( ((7 - 1) << 12)    // Row cycle delay: 7 cycles
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f443 1383 	orr.w	r3, r3, #1073152	; 0x106000
 8006388:	60fb      	str	r3, [r7, #12]
              | ((2 - 1) << 20) ); // Row precharge delay: 2 cycles
      FMC_Bank5_6->SDTR[0/*BANK1*/] = reg;
 800638a:	4a2b      	ldr	r2, [pc, #172]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6093      	str	r3, [r2, #8]

      // Bank specific initialization
      //-----------------------------
      // SDRAM Control registers
      reg  = FMC_Bank5_6->SDCR[bank];
 8006390:	4a29      	ldr	r2, [pc, #164]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639a:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDCR1_NC
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4b28      	ldr	r3, [pc, #160]	; (8006440 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf4>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
              | FMC_SDCR1_NR
              | FMC_SDCR1_MWID
              | FMC_SDCR1_NB
              | FMC_SDCR1_CAS
              | FMC_SDCR1_WP );
      reg |=  ( (0 <<  0)       // Number of column address bits:8
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f443 73f2 	orr.w	r3, r3, #484	; 0x1e4
 80063aa:	60fb      	str	r3, [r7, #12]
              | (1 <<  2)       // Number of row address bits:12
              | (2 <<  4)       // Memory data bus width:32 bits
              | (1 <<  6)       // Number of internal banks:4
              | (3 <<  7)       // CAS Latency:3 (must be same as in Load Mode Register)
              |!FMC_SDCR1_WP ); // Write protection: disable
      FMC_Bank5_6->SDCR[bank] = reg;
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	4619      	mov	r1, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

      // SDRAM Timing registers
      reg  = FMC_Bank5_6->SDTR[bank];
 80063ba:	4a1f      	ldr	r2, [pc, #124]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	3302      	adds	r3, #2
 80063c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c6:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDTR1_TMRD
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf8>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
              | FMC_SDTR1_TXSR
              | FMC_SDTR1_TRAS
              | FMC_SDTR1_TWR
              | FMC_SDTR1_TRCD );
      reg |=  ( ((2 - 1) <<  0)   // Load Mode Register to Active: 2 cycles
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xfc>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
              | ((7 - 1) <<  4)   // Exit Self-refresh delay: 7 cycles
              | ((4 - 1) <<  8)   // Self refresh time: 4 cycles
              | ((2 - 1) << 16)   // Recovery delay: 2 cycles
              | ((2 - 1) << 24)); // Row to column delay: 2 cycles
      FMC_Bank5_6->SDTR[bank] = reg;
 80063d8:	4917      	ldr	r1, [pc, #92]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	3302      	adds	r3, #2
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      // Device specific initialization
      //-------------------------------

      // Step 3: Configure a clock configuration enable command
      SendCommand( 0x01/*Clock Configuration Enable*/, 1, 0 );
 80063e6:	2300      	movs	r3, #0
 80063e8:	2201      	movs	r2, #1
 80063ea:	2101      	movs	r1, #1
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f82d 	bl	800644c <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 4: Insert 100 us minimum delay
      System::delayMilliSec(1);
 80063f2:	2001      	movs	r0, #1
 80063f4:	f7fa f914 	bl	8000620 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

      // Step 5: Configure a PALL (precharge all) command
      SendCommand( 0x02/*PALL Command*/, 1, 0 );
 80063f8:	2300      	movs	r3, #0
 80063fa:	2201      	movs	r2, #1
 80063fc:	2102      	movs	r1, #2
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f824 	bl	800644c <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 6: Configure an Auto Refresh command
      SendCommand( 0x03/*Auto Refresh Command*/, 8, 0 );
 8006404:	2300      	movs	r3, #0
 8006406:	2208      	movs	r2, #8
 8006408:	2103      	movs	r1, #3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f81e 	bl	800644c <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 7: Program the external memory mode register
      // see: Micron SDR SDRAM "MT48LC4M32B2", Datasheet
      reg = ( (0<<0)   // Burst length: 1
 8006410:	f44f 730c 	mov.w	r3, #560	; 0x230
 8006414:	60fb      	str	r3, [r7, #12]
            | (0<<3)   // Burst type:sequential
            | (3<<4)   // CAS Latency:3 (must be same as in SDCR)
            | (0<<7)   // Operating Mode: standard
            | (1<<9) );// Write Burst Mode: single
      SendCommand(0x04/*Load Mode Register*/, 1, reg);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	2104      	movs	r1, #4
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f815 	bl	800644c <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>
      //      Refresh count:  4k = 4096
      //
      // here:fclkSD = 100 MHz
      //      COUNT = RefreshPeriod/RefreshCount*fclkSD + 20
      //            = 64E-3/4096*100E6 +20 = 1583
      FMC_Bank5_6->SDRTR |= (1583 << 1);
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	4904      	ldr	r1, [pc, #16]	; (8006438 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006428:	f640 435e 	movw	r3, #3166	; 0xc5e
 800642c:	4313      	orrs	r3, r2
 800642e:	614b      	str	r3, [r1, #20]
    }
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	a0000140 	.word	0xa0000140
 800643c:	ff0f0fff 	.word	0xff0f0fff
 8006440:	fffffc00 	.word	0xfffffc00
 8006444:	f0f0f000 	.word	0xf0f0f000
 8006448:	01010361 	.word	0x01010361

0800644c <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>:

  private:
    //---------------------------------------------------------------
    void SendCommand( uint32_t Command,       //!< Command issued to the SDRAM device
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]

      // see: Reference Manual, DocID028270-Rev 3, page 402:
      //      "If two SDRAM banks are used, the Auto-refresh and
      //       PALL command must be issued simultaneously to the two devices
      //       with CTB1 and CTB2 bits set"
      if( both && (   Command == 0x02    // PALL Command
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	789b      	ldrb	r3, [r3, #2]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x28>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d002      	beq.n	800646e <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x22>
                   || Command == 0x03 )) // Auto Refresh Mode
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b03      	cmp	r3, #3
 800646c:	d102      	bne.n	8006474 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x28>
        ctb = 3; // use CTB1 and CTB2 simultanously
 800646e:	2303      	movs	r3, #3
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e008      	b.n	8006486 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x3a>
      else if( bank == 0)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x36>
        ctb = 1<<1; // CTB1
 800647c:	2302      	movs	r3, #2
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e001      	b.n	8006486 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x3a>
      else
        ctb = 1<<0; // CTB2
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]

      FMC_Bank5_6->SDCMR = ( (Command         << 0)
                           | (ctb             << 3)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	00da      	lsls	r2, r3, #3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	431a      	orrs	r2, r3
                           | ((AutoRefresh-1) << 5)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3b01      	subs	r3, #1
 8006492:	015b      	lsls	r3, r3, #5
 8006494:	431a      	orrs	r2, r3
                           | (ModeRegister    << 9) );
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	025b      	lsls	r3, r3, #9
      FMC_Bank5_6->SDCMR = ( (Command         << 0)
 800649a:	490b      	ldr	r1, [pc, #44]	; (80064c8 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x7c>)
                           | (ModeRegister    << 9) );
 800649c:	4313      	orrs	r3, r2
      FMC_Bank5_6->SDCMR = ( (Command         << 0)
 800649e:	610b      	str	r3, [r1, #16]
      // TODO: timeout
      while( FMC_Bank5_6->SDSR & FMC_SDSR_BUSY ); // wait until command is send
 80064a0:	bf00      	nop
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x7c>)
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bf14      	ite	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	2300      	moveq	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1f4      	bne.n	80064a2 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x56>
    }
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	a0000140 	.word	0xa0000140

080064cc <_ZN9EmbSysLib2Hw7Dsi_McuC1Em>:
*/
class Dsi_Mcu
{
  public:
    //---------------------------------------------------------------
    Dsi_Mcu( uint32_t startAddr )
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]

    : hwLTDC( startAddr )
 80064d6:	4a10      	ldr	r2, [pc, #64]	; (8006518 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x4c>)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff fcee 	bl	8005ec4 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em>

    {
      // Enable clock and reset-cycle
      RCC->APB2ENR  |=  RCC_APB2ENR_DSIEN;
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80064ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ec:	4a0b      	ldr	r2, [pc, #44]	; (800651c <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80064ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064f2:	6453      	str	r3, [r2, #68]	; 0x44
      RCC->APB2RSTR |=  RCC_APB2RSTR_DSIRST;
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	4a08      	ldr	r2, [pc, #32]	; (800651c <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80064fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064fe:	6253      	str	r3, [r2, #36]	; 0x24
      RCC->APB2RSTR &= ~RCC_APB2RSTR_DSIRST;
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	4a05      	ldr	r2, [pc, #20]	; (800651c <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 8006506:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800650a:	6253      	str	r3, [r2, #36]	; 0x24
    }
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	0800c5ec 	.word	0x0800c5ec
 800651c:	40023800 	.word	0x40023800

08006520 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb>:

    //-----------------------------------------------------------------
    void Init( WORD Hsize, WORD Vsize, bool useLTDC )
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	4608      	mov	r0, r1
 800652a:	4611      	mov	r1, r2
 800652c:	461a      	mov	r2, r3
 800652e:	4603      	mov	r3, r0
 8006530:	817b      	strh	r3, [r7, #10]
 8006532:	460b      	mov	r3, r1
 8006534:	813b      	strh	r3, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	71fb      	strb	r3, [r7, #7]
    {
      DSI->WCR   &= ~DSI_WCR_DSIEN;   // Wrapper disable
 800653a:	4b6d      	ldr	r3, [pc, #436]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800653c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006540:	4a6b      	ldr	r2, [pc, #428]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006542:	f023 0308 	bic.w	r3, r3, #8
 8006546:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
      DSI->CR    &= ~DSI_CR_EN;       // DSI disable
 800654a:	4b69      	ldr	r3, [pc, #420]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	4a68      	ldr	r2, [pc, #416]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	6053      	str	r3, [r2, #4]
      DSI->PCTLR &= ~DSI_PCTLR_CKE;   // D-PHY clock disable
 8006556:	4b66      	ldr	r3, [pc, #408]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006558:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800655c:	4a64      	ldr	r2, [pc, #400]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800655e:	f023 0304 	bic.w	r3, r3, #4
 8006562:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      DSI->PCTLR &= ~DSI_PCTLR_DEN;   // Digital disable
 8006566:	4b62      	ldr	r3, [pc, #392]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800656c:	4a60      	ldr	r2, [pc, #384]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800656e:	f023 0302 	bic.w	r3, r3, #2
 8006572:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      DSI->WRPCR &= ~DSI_WRPCR_PLLEN; // PLL disable
 8006576:	4b5e      	ldr	r3, [pc, #376]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006578:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800657c:	4a5c      	ldr	r2, [pc, #368]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
      DSI->WRPCR &= ~DSI_WRPCR_REGEN; // Regulator disable
 8006586:	4b5a      	ldr	r3, [pc, #360]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006588:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800658c:	4a58      	ldr	r2, [pc, #352]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800658e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006592:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

      // Turn on the regulator and enable the DSI PLL
      //---------------------------------------------
      DSI->WRPCR |= DSI_WRPCR_REGEN; // Regulator Enable
 8006596:	4b56      	ldr	r3, [pc, #344]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006598:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800659c:	4a54      	ldr	r2, [pc, #336]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800659e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065a2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

      // TODO: timeout
      while( !(DSI->WISR & DSI_WISR_RRS) ) // Wait until the regulator is ready
 80065a6:	bf00      	nop
 80065a8:	4b51      	ldr	r3, [pc, #324]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80065aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80065ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1f3      	bne.n	80065a8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x88>
      // INFIN = CLKIN/IDF = 4,...,25MHz
      // Fvco = 500MHz - 1 GHz
      // ODF 2^0=1, 2^1=2, 2^2=4, 2^3=8
      // PHI 31,25 to 500MHz

      const DWORD pll_ODF  = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
      const DWORD pll_IDF  = 2;
 80065c4:	2302      	movs	r3, #2
 80065c6:	623b      	str	r3, [r7, #32]
      const DWORD pll_NDIV = RANGE( (DWORD)250000*pll_IDF/System_GetDSIclock(), (DWORD)10, (DWORD)125 );
 80065c8:	f7fa f9a2 	bl	8000910 <_Z18System_GetDSIclockv>
 80065cc:	4603      	mov	r3, r0
 80065ce:	4a49      	ldr	r2, [pc, #292]	; (80066f4 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d4>)
 80065d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d4:	227d      	movs	r2, #125	; 0x7d
 80065d6:	210a      	movs	r1, #10
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 ffff 	bl	80085dc <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_>
 80065de:	61f8      	str	r0, [r7, #28]
      const double F_PHI   = 500E6; /*Hz*/
 80065e0:	a341      	add	r3, pc, #260	; (adr r3, 80066e8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1c8>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	e9c7 2304 	strd	r2, r3, [r7, #16]

      DSI->WRPCR &= ~( DSI_WRPCR_PLL_NDIV
 80065ea:	4b41      	ldr	r3, [pc, #260]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80065ec:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80065f0:	493f      	ldr	r1, [pc, #252]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80065f2:	4b41      	ldr	r3, [pc, #260]	; (80066f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d8>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
                     | DSI_WRPCR_PLL_IDF
                     | DSI_WRPCR_PLL_ODF );
      DSI->WRPCR |=  ( (pll_NDIV <<  2)   // PLL N-Div
 80065fa:	4b3d      	ldr	r3, [pc, #244]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80065fc:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4313      	orrs	r3, r2
 8006606:	4a3a      	ldr	r2, [pc, #232]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800660c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                     | (pll_IDF  << 11)   // PLL IDF
                     | (pll_ODF  << 16)); // PLL ODF

      DSI->WRPCR |= DSI_WRPCR_PLLEN; // PLL Enable
 8006610:	4b37      	ldr	r3, [pc, #220]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006612:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006616:	4a36      	ldr	r2, [pc, #216]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

      // TODO: timeout
      while( !(DSI->WISR & DSI_WISR_PLLLS) ); // Wait for the lock of the PLL
 8006620:	bf00      	nop
 8006622:	4b33      	ldr	r3, [pc, #204]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006624:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f3      	bne.n	8006622 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x102>

      // Set Host PHY
      //-------------
      // D-PHY clock and digital lane
      DSI->PCTLR  = ( DSI_PCTLR_CKE    // Clock Enable
 800663a:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800663c:	2206      	movs	r2, #6
 800663e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                    | DSI_PCTLR_DEN ); // Digital Enable

      // Clock Lane Configuration
      DSI->CLCR  =  ( DSI_CLCR_DPCC    // D-PHY Clock Control: High-Speed mode
 8006642:	4b2b      	ldr	r3, [pc, #172]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006644:	2201      	movs	r2, #1
 8006646:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                    |!DSI_CLCR_ACR );  // Automatic Clock lane Control: disabled

      // Host PHY Configuration Register
      DSI->PCONFR  =  ( (10 <<8 )      // Stop Wait Time: 10
 800664a:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800664c:	f640 2201 	movw	r2, #2561	; 0xa01
 8006650:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                      | 0x01 );        // Number of Lanes: 2

      // Set Clock configuration
      //------------------------
      // Clock Control register
      DSI->CCR  =  ( (0 << 8)          // Timeout Clock Division
 8006654:	4b26      	ldr	r3, [pc, #152]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006656:	2204      	movs	r2, #4
 8006658:	609a      	str	r2, [r3, #8]
                   | (4 << 0) );       // TX Escape Clock Division

      //  Wrapper PHY Configuration Register 0
      DSI->WPCR[0] = (WORD)(1.0/(0.25E-9*F_PHI)); // Unit Interval multiplied by 4
 800665a:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800665c:	2208      	movs	r2, #8
 800665e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

       // Disable all error interrupts
      DSI->IER[0] = 0;
 8006662:	4b23      	ldr	r3, [pc, #140]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006664:	2200      	movs	r2, #0
 8006666:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      DSI->IER[1] = 0;
 800666a:	4b21      	ldr	r3, [pc, #132]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800666c:	2200      	movs	r2, #0
 800666e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

      // Host mode Configuration Register
      DSI->MCR = DSI_MCR_CMDM; // Command mode: Command
 8006672:	4b1f      	ldr	r3, [pc, #124]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006674:	2201      	movs	r2, #1
 8006676:	635a      	str	r2, [r3, #52]	; 0x34

      //  Wrapper     Configuration Register
      DSI->WCFGR  = ( DSI_WCFGR_DSIM    // Video transmission mode: Adapted Command mode
 8006678:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800667a:	220b      	movs	r2, #11
 800667c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                    | !DSI_WCFGR_AR     // Automatic Refresh: disable
                    | !DSI_WCFGR_VSPOL  // VSync Polarity: fallig edge
                    | (0x05<<1) );      // Color multiplexing used by DSI Host: 24 bit

      // Host LTDC VCID Register
      DSI->LVCIDR = 0;                // Virtual Channel ID
 8006680:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006682:	2200      	movs	r2, #0
 8006684:	60da      	str	r2, [r3, #12]

      //  Host LTDC Polarity Configuration Register
      DSI->LPCR  =  (!DSI_LPCR_DEP    // Data Enable Polarity: active high
 8006686:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006688:	2200      	movs	r2, #0
 800668a:	615a      	str	r2, [r3, #20]
                    |!DSI_LPCR_VSP    // VSYNC Polarity: shutdown pin active high
                    |!DSI_LPCR_HSP ); // HSYNC Polarity: HSYNC pin active high

      // Host LTDC Color Coding Register
      DSI->LCOLCR = ( !DSI_LCOLCR_LPE  // Loosely Packet Enable: disable
 800668c:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800668e:	2205      	movs	r2, #5
 8006690:	611a      	str	r2, [r3, #16]
                    | 0x05           );// Color Coding: 24 bit

      // Host LTDC Command Configuration Register
      DSI->LCCR = Hsize; // Command Size, max size for LTDC write memory command (pixel)
 8006692:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006694:	897b      	ldrh	r3, [r7, #10]
 8006696:	6653      	str	r3, [r2, #100]	; 0x64

      // Host Command mode Configuration Register,
      // select High-speed or Low-power mode:
      // Enable Low-power command
      DSI->CMCR = ( DSI_CMCR_GSW0TX
 8006698:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800669a:	4a18      	ldr	r2, [pc, #96]	; (80066fc <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1dc>)
 800669c:	669a      	str	r2, [r3, #104]	; 0x68
                  | DSI_CMCR_DSR0TX
                  | DSI_CMCR_DLWTX
                  | 0   // Maximum Read Packet Size: High-speed
                  | 0); // Acknowledge Request Enable: disable

      if( useLTDC )
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d006      	beq.n	80066b2 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x192>
      {
        hwLTDC.Init( Hsize, Vsize );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3304      	adds	r3, #4
 80066a8:	893a      	ldrh	r2, [r7, #8]
 80066aa:	8979      	ldrh	r1, [r7, #10]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fc2d 	bl	8005f0c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt>
      }

      // DSI and wrapper enable
      DSI->CR  |= DSI_CR_EN;
 80066b2:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4a0e      	ldr	r2, [pc, #56]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	6053      	str	r3, [r2, #4]
      DSI->WCR |= DSI_WCR_DSIEN;
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80066c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066c4:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80066c6:	f043 0308 	orr.w	r3, r3, #8
 80066ca:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
      // Host Clock Lane Timer Configuration Register
      //
      // see: https://www.keil.com/boards2/stmicroelectronics/stm32f746g_discovery, Keil.STM32F7xx_DFP.2.9.0.pack
      //      "But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.
      //        Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME."
      DSI->CLTCR = ( (35 <<  0)    // Low-Power to High-Speed Time
 80066ce:	4b08      	ldr	r3, [pc, #32]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80066d0:	f04f 1223 	mov.w	r2, #2293795	; 0x230023
 80066d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    | (35 << 16) ); // High-Speed to Low-Power Time

      //  Host Data Lane Timer Configuration Register
      DSI->DLTCR = ( ( 0 <<  0 )   // Maximum Read Time
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80066da:	4a09      	ldr	r2, [pc, #36]	; (8006700 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1e0>)
 80066dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                   | (35 << 16 )   // Low-Power To High-Speed Time
                   | (35 << 24 ) );// High-Speed To Low-Power Time

    } // end of init()
 80066e0:	bf00      	nop
 80066e2:	3728      	adds	r7, #40	; 0x28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	00000000 	.word	0x00000000
 80066ec:	41bdcd65 	.word	0x41bdcd65
 80066f0:	40016c00 	.word	0x40016c00
 80066f4:	0007a120 	.word	0x0007a120
 80066f8:	fffc8603 	.word	0xfffc8603
 80066fc:	000e7f00 	.word	0x000e7f00
 8006700:	23230000 	.word	0x23230000

08006704 <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt>:

    //---------------------------------------------------------------
    uint32_t startLTDC( WORD Hsize, WORD Vsize )
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	807b      	strh	r3, [r7, #2]
 8006710:	4613      	mov	r3, r2
 8006712:	803b      	strh	r3, [r7, #0]
    {
      // Host Command mode Configuration Register,
      // select High-speed or Low-power mode
      // Disable Low-power command
      DSI->CMCR = (!DSI_CMCR_GSW0TX
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt+0x3c>)
 8006716:	2200      	movs	r2, #0
 8006718:	669a      	str	r2, [r3, #104]	; 0x68
                  |!DSI_CMCR_DLWTX
                  | 0   // Maximum Read Packet Size: High-speed
                  | 0); // Acknowledge Request Enable: disable

      // Host Protocol Configuration Register
      DSI->PCR =  (!DSI_PCR_CRCRXE
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt+0x3c>)
 800671c:	2204      	movs	r2, #4
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c
                  |!DSI_PCR_ECCRXE
                  | DSI_PCR_BTAE
                  |!DSI_PCR_ETRXE
                  |!DSI_PCR_ETTXE );

      DisplayRefresh();
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f881 	bl	8006828 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>

      return( hwLTDC.LayerConfig(Hsize, Vsize) );
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	1d18      	adds	r0, r3, #4
 800672a:	8879      	ldrh	r1, [r7, #2]
 800672c:	883a      	ldrh	r2, [r7, #0]
 800672e:	2300      	movs	r3, #0
 8006730:	f7ff fc42 	bl	8005fb8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh>
 8006734:	4603      	mov	r3, r0
    }
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40016c00 	.word	0x40016c00

08006744 <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh>:

    //---------------------------------------------------------------
    virtual void writeShort( uint8_t para0, uint8_t para1 )
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
 8006750:	4613      	mov	r3, r2
 8006752:	70bb      	strb	r3, [r7, #2]
    {
      // TODO: timeout
      while( !(DSI->GPSR & DSI_GPSR_CMDFE) ); // Wait for Command FIFO Empty
 8006754:	bf00      	nop
 8006756:	4b0d      	ldr	r3, [pc, #52]	; (800678c <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x48>)
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1f4      	bne.n	8006756 <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x12>

      // Host Generic Header Configuration Register
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
                  | (              0 <<  6)   // channel ID
                  | ((uint32_t)para0 <<  8)   // data
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	021a      	lsls	r2, r3, #8
                  | ((uint32_t)para1 << 16) );// data
 8006770:	78bb      	ldrb	r3, [r7, #2]
 8006772:	041b      	lsls	r3, r3, #16
 8006774:	4313      	orrs	r3, r2
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
 8006776:	4a05      	ldr	r2, [pc, #20]	; (800678c <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x48>)
                  | ((uint32_t)para1 << 16) );// data
 8006778:	f043 0315 	orr.w	r3, r3, #21
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
 800677c:	66d3      	str	r3, [r2, #108]	; 0x6c
    }
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40016c00 	.word	0x40016c00

08006790 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm>:

    //---------------------------------------------------------------
    virtual void writeLong( uint8_t*para, uint32_t N )
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
    {
      uint32_t n = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]

      // TODO: timeout
      while( !(DSI->GPSR & DSI_GPSR_CMDFE) ); // Wait for Command FIFO Empty
 80067a0:	bf00      	nop
 80067a2:	4b1f      	ldr	r3, [pc, #124]	; (8006820 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
 80067a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bf0c      	ite	eq
 80067ae:	2301      	moveq	r3, #1
 80067b0:	2300      	movne	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f4      	bne.n	80067a2 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x12>

      // TODO: Fehler,wenn N nicht durch 4 teilbar !!! Scheint aber nichts auszumachen ....

      // Set the DCS code hexadecimal on payload byte 1, and the other parameters on the write FIFO command
      while(n < N)
 80067b8:	e01f      	b.n	80067fa <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x6a>
      {
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	4619      	mov	r1, r3
                    | ((uint32_t)(*(para + n+1)) <<  8)
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	3301      	adds	r3, #1
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	4413      	add	r3, r2
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	ea41 0203 	orr.w	r2, r1, r3
                    | ((uint32_t)(*(para + n+2)) << 16)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3302      	adds	r3, #2
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	440b      	add	r3, r1
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	041b      	lsls	r3, r3, #16
 80067e0:	431a      	orrs	r2, r3
                    | ((uint32_t)(*(para + n+3)) << 24) );
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	3303      	adds	r3, #3
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	440b      	add	r3, r1
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	061b      	lsls	r3, r3, #24
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80067ee:	490c      	ldr	r1, [pc, #48]	; (8006820 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
                    | ((uint32_t)(*(para + n+3)) << 24) );
 80067f0:	4313      	orrs	r3, r2
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80067f2:	670b      	str	r3, [r1, #112]	; 0x70
        n += 4;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	3304      	adds	r3, #4
 80067f8:	617b      	str	r3, [r7, #20]
      while(n < N)
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d3db      	bcc.n	80067ba <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x2a>
      }

      // Host Generic Header Configuration Register
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
                  | ( 0         << 6)    // Virtual channel ID
                  | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	021a      	lsls	r2, r3, #8
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x94>)
 8006808:	4013      	ands	r3, r2
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
 800680a:	4a05      	ldr	r2, [pc, #20]	; (8006820 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
                  | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
 800680c:	f043 0339 	orr.w	r3, r3, #57	; 0x39
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
 8006810:	66d3      	str	r3, [r2, #108]	; 0x6c
    }
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40016c00 	.word	0x40016c00
 8006824:	00ffff00 	.word	0x00ffff00

08006828 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>:

    //---------------------------------------------------------------
    void DisplayRefresh()
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
    {
      DSI->WCR |= DSI_WCR_LTDCEN;
 8006830:	4b06      	ldr	r3, [pc, #24]	; (800684c <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv+0x24>)
 8006832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006836:	4a05      	ldr	r2, [pc, #20]	; (800684c <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv+0x24>)
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    }
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40016c00 	.word	0x40016c00

08006850 <_ZN9EmbSysLib3Dev13ScreenGraphic8getWidthEv>:
                             Bitmap &bitmap );

    //---------------------------------------------------------------
    // Get Screen width
    // \return width
    WORD getWidth( void )
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
    {
      return( display.getWidth() );
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3340      	adds	r3, #64	; 0x40
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4610      	mov	r0, r2
 8006868:	4798      	blx	r3
 800686a:	4603      	mov	r3, r0
    }
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <_ZN9EmbSysLib3Dev13ScreenGraphic9getHeightEv>:

    //---------------------------------------------------------------
    // Get Screen height
    // \return height
    WORD getHeight( void )
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
    {
      return( display.getHeight() );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3344      	adds	r3, #68	; 0x44
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4610      	mov	r0, r2
 800688c:	4798      	blx	r3
 800688e:	4603      	mov	r3, r0
    }
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>:
  public:
    //---------------------------------------------------------------
    /*! Initialize a TaskManager
        \param timer Timer object
    */
    TaskManager( Timer &timer )
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
    : timer( timer )
 80068a2:	4a06      	ldr	r2, [pc, #24]	; (80068bc <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE+0x24>)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	605a      	str	r2, [r3, #4]
    {
    }
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	0800c5dc 	.word	0x0800c5dc

080068c0 <_ZN9EmbSysLib3Dev11TaskManager3addEPNS1_4TaskE>:
        a timer interrupt.
        \remark The update()-method of the TaskManager::Task may be 
        called immediately, so call this add()-method only when the constructor of the Task-object is completed.
        \param ptr Pointer to the TaskManager::Task object
    */
    virtual void add( Task *ptr )
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
    {
      timer.add( ptr );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3304      	adds	r3, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	4610      	mov	r0, r2
 80068dc:	4798      	blx	r3
    }
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <_ZN9EmbSysLib3Dev11TaskManager12getCycleTimeEv>:

    //---------------------------------------------------------------
    /*! Get cycle time of update() calls
        \return Cyycle in micro seconds (us)
    */
    virtual DWORD getCycleTime( void )
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
    {
      return( timer.getCycleTime() );
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4610      	mov	r0, r2
 80068fc:	4798      	blx	r3
 80068fe:	4603      	mov	r3, r0
    }
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <_ZN15myReportHandler8onReportEttb>:
*/

//*******************************************************************
class myReportHandler : public EmbSysLib::Std::Report::Handler
{
  virtual void onReport( const WORD code, const WORD module, const bool isFatal )
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4603      	mov	r3, r0
 8006918:	817b      	strh	r3, [r7, #10]
 800691a:	460b      	mov	r3, r1
 800691c:	813b      	strh	r3, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	71fb      	strb	r3, [r7, #7]
  {
    if( isFatal )
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d000      	beq.n	800692a <_ZN15myReportHandler8onReportEttb+0x22>
    {
      while( 1 );
 8006928:	e7fe      	b.n	8006928 <_ZN15myReportHandler8onReportEttb+0x20>
    }
    else
    {
    }
  }
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <_ZN15myReportHandlerC1Ev>:
class myReportHandler : public EmbSysLib::Std::Report::Handler
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4618      	mov	r0, r3
 8006944:	f7fc fde2 	bl	800350c <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>
 8006948:	4a03      	ldr	r2, [pc, #12]	; (8006958 <_ZN15myReportHandlerC1Ev+0x20>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	0800c5d0 	.word	0x0800c5d0

0800695c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh>:

    } Cmd_type;

  protected:
    //---------------------------------------------------------------
    DisplayGraphic_OTM8009A( Dsi_Mcu     &hwDSI,
 800695c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800695e:	b089      	sub	sp, #36	; 0x24
 8006960:	af04      	add	r7, sp, #16
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	70fb      	strb	r3, [r7, #3]
    : DisplayGraphic( ReportID_Hw::Module::DISPLAY_GRAPHIC_OTM8009A,
                      (orientation & LANDSCAPE)?lcd_x_size:lcd_y_size,
                      (orientation & LANDSCAPE)?lcd_y_size:lcd_x_size,
                      font,
                      zoom )
    , hwDSI( hwDSI )
 800696a:	68fc      	ldr	r4, [r7, #12]
                      (orientation & LANDSCAPE)?lcd_x_size:lcd_y_size,
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	f003 0301 	and.w	r3, r3, #1
    , hwDSI( hwDSI )
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x20>
 8006976:	f44f 7548 	mov.w	r5, #800	; 0x320
 800697a:	e001      	b.n	8006980 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x24>
 800697c:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
                      (orientation & LANDSCAPE)?lcd_y_size:lcd_x_size,
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	f003 0301 	and.w	r3, r3, #1
    , hwDSI( hwDSI )
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x34>
 800698a:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
 800698e:	e001      	b.n	8006994 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x38>
 8006990:	f44f 7648 	mov.w	r6, #800	; 0x320
 8006994:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006998:	9303      	str	r3, [sp, #12]
 800699a:	466b      	mov	r3, sp
 800699c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80069a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80069a6:	4633      	mov	r3, r6
 80069a8:	462a      	mov	r2, r5
 80069aa:	21b2      	movs	r1, #178	; 0xb2
 80069ac:	4620      	mov	r0, r4
 80069ae:	f7fd f841 	bl	8003a34 <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh>
 80069b2:	4a27      	ldr	r2, [pc, #156]	; (8006a50 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0xf4>)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	62da      	str	r2, [r3, #44]	; 0x2c
    {
      this->orientation = orientation;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	78fa      	ldrb	r2, [r7, #3]
 80069c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      if( orientation & LANDSCAPE )
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d008      	beq.n	80069e2 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x86>
      {
        Hsize = lcd_x_size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80069d6:	821a      	strh	r2, [r3, #16]
        Vsize = lcd_y_size;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80069de:	825a      	strh	r2, [r3, #18]
 80069e0:	e007      	b.n	80069f2 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x96>
      }
      else
      {
        Hsize = lcd_y_size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80069e8:	821a      	strh	r2, [r3, #16]
        Vsize = lcd_x_size;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80069f0:	825a      	strh	r2, [r3, #18]
      }

      ax = 0;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	865a      	strh	r2, [r3, #50]	; 0x32
      ay = 0;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	869a      	strh	r2, [r3, #52]	; 0x34
      aw = 0;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	86da      	strh	r2, [r3, #54]	; 0x36
      ah = 0;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	871a      	strh	r2, [r3, #56]	; 0x38
      xpos = 0;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	875a      	strh	r2, [r3, #58]	; 0x3a
      ypos = 0;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	879a      	strh	r2, [r3, #60]	; 0x3c

      // Reset LCD
      resetPin.setMode( Port::OutPP );
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
      resetPin.clr();
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
      System::delayMilliSec(20);
 8006a2e:	2014      	movs	r0, #20
 8006a30:	f7f9 fdf6 	bl	8000620 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>
      resetPin.set();
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
      System::delayMilliSec(20);
 8006a40:	2014      	movs	r0, #20
 8006a42:	f7f9 fded 	bl	8000620 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>
    }
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a50:	0800c574 	.word	0x0800c574

08006a54 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv>:
    hwDSI.writeShort( CMD_NOP, (cmd)&0xFF);        \
    hwDSI.writeLong( (BYTE*)data, sizeof(data)  ); }

//---------------------------------------------------------------
void DisplayGraphic_OTM8009A::init( )
{
 8006a54:	b5b0      	push	{r4, r5, r7, lr}
 8006a56:	b0e8      	sub	sp, #416	; 0x1a0
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a5e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a62:	6018      	str	r0, [r3, #0]
                                                       // Enable CMD2 to access vendor specific commands
  WRITE_CUSTOMER_ARRAY( CMD2_ENA1,   0x80,0x09,0x01 ); // Enter in command 2 mode and set EXTC to enable address shift function (0x00)
 8006a64:	4bbc      	ldr	r3, [pc, #752]	; (8006d58 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x304>)
 8006a66:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006a6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4798      	blx	r3
 8006a8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8006aae:	2204      	movs	r2, #4
 8006ab0:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( CMD2_ENA2,   0x80,0x09      ); // Enter ORISE Command 2: Shift address to 0x80
 8006ab2:	4aaa      	ldr	r2, [pc, #680]	; (8006d5c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x308>)
 8006ab4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	4611      	mov	r1, r2
 8006abc:	8019      	strh	r1, [r3, #0]
 8006abe:	3302      	adds	r3, #2
 8006ac0:	0c12      	lsrs	r2, r2, #16
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ac8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ad0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ad4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4798      	blx	r3
 8006ae6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006aea:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006af2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006af6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3304      	adds	r3, #4
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8006b08:	2203      	movs	r2, #3
 8006b0a:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_PCH_CTRL, 0x30           ); // SD_PT: Source output level during porch and non-display area to GND
 8006b0c:	f243 03c4 	movw	r3, #12484	; 0x30c4
 8006b10:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
 8006b14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b20:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b24:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2280      	movs	r2, #128	; 0x80
 8006b32:	2100      	movs	r1, #0
 8006b34:	4798      	blx	r3
 8006b36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b3a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b42:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b46:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3304      	adds	r3, #4
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8006b58:	2202      	movs	r2, #2
 8006b5a:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( NO_DOC1,     0x40           ); // undocumented!
 8006b5c:	f244 03c4 	movw	r3, #16580	; 0x40c4
 8006b60:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 8006b64:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b68:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b70:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	228a      	movs	r2, #138	; 0x8a
 8006b82:	2100      	movs	r1, #0
 8006b84:	4798      	blx	r3
 8006b86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b8a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b92:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b96:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8006ba8:	2202      	movs	r2, #2
 8006baa:	4798      	blx	r3

  System::delayMilliSec(10);
 8006bac:	200a      	movs	r0, #10
 8006bae:	f7f9 fd37 	bl	8000620 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

  WRITE_CUSTOMER_ARRAY( PWR_CTRL4 + 1, 0xA9); // gvdd_en_test: enable GVDD test mode
 8006bb2:	f64a 13c5 	movw	r3, #43461	; 0xa9c5
 8006bb6:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8006bba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006bbe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006bc6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006bca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	22b1      	movs	r2, #177	; 0xb1
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4798      	blx	r3
 8006bdc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006be0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006be8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006bec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 8006bfe:	2202      	movs	r2, #2
 8006c00:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 1, 0x34); // pump 4 vgh voltage: 15.0v down to 13.0v
 8006c02:	f243 43c5 	movw	r3, #13509	; 0x34c5
 8006c06:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
 8006c0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c0e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c16:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c1a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2291      	movs	r2, #145	; 0x91
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4798      	blx	r3
 8006c2c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c38:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3304      	adds	r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8006c4e:	2202      	movs	r2, #2
 8006c50:	4798      	blx	r3
                                              // pump 5 vgh voltage: -12.0v downto -9.0v
  WRITE_CUSTOMER_ARRAY( P_DRV_M,       0x50); // Column inversion
 8006c52:	f245 03c0 	movw	r3, #20672	; 0x50c0
 8006c56:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
 8006c5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c5e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c66:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c6a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	22b4      	movs	r2, #180	; 0xb4
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4798      	blx	r3
 8006c7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( VCOMDC,        0x4E); // VCOM Voltage: -1.0000v downto -1.2625v
 8006ca2:	f644 63d9 	movw	r3, #20185	; 0x4ed9
 8006ca6:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
 8006caa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006cb6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4798      	blx	r3
 8006ccc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cd0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006cd8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cdc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8006cee:	2202      	movs	r2, #2
 8006cf0:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( OSC_ADJ,       0x66); // Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz)
 8006cf2:	f246 63c1 	movw	r3, #26305	; 0x66c1
 8006cf6:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
 8006cfa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cfe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d06:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2281      	movs	r2, #129	; 0x81
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4798      	blx	r3
 8006d1c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d28:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3304      	adds	r3, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( RGB_VIDEO_SET, 0x08); // Video mode internal
 8006d42:	f640 03c1 	movw	r3, #2241	; 0x8c1
 8006d46:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
 8006d4a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d4e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	e004      	b.n	8006d60 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x30c>
 8006d56:	bf00      	nop
 8006d58:	010980ff 	.word	0x010980ff
 8006d5c:	0800b710 	.word	0x0800b710
 8006d60:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d62:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d66:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	22a1      	movs	r2, #161	; 0xa1
 8006d74:	2100      	movs	r1, #0
 8006d76:	4798      	blx	r3
 8006d78:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d84:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3304      	adds	r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 2, 0x01); // pump 4&5 x6: ONLY VALID when PUMP4_EN_ASDM_HV = "0"
 8006d9e:	f240 13c5 	movw	r3, #453	; 0x1c5
 8006da2:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
 8006da6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006daa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006db2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006db6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2292      	movs	r2, #146	; 0x92
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4798      	blx	r3
 8006dc8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006dcc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006dd4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006dd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3304      	adds	r3, #4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 8006dea:	2202      	movs	r2, #2
 8006dec:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 5, 0x36); // pump4 clock ratio: 1/2 line
 8006dee:	f243 63c5 	movw	r3, #14021	; 0x36c5
 8006df2:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
 8006df6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006dfa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e06:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2295      	movs	r2, #149	; 0x95
 8006e14:	2100      	movs	r1, #0
 8006e16:	4798      	blx	r3
 8006e18:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e24:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3304      	adds	r3, #4
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GVDDSET,       0x79,  // GVDD/NGVDD settings
 8006e3e:	4abb      	ldr	r2, [pc, #748]	; (800712c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6d8>)
 8006e40:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	4611      	mov	r1, r2
 8006e48:	8019      	strh	r1, [r3, #0]
 8006e4a:	3302      	adds	r3, #2
 8006e4c:	0c12      	lsrs	r2, r2, #16
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e54:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e5c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4798      	blx	r3
 8006e72:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e76:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8006e94:	2203      	movs	r2, #3
 8006e96:	4798      	blx	r3
                                       0x79);
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 4, 0x33); // Rewrite the default value !
 8006e98:	f243 33c5 	movw	r3, #13253	; 0x33c5
 8006e9c:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
 8006ea0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ea4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006eac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006eb0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2294      	movs	r2, #148	; 0x94
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4798      	blx	r3
 8006ec2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ec6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ece:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ed2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3304      	adds	r3, #4
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_CTRL + 1,   0x1B); // Panel display timing Setting 3
 8006ee8:	f44f 53de 	mov.w	r3, #7104	; 0x1bc0
 8006eec:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8006ef0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ef4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006efc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	22a3      	movs	r2, #163	; 0xa3
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4798      	blx	r3
 8006f12:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f16:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f1e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f22:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8006f34:	2202      	movs	r2, #2
 8006f36:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL1 + 2, 0x83); // Power control 1
 8006f38:	f248 33c5 	movw	r3, #33733	; 0x83c5
 8006f3c:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
 8006f40:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f4c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2282      	movs	r2, #130	; 0x82
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4798      	blx	r3
 8006f62:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f66:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f6e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f72:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8006f84:	2202      	movs	r2, #2
 8006f86:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_PCH_CTRL +1,0x83); // Source driver precharge
 8006f88:	f248 33c4 	movw	r3, #33732	; 0x83c4
 8006f8c:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8006f90:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006fa0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2281      	movs	r2, #129	; 0x81
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4798      	blx	r3
 8006fb2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006fb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fbe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006fc2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( RGB_VIDEO_SET, 0x0E);
 8006fd8:	f640 63c1 	movw	r3, #3777	; 0xec1
 8006fdc:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 8006fe0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006fe4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ff0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	22a1      	movs	r2, #161	; 0xa1
 8006ffe:	2100      	movs	r1, #0
 8007000:	4798      	blx	r3
 8007002:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007006:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800700e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007012:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3304      	adds	r3, #4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8007024:	2202      	movs	r2, #2
 8007026:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANSET,        0x00,0x01);
 8007028:	4a41      	ldr	r2, [pc, #260]	; (8007130 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6dc>)
 800702a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	4611      	mov	r1, r2
 8007032:	8019      	strh	r1, [r3, #0]
 8007034:	3302      	adds	r3, #2
 8007036:	0c12      	lsrs	r2, r2, #16
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800703e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007046:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800704a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	22a6      	movs	r2, #166	; 0xa6
 8007058:	2100      	movs	r1, #0
 800705a:	4798      	blx	r3
 800705c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007060:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007068:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800706c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3304      	adds	r3, #4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 800707e:	2203      	movs	r2, #3
 8007080:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( GOAVST,        0x85,0x01,0x00,0x84,0x01,0x00);
 8007082:	4a2c      	ldr	r2, [pc, #176]	; (8007134 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e0>)
 8007084:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800708c:	6018      	str	r0, [r3, #0]
 800708e:	3304      	adds	r3, #4
 8007090:	8019      	strh	r1, [r3, #0]
 8007092:	3302      	adds	r3, #2
 8007094:	0c0a      	lsrs	r2, r1, #16
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800709c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070a4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2280      	movs	r2, #128	; 0x80
 80070b6:	2100      	movs	r1, #0
 80070b8:	4798      	blx	r3
 80070ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070c6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3304      	adds	r3, #4
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80070dc:	2207      	movs	r2, #7
 80070de:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GOACLKA1,      0x18,0x04,0x03,0x39,0x00,0x00,0x00,0x18,0x03,0x03,0x3A,0x00,0x00,0x00);
 80070e0:	4b15      	ldr	r3, [pc, #84]	; (8007138 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e4>)
 80070e2:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 80070e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070e8:	c407      	stmia	r4!, {r0, r1, r2}
 80070ea:	8023      	strh	r3, [r4, #0]
 80070ec:	3402      	adds	r4, #2
 80070ee:	0c1b      	lsrs	r3, r3, #16
 80070f0:	7023      	strb	r3, [r4, #0]
 80070f2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070f6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070fe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007102:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	22a0      	movs	r2, #160	; 0xa0
 8007110:	2100      	movs	r1, #0
 8007112:	4798      	blx	r3
 8007114:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007118:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007120:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007124:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007128:	e008      	b.n	800713c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e8>
 800712a:	bf00      	nop
 800712c:	0800b714 	.word	0x0800b714
 8007130:	0800b718 	.word	0x0800b718
 8007134:	0800b71c 	.word	0x0800b71c
 8007138:	0800b724 	.word	0x0800b724
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3304      	adds	r3, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 800714a:	220f      	movs	r2, #15
 800714c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GOACLKA3,      0x18,0x02,0x03,0x3B,0x00,0x00,0x00,0x18,0x01,0x03,0x3C,0x00,0x00,0x00);
 800714e:	4bb7      	ldr	r3, [pc, #732]	; (800742c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9d8>)
 8007150:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8007154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007156:	c407      	stmia	r4!, {r0, r1, r2}
 8007158:	8023      	strh	r3, [r4, #0]
 800715a:	3402      	adds	r4, #2
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	7023      	strb	r3, [r4, #0]
 8007160:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007164:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800716c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007170:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	22b0      	movs	r2, #176	; 0xb0
 800717e:	2100      	movs	r1, #0
 8007180:	4798      	blx	r3
 8007182:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007186:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800718e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007192:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3304      	adds	r3, #4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80071a4:	220f      	movs	r2, #15
 80071a6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GOAECLK,       0x01,0x01,0x20,0x20,0x00,0x00,0x01,0x02,0x00,0x00);
 80071a8:	4aa1      	ldr	r2, [pc, #644]	; (8007430 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9dc>)
 80071aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80071ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80071b0:	c303      	stmia	r3!, {r0, r1}
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	3302      	adds	r3, #2
 80071b6:	0c12      	lsrs	r2, r2, #16
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80071be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071c6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80071ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	22c0      	movs	r2, #192	; 0xc0
 80071d8:	2100      	movs	r1, #0
 80071da:	4798      	blx	r3
 80071dc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80071e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80071ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3304      	adds	r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80071fe:	220b      	movs	r2, #11
 8007200:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( NO_DOC2,       0x00); // undocumented!
 8007202:	23cf      	movs	r3, #207	; 0xcf
 8007204:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
 8007208:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800720c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007214:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007218:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	22d0      	movs	r2, #208	; 0xd0
 8007226:	2100      	movs	r1, #0
 8007228:	4798      	blx	r3
 800722a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800722e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007236:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800723a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3304      	adds	r3, #4
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800724c:	2202      	movs	r2, #2
 800724e:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PANCTRLSET1,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8007250:	4a78      	ldr	r2, [pc, #480]	; (8007434 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e0>)
 8007252:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007256:	ca07      	ldmia	r2, {r0, r1, r2}
 8007258:	c303      	stmia	r3!, {r0, r1}
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	3302      	adds	r3, #2
 800725e:	0c12      	lsrs	r2, r2, #16
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007266:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800726e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007272:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2280      	movs	r2, #128	; 0x80
 8007280:	2100      	movs	r1, #0
 8007282:	4798      	blx	r3
 8007284:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007288:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007290:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007294:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3304      	adds	r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80072a6:	220b      	movs	r2, #11
 80072a8:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET2,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80072aa:	4b63      	ldr	r3, [pc, #396]	; (8007438 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e4>)
 80072ac:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80072b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80072b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80072ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80072c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80072c6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2290      	movs	r2, #144	; 0x90
 80072d4:	2100      	movs	r1, #0
 80072d6:	4798      	blx	r3
 80072d8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80072dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80072e4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80072e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3304      	adds	r3, #4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80072fa:	2210      	movs	r2, #16
 80072fc:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET3,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80072fe:	4b4e      	ldr	r3, [pc, #312]	; (8007438 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e4>)
 8007300:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8007304:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800730a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800730e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007316:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800731a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	22a0      	movs	r2, #160	; 0xa0
 8007328:	2100      	movs	r1, #0
 800732a:	4798      	blx	r3
 800732c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007330:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007338:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800733c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3304      	adds	r3, #4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800734e:	2210      	movs	r2, #16
 8007350:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET4,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8007352:	4a38      	ldr	r2, [pc, #224]	; (8007434 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e0>)
 8007354:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007358:	ca07      	ldmia	r2, {r0, r1, r2}
 800735a:	c303      	stmia	r3!, {r0, r1}
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	3302      	adds	r3, #2
 8007360:	0c12      	lsrs	r2, r2, #16
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007368:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007370:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007374:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	22b0      	movs	r2, #176	; 0xb0
 8007382:	2100      	movs	r1, #0
 8007384:	4798      	blx	r3
 8007386:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800738a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007392:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007396:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3304      	adds	r3, #4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80073a8:	220b      	movs	r2, #11
 80073aa:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET5,   0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80073ac:	4b23      	ldr	r3, [pc, #140]	; (800743c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e8>)
 80073ae:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80073b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80073b8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80073bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80073c4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80073c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	22c0      	movs	r2, #192	; 0xc0
 80073d6:	2100      	movs	r1, #0
 80073d8:	4798      	blx	r3
 80073da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80073de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80073e6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80073ea:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3304      	adds	r3, #4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80073fc:	2210      	movs	r2, #16
 80073fe:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET6,   0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00);
 8007400:	4b0f      	ldr	r3, [pc, #60]	; (8007440 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9ec>)
 8007402:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8007406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800740c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007410:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007418:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800741c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	22d0      	movs	r2, #208	; 0xd0
 800742a:	e00b      	b.n	8007444 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9f0>
 800742c:	0800b734 	.word	0x0800b734
 8007430:	0800b744 	.word	0x0800b744
 8007434:	0800b750 	.word	0x0800b750
 8007438:	0800b75c 	.word	0x0800b75c
 800743c:	0800b76c 	.word	0x0800b76c
 8007440:	0800b77c 	.word	0x0800b77c
 8007444:	2100      	movs	r1, #0
 8007446:	4798      	blx	r3
 8007448:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800744c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007454:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007458:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3304      	adds	r3, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800746a:	2210      	movs	r2, #16
 800746c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET7,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 800746e:	4aba      	ldr	r2, [pc, #744]	; (8007758 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd04>)
 8007470:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007474:	ca07      	ldmia	r2, {r0, r1, r2}
 8007476:	c303      	stmia	r3!, {r0, r1}
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	3302      	adds	r3, #2
 800747c:	0c12      	lsrs	r2, r2, #16
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007484:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800748c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007490:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	22e0      	movs	r2, #224	; 0xe0
 800749e:	2100      	movs	r1, #0
 80074a0:	4798      	blx	r3
 80074a2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80074a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80074ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80074b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3304      	adds	r3, #4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80074c4:	220b      	movs	r2, #11
 80074c6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET8,   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
 80074c8:	4aa4      	ldr	r2, [pc, #656]	; (800775c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd08>)
 80074ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80074ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80074d0:	c303      	stmia	r3!, {r0, r1}
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	3302      	adds	r3, #2
 80074d6:	0c12      	lsrs	r2, r2, #16
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80074de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80074e6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80074ea:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	22f0      	movs	r2, #240	; 0xf0
 80074f8:	2100      	movs	r1, #0
 80074fa:	4798      	blx	r3
 80074fc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007500:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007508:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800750c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3304      	adds	r3, #4
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800751e:	220b      	movs	r2, #11
 8007520:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D1,       0x00,0x26,0x09,0x0B,0x01,0x25,0x00,0x00,0x00,0x00);
 8007522:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007526:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800752a:	4a8d      	ldr	r2, [pc, #564]	; (8007760 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd0c>)
 800752c:	ca07      	ldmia	r2, {r0, r1, r2}
 800752e:	c303      	stmia	r3!, {r0, r1}
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	3302      	adds	r3, #2
 8007534:	0c12      	lsrs	r2, r2, #16
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800753c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007544:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007548:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2280      	movs	r2, #128	; 0x80
 8007556:	2100      	movs	r1, #0
 8007558:	4798      	blx	r3
 800755a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800755e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007566:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800756a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3304      	adds	r3, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800757c:	220b      	movs	r2, #11
 800757e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D2,       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x0A,0x0C,0x02);
 8007580:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007584:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007588:	4a76      	ldr	r2, [pc, #472]	; (8007764 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd10>)
 800758a:	461c      	mov	r4, r3
 800758c:	4613      	mov	r3, r2
 800758e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007594:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007598:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80075a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2290      	movs	r2, #144	; 0x90
 80075b2:	2100      	movs	r1, #0
 80075b4:	4798      	blx	r3
 80075b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80075c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075c6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3304      	adds	r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80075d8:	2210      	movs	r2, #16
 80075da:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D3,       0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80075dc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80075e4:	4a60      	ldr	r2, [pc, #384]	; (8007768 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd14>)
 80075e6:	461c      	mov	r4, r3
 80075e8:	4613      	mov	r3, r2
 80075ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80075f0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80075fc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007600:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	22a0      	movs	r2, #160	; 0xa0
 800760e:	2100      	movs	r1, #0
 8007610:	4798      	blx	r3
 8007612:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007616:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800761e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007622:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3304      	adds	r3, #4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007634:	2210      	movs	r2, #16
 8007636:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U1,       0x00,0x25,0x0C,0x0A,0x02,0x26,0x00,0x00,0x00,0x00);
 8007638:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800763c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007640:	4a4a      	ldr	r2, [pc, #296]	; (800776c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd18>)
 8007642:	ca07      	ldmia	r2, {r0, r1, r2}
 8007644:	c303      	stmia	r3!, {r0, r1}
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	3302      	adds	r3, #2
 800764a:	0c12      	lsrs	r2, r2, #16
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007652:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800765a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800765e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	22b0      	movs	r2, #176	; 0xb0
 800766c:	2100      	movs	r1, #0
 800766e:	4798      	blx	r3
 8007670:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007674:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800767c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007680:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3304      	adds	r3, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8007692:	220b      	movs	r2, #11
 8007694:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U2,       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,0x0B,0x09,0x01);
 8007696:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800769a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800769e:	4a34      	ldr	r2, [pc, #208]	; (8007770 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd1c>)
 80076a0:	461c      	mov	r4, r3
 80076a2:	4613      	mov	r3, r2
 80076a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80076aa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076ae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80076b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	22c0      	movs	r2, #192	; 0xc0
 80076c8:	2100      	movs	r1, #0
 80076ca:	4798      	blx	r3
 80076cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80076d8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3304      	adds	r3, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80076ee:	2210      	movs	r2, #16
 80076f0:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U3,       0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80076f2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80076fa:	4a1e      	ldr	r2, [pc, #120]	; (8007774 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd20>)
 80076fc:	461c      	mov	r4, r3
 80076fe:	4613      	mov	r3, r2
 8007700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007702:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007706:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800770a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007712:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007716:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	22d0      	movs	r2, #208	; 0xd0
 8007724:	2100      	movs	r1, #0
 8007726:	4798      	blx	r3
 8007728:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800772c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007734:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007738:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3304      	adds	r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800774a:	2210      	movs	r2, #16
 800774c:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PWR_CTRL1 + 1, 0x66); // Pump 1 min and max DM
 800774e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007752:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007756:	e00f      	b.n	8007778 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd24>
 8007758:	0800b750 	.word	0x0800b750
 800775c:	0800b78c 	.word	0x0800b78c
 8007760:	0800b798 	.word	0x0800b798
 8007764:	0800b7a4 	.word	0x0800b7a4
 8007768:	0800b7b4 	.word	0x0800b7b4
 800776c:	0800b7c4 	.word	0x0800b7c4
 8007770:	0800b7d0 	.word	0x0800b7d0
 8007774:	0800b7e0 	.word	0x0800b7e0
 8007778:	f246 62c5 	movw	r2, #26309	; 0x66c5
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007782:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800778a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800778e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2281      	movs	r2, #129	; 0x81
 800779c:	2100      	movs	r1, #0
 800779e:	4798      	blx	r3
 80077a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80077ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3304      	adds	r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80077c2:	2202      	movs	r2, #2
 80077c4:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PWM_PARA3,       32); // PWM-Freq, DBF=4,141 kHz (if PWM_FREQ_SEL[1:0]=01)
 80077c6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80077ce:	f242 02c6 	movw	r2, #8390	; 0x20c6
 80077d2:	801a      	strh	r2, [r3, #0]
 80077d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80077e0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	22b1      	movs	r2, #177	; 0xb1
 80077f2:	2100      	movs	r1, #0
 80077f4:	4798      	blx	r3
 80077f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007802:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007806:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3304      	adds	r3, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8007818:	2202      	movs	r2, #2
 800781a:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( NO_DOC3,       0x06); // undocumented, but important
 800781c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007820:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8007824:	f240 62f5 	movw	r2, #1781	; 0x6f5
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800782e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007836:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800783a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	22b6      	movs	r2, #182	; 0xb6
 8007848:	2100      	movs	r1, #0
 800784a:	4798      	blx	r3
 800784c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007850:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007858:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800785c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3304      	adds	r3, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800786e:	2202      	movs	r2, #2
 8007870:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( CMD2_ENA1,     0xFF,  // Exit CMD2 mode
 8007872:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007876:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800787a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007884:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800788c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007890:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2200      	movs	r2, #0
 800789e:	2100      	movs	r1, #0
 80078a0:	4798      	blx	r3
 80078a2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80078ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3304      	adds	r3, #4
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80078c4:	2204      	movs	r2, #4
 80078c6:	4798      	blx	r3
                                       0xFF,0xFF);

  WRITE_SYS_CMD( CMD_NOP, 0x00 ); // NOP - goes back to DCS std command ?
 80078c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078cc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80078d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2200      	movs	r2, #0
 80078e6:	2100      	movs	r1, #0
 80078e8:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( GMCT2_2P,  0x00,0x09,0x0F,0x0E,0x07,0x10,0x0B,0x0A,0x04,0x07,0x0B,0x08,0x0F,0x10,0x0A,0x01);
 80078ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80078f2:	4a62      	ldr	r2, [pc, #392]	; (8007a7c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1028>)
 80078f4:	461c      	mov	r4, r3
 80078f6:	4615      	mov	r5, r2
 80078f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	7023      	strb	r3, [r4, #0]
 8007900:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007904:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800790c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007910:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2200      	movs	r2, #0
 800791e:	2100      	movs	r1, #0
 8007920:	4798      	blx	r3
 8007922:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007926:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800792e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007932:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3304      	adds	r3, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007944:	2211      	movs	r2, #17
 8007946:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GMCT2_2N,  0x00,0x09,0x0F,0x0E,0x07,0x10,0x0B,0x0A,0x04,0x07,0x0B,0x08,0x0F,0x10,0x0A,0x01);
 8007948:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800794c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007950:	4a4b      	ldr	r2, [pc, #300]	; (8007a80 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x102c>)
 8007952:	461c      	mov	r4, r3
 8007954:	4615      	mov	r5, r2
 8007956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800795a:	682b      	ldr	r3, [r5, #0]
 800795c:	7023      	strb	r3, [r4, #0]
 800795e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007962:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800796a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800796e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2200      	movs	r2, #0
 800797c:	2100      	movs	r1, #0
 800797e:	4798      	blx	r3
 8007980:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007984:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800798c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007990:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3304      	adds	r3, #4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f107 011c 	add.w	r1, r7, #28
 80079a2:	2211      	movs	r2, #17
 80079a4:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_SLPOUT, 0x00 ); // Send Sleep Out command to display : no parameter
 80079a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80079b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	2111      	movs	r1, #17
 80079c6:	4798      	blx	r3

  System::delayMilliSec(120);
 80079c8:	2078      	movs	r0, #120	; 0x78
 80079ca:	f7f8 fe29 	bl	8000620 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

  WRITE_SYS_CMD( CMD_COLMOD, 0x77 ); // RGB888, MCU: 24bit/pixel, RGB:24bit/pixel,1-times
 80079ce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079d2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80079da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2277      	movs	r2, #119	; 0x77
 80079ec:	213a      	movs	r1, #58	; 0x3a
 80079ee:	4798      	blx	r3


  switch( orientation )
 80079f0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d040      	beq.n	8007a84 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1030>
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	dc03      	bgt.n	8007a0e <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xfba>
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d025      	beq.n	8007a56 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1002>
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d011      	beq.n	8007a32 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xfde>
  {
    default:                                      //MY     MX     MV
    case PORTRAIT_0:    WRITE_SYS_CMD( CMD_MADCTR, (0<<7)|(0<<6)|(0<<5) ); break;
 8007a0e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a1a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a1e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2136      	movs	r1, #54	; 0x36
 8007a2e:	4798      	blx	r3
 8007a30:	e03a      	b.n	8007aa8 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
    case PORTRAIT_180:  WRITE_SYS_CMD( CMD_MADCTR, (1<<7)|(1<<6)|(0<<5) ); break;
 8007a32:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a36:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a3e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a42:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	22c0      	movs	r2, #192	; 0xc0
 8007a50:	2136      	movs	r1, #54	; 0x36
 8007a52:	4798      	blx	r3
 8007a54:	e028      	b.n	8007aa8 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
    case LANDSCAPE_90:  WRITE_SYS_CMD( CMD_MADCTR, (0<<7)|(1<<6)|(1<<5) ); break;
 8007a56:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a5a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a62:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a66:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2260      	movs	r2, #96	; 0x60
 8007a74:	2136      	movs	r1, #54	; 0x36
 8007a76:	4798      	blx	r3
 8007a78:	e016      	b.n	8007aa8 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
 8007a7a:	bf00      	nop
 8007a7c:	0800b7f0 	.word	0x0800b7f0
 8007a80:	0800b804 	.word	0x0800b804
    case LANDSCAPE_270:  WRITE_SYS_CMD( CMD_MADCTR, (1<<7)|(0<<6)|(1<<5) ); break;
 8007a84:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a90:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	22a0      	movs	r2, #160	; 0xa0
 8007aa2:	2136      	movs	r1, #54	; 0x36
 8007aa4:	4798      	blx	r3
 8007aa6:	bf00      	nop
  }
                           // Start-Addr,  End-Addr
  WRITE_SYS_ARRAY( CMD_CASET, 0x00, 0x00,  (BYTE)((Hsize-1)>>8), (BYTE)((Hsize-1)&0xFF) );
 8007aa8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007aac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	711a      	strb	r2, [r3, #4]
 8007ab6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007aba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007abe:	222a      	movs	r2, #42	; 0x2a
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ac6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	8a1b      	ldrh	r3, [r3, #16]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	121b      	asrs	r3, r3, #8
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ad8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007adc:	70da      	strb	r2, [r3, #3]
 8007ade:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ae2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	8a1b      	ldrh	r3, [r3, #16]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007af4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007af8:	711a      	strb	r2, [r3, #4]
 8007afa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007afe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007b06:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3304      	adds	r3, #4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f107 0114 	add.w	r1, r7, #20
 8007b1c:	2205      	movs	r2, #5
 8007b1e:	4798      	blx	r3
  WRITE_SYS_ARRAY( CMD_PASET, 0x00, 0x00,  (BYTE)((Vsize-1)>>8), (BYTE)((Vsize-1)&0xFF) );
 8007b20:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b24:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	711a      	strb	r2, [r3, #4]
 8007b2e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b32:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b36:	222b      	movs	r2, #43	; 0x2b
 8007b38:	701a      	strb	r2, [r3, #0]
 8007b3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	8a5b      	ldrh	r3, [r3, #18]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	121b      	asrs	r3, r3, #8
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b50:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b54:	70da      	strb	r2, [r3, #3]
 8007b56:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b5a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	8a5b      	ldrh	r3, [r3, #18]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b6c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b70:	711a      	strb	r2, [r3, #4]
 8007b72:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b76:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007b7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f107 010c 	add.w	r1, r7, #12
 8007b94:	2205      	movs	r2, #5
 8007b96:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_WRDISBV,  0x7F ); // Display Brightness: medium
 8007b98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007ba4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ba8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	227f      	movs	r2, #127	; 0x7f
 8007bb6:	2151      	movs	r1, #81	; 0x51
 8007bb8:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_WRCTRLD,  0x2C ); // Control Display: Brightness Control Block: On,
 8007bba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bbe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007bc6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	222c      	movs	r2, #44	; 0x2c
 8007bd8:	2153      	movs	r1, #83	; 0x53
 8007bda:	4798      	blx	r3
                                       //                  Display Dimming: on
                                       //                  BackLight: on
  WRITE_SYS_CMD( CMD_WRCABC,   0x02 ); // Content Adaptive Brightness: Still Picture
 8007bdc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007be0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007be8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	2155      	movs	r1, #85	; 0x55
 8007bfc:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_WRCABCMB, 0x7F ); // CABC Minimum Brightness: maximum
 8007bfe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007c0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c0e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	227f      	movs	r2, #127	; 0x7f
 8007c1c:	215e      	movs	r1, #94	; 0x5e
 8007c1e:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_DISPOFF, 0x00 ); // Display Off
 8007c20:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c24:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007c2c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2128      	movs	r1, #40	; 0x28
 8007c40:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_NOP,    0x00 ); // NOP command
 8007c42:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c46:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007c4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2100      	movs	r1, #0
 8007c62:	4798      	blx	r3
}
 8007c64:	bf00      	nop
 8007c66:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8007c6e:	bf00      	nop

08007c70 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh>:
//
// DisplayGraphic_OTM8009Aram
//
//*******************************************************************
//---------------------------------------------------------------
DisplayGraphic_OTM8009Aram::DisplayGraphic_OTM8009Aram( Dsi_Mcu     &hwDSI,
 8007c70:	b5b0      	push	{r4, r5, r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af04      	add	r7, sp, #16
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	70fb      	strb	r3, [r7, #3]
                                                        Port::Pin   &resetPin,
                                                        Orientation  orientation,
                                                        Font         font,
                                                        BYTE         zoom )

: DisplayGraphic_OTM8009A( hwDSI, resetPin, orientation, font, zoom )
 8007c7e:	68fc      	ldr	r4, [r7, #12]
 8007c80:	78fd      	ldrb	r5, [r7, #3]
 8007c82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c86:	9303      	str	r3, [sp, #12]
 8007c88:	466b      	mov	r3, sp
 8007c8a:	f107 0220 	add.w	r2, r7, #32
 8007c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007c94:	462b      	mov	r3, r5
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7fe fe5e 	bl	800695c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh>
 8007ca0:	4a18      	ldr	r2, [pc, #96]	; (8007d04 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh+0x94>)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	601a      	str	r2, [r3, #0]
{
   this->hwDSI.Init( Hsize, Vsize, true );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	8a19      	ldrh	r1, [r3, #16]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8a5a      	ldrh	r2, [r3, #18]
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f7fe fc34 	bl	8006520 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb>

  DisplayGraphic_OTM8009A::init( );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe feca 	bl	8006a54 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv>

  ptrStart = (__IO uint16_t *)this->hwDSI.startLTDC( Hsize, Vsize );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8a19      	ldrh	r1, [r3, #16]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8a5b      	ldrh	r3, [r3, #18]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	f7fe fd19 	bl	8006704 <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	645a      	str	r2, [r3, #68]	; 0x44
  ptr      = ptrStart;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	641a      	str	r2, [r3, #64]	; 0x40

  WRITE_SYS_CMD( CMD_DISPON, 0x00);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2129      	movs	r1, #41	; 0x29
 8007cec:	68b8      	ldr	r0, [r7, #8]
 8007cee:	4798      	blx	r3
  this->hwDSI.DisplayRefresh();
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fd97 	bl	8006828 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>
}
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bdb0      	pop	{r4, r5, r7, pc}
 8007d04:	0800c518 	.word	0x0800c518

08007d08 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram7refreshEv>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::refresh( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  hwDSI.DisplayRefresh();
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fd87 	bl	8006828 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::clear( void )
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  ptr = ptrStart;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	641a      	str	r2, [r3, #64]	; 0x40
  __IO uint16_t *ptrEnd = ptr + Hsize*Vsize*sizeof(uint16_t);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	8a1b      	ldrh	r3, [r3, #16]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	8a5b      	ldrh	r3, [r3, #18]
 8007d40:	fb01 f303 	mul.w	r3, r1, r3
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
  while( ptr < ptrEnd )
 8007d4a:	e007      	b.n	8007d5c <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv+0x3a>
    *ptr++ = BackColor;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	1c99      	adds	r1, r3, #2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6411      	str	r1, [r2, #64]	; 0x40
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8007d5a:	801a      	strh	r2, [r3, #0]
  while( ptr < ptrEnd )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d8f2      	bhi.n	8007d4c <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv+0x2a>
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram7setAreaEtttt>:
//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setArea( WORD x,
                                          WORD y,
                                          WORD w,
                                          WORD h )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	4611      	mov	r1, r2
 8007d80:	461a      	mov	r2, r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	817b      	strh	r3, [r7, #10]
 8007d86:	460b      	mov	r3, r1
 8007d88:	813b      	strh	r3, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	80fb      	strh	r3, [r7, #6]
  ax = x;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	897a      	ldrh	r2, [r7, #10]
 8007d92:	865a      	strh	r2, [r3, #50]	; 0x32
  ay = y;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	893a      	ldrh	r2, [r7, #8]
 8007d98:	869a      	strh	r2, [r3, #52]	; 0x34
  aw = w;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	88fa      	ldrh	r2, [r7, #6]
 8007d9e:	86da      	strh	r2, [r3, #54]	; 0x36
  ah = h;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8b3a      	ldrh	r2, [r7, #24]
 8007da4:	871a      	strh	r2, [r3, #56]	; 0x38
  xpos   = ax;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	875a      	strh	r2, [r3, #58]	; 0x3a
  ypos   = ay*Hsize;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8a1b      	ldrh	r3, [r3, #16]
 8007db6:	fb12 f303 	smulbb	r3, r2, r3
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  offset = (DWORD)y*Hsize + x;
 8007dc0:	893b      	ldrh	r3, [r7, #8]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	8a12      	ldrh	r2, [r2, #16]
 8007dc6:	fb03 f202 	mul.w	r2, r3, r2
 8007dca:	897b      	ldrh	r3, [r7, #10]
 8007dcc:	441a      	add	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	649a      	str	r2, [r3, #72]	; 0x48

  ptr = ptrStart + offset;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	441a      	add	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEttt>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setPixel( WORD color,
                                           WORD x,
                                           WORD y )
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	4608      	mov	r0, r1
 8007df8:	4611      	mov	r1, r2
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	817b      	strh	r3, [r7, #10]
 8007e00:	460b      	mov	r3, r1
 8007e02:	813b      	strh	r3, [r7, #8]
 8007e04:	4613      	mov	r3, r2
 8007e06:	80fb      	strh	r3, [r7, #6]
   ptr = ptrStart + (DWORD)y*Hsize + x;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	68f9      	ldr	r1, [r7, #12]
 8007e10:	8a09      	ldrh	r1, [r1, #16]
 8007e12:	fb03 f101 	mul.w	r1, r3, r1
 8007e16:	893b      	ldrh	r3, [r7, #8]
 8007e18:	440b      	add	r3, r1
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	441a      	add	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40
  *ptr = color;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	897a      	ldrh	r2, [r7, #10]
 8007e28:	801a      	strh	r2, [r3, #0]
}
 8007e2a:	bf00      	nop
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEt>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setPixel( WORD color )
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	807b      	strh	r3, [r7, #2]
  *ptr++ = color;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	1c99      	adds	r1, r3, #2
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6411      	str	r1, [r2, #64]	; 0x40
 8007e4c:	887a      	ldrh	r2, [r7, #2]
 8007e4e:	801a      	strh	r2, [r3, #0]
  xpos++;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e54:	3301      	adds	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	875a      	strh	r2, [r3, #58]	; 0x3a
  if( xpos >= ax+aw)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e60:	461a      	mov	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e66:	4619      	mov	r1, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e6c:	440b      	add	r3, r1
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	db18      	blt.n	8007ea4 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEt+0x6e>
  {
    xpos = ax;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	875a      	strh	r2, [r3, #58]	; 0x3a
    ypos++;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007e7e:	3301      	adds	r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	879a      	strh	r2, [r3, #60]	; 0x3c
    offset += Hsize;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	8a12      	ldrh	r2, [r2, #16]
 8007e8e:	441a      	add	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	649a      	str	r2, [r3, #72]	; 0x48
    ptr = ptrStart + offset;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	441a      	add	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEtt>:
//
// Touch_FT6206
//
//*******************************************************************
//-------------------------------------------------------------------
Touch_FT6206::Touch_FT6206( I2Cmaster &i2c,
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	80fb      	strh	r3, [r7, #6]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80bb      	strh	r3, [r7, #4]
                            WORD       width,
                            WORD       height )

: Touch( ReportID_Hw::Module::TOUCH_FT6206, width, height ),

  i2c( i2c, hwAddr )
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	88bb      	ldrh	r3, [r7, #4]
 8007eca:	88fa      	ldrh	r2, [r7, #6]
 8007ecc:	21c2      	movs	r1, #194	; 0xc2
 8007ece:	f7fc fa19 	bl	8004304 <_ZN9EmbSysLib2Hw5TouchC1Ettt>
 8007ed2:	4a07      	ldr	r2, [pc, #28]	; (8007ef0 <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEtt+0x40>)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3314      	adds	r3, #20
 8007edc:	2254      	movs	r2, #84	; 0x54
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fd ffc1 	bl	8005e68 <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h>
{
}
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	0800c500 	.word	0x0800c500

08007ef4 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv>:

//-------------------------------------------------------------------
void Touch_FT6206::update( void )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  TscData tsc;

  i2c.read( (BYTE)0x03, &tsc );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3314      	adds	r3, #20
 8007f00:	f107 020c 	add.w	r2, r7, #12
 8007f04:	2103      	movs	r1, #3
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fb81 	bl	800860e <_ZN9EmbSysLib2Hw9I2Cmaster6Device4readIhNS0_12Touch_FT62067TscDataEEEvT_PT0_>
  if( !i2c.isError() )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3314      	adds	r3, #20
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fd ffc5 	bl	8005ea0 <_ZN9EmbSysLib2Hw9I2Cmaster6Device7isErrorEv>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d025      	beq.n	8007f72 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x7e>
  {
    if( ( tsc.Xhigh & 0xC0 ) == 0x80 /* contact */ )
 8007f26:	7b3b      	ldrb	r3, [r7, #12]
 8007f28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f2c:	2b80      	cmp	r3, #128	; 0x80
 8007f2e:	d11d      	bne.n	8007f6c <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x78>
    {
      //!< \todo coordinate mapping and offsets depending on display orientation
      
      xPos = ( ((WORD)(tsc.Xhigh&0x0F)<<8) | tsc.Xlow );
 8007f30:	7b3b      	ldrb	r3, [r7, #12]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	b21b      	sxth	r3, r3
 8007f36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f3a:	b21a      	sxth	r2, r3
 8007f3c:	7b7b      	ldrb	r3, [r7, #13]
 8007f3e:	b21b      	sxth	r3, r3
 8007f40:	4313      	orrs	r3, r2
 8007f42:	b21b      	sxth	r3, r3
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	809a      	strh	r2, [r3, #4]
      yPos = ( ((WORD)(tsc.Yhigh&0x0F)<<8) | tsc.Ylow );
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f54:	b21a      	sxth	r2, r3
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	b21b      	sxth	r3, r3
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	b21b      	sxth	r3, r3
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	80da      	strh	r2, [r3, #6]
      isTouchedFlag = true;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	721a      	strb	r2, [r3, #8]
    else
    {
      isTouchedFlag = false;
    }
  }
}
 8007f6a:	e002      	b.n	8007f72 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x7e>
      isTouchedFlag = false;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	721a      	strb	r2, [r3, #8]
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <_Z10getADCVoltv>:
/// get Voltage at GPIO Pin
///
/// @returns voltage measured at GPIO/ADC A1
/// between 0V and 3V
float getADCVolt(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
	// 16-Bit register
	//return (adc.get(adc_A1) * (float)gpio_vmax) / (unsigned)0xFFF;
	return (adc.get(adc_A1) * gpio_vmax) / (unsigned)0xFFFF;
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <_Z10getADCVoltv+0x38>)
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	4619      	mov	r1, r3
 8007f88:	480b      	ldr	r0, [pc, #44]	; (8007fb8 <_Z10getADCVoltv+0x3c>)
 8007f8a:	f7fb fbb3 	bl	80036f4 <_ZN9EmbSysLib2Hw3Adc3getEh>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f98:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007fbc <_Z10getADCVoltv+0x40>
 8007f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007fa0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007fc0 <_Z10getADCVoltv+0x44>
 8007fa4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007fa8:	eef0 7a66 	vmov.f32	s15, s13
}
 8007fac:	eeb0 0a67 	vmov.f32	s0, s15
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000120 	.word	0x20000120
 8007fb8:	200003d4 	.word	0x200003d4
 8007fbc:	40533333 	.word	0x40533333
 8007fc0:	477fff00 	.word	0x477fff00

08007fc4 <_Z14yCoordFromVoltdi>:
///
/// @param volt The measured voltage
/// @param pixelPerVolt The scaling, how many pixel will be needed to draw 0V to 1V, etc.
/// @returns Corresponding Y-Coordinate to draw on screen
int yCoordFromVolt(double volt, int pixelPerVolt)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	ed2d 8b02 	vpush	{d8}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	ed87 0b02 	vstr	d0, [r7, #8]
 8007fd2:	6078      	str	r0, [r7, #4]
	// volt außerhalb der erlaubten [voltmin, voltmax]
	if (volt > voltmax || volt < voltmin) {
 8007fd4:	ed97 7b02 	vldr	d7, [r7, #8]
 8007fd8:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 8007fdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe4:	dc08      	bgt.n	8007ff8 <_Z14yCoordFromVoltdi+0x34>
 8007fe6:	ed97 7b02 	vldr	d7, [r7, #8]
 8007fea:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8007fee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff6:	d50b      	bpl.n	8008010 <_Z14yCoordFromVoltdi+0x4c>
		return ymax/2 + pixelPerVolt;	// -1
 8007ff8:	4b26      	ldr	r3, [pc, #152]	; (8008094 <_Z14yCoordFromVoltdi+0xd0>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	da00      	bge.n	8008002 <_Z14yCoordFromVoltdi+0x3e>
 8008000:	3301      	adds	r3, #1
 8008002:	105b      	asrs	r3, r3, #1
 8008004:	461a      	mov	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	18d3      	adds	r3, r2, r3
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	e039      	b.n	8008084 <_Z14yCoordFromVoltdi+0xc0>
	}
	// pixel on screen is volt * pixelPerVolt
	// because pixelPerVolt is amount of pixel needed for 1V
	if (volt >= 0) {
 8008010:	ed97 7b02 	vldr	d7, [r7, #8]
 8008014:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801c:	db17      	blt.n	800804e <_Z14yCoordFromVoltdi+0x8a>
		// 0V to 15V is ymax/2 to 0px
		return (int) (ymax/2 - volt * pixelPerVolt);
 800801e:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <_Z14yCoordFromVoltdi+0xd0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	da00      	bge.n	8008028 <_Z14yCoordFromVoltdi+0x64>
 8008026:	3301      	adds	r3, #1
 8008028:	105b      	asrs	r3, r3, #1
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	ee07 3a90 	vmov	s15, r3
 8008038:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800803c:	ed97 7b02 	vldr	d7, [r7, #8]
 8008040:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008044:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008048:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800804c:	e01a      	b.n	8008084 <_Z14yCoordFromVoltdi+0xc0>
	} else {
		// -15V to 0V is ymax to ymax/2
		return (int) (ymax/2 + abs(volt) * pixelPerVolt);
 800804e:	4b11      	ldr	r3, [pc, #68]	; (8008094 <_Z14yCoordFromVoltdi+0xd0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	da00      	bge.n	8008058 <_Z14yCoordFromVoltdi+0x94>
 8008056:	3301      	adds	r3, #1
 8008058:	105b      	asrs	r3, r3, #1
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8008062:	ed97 0b02 	vldr	d0, [r7, #8]
 8008066:	f7fd feef 	bl	8005e48 <_ZSt3absd>
 800806a:	eeb0 6b40 	vmov.f64	d6, d0
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	ee07 3a90 	vmov	s15, r3
 8008074:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008078:	ee26 7b07 	vmul.f64	d7, d6, d7
 800807c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8008080:	eefd 7bc7 	vcvt.s32.f64	s15, d7
	}
}
 8008084:	ee17 3a90 	vmov	r3, s15
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	ecbd 8b02 	vpop	{d8}
 8008092:	bd80      	pop	{r7, pc}
 8008094:	200005e0 	.word	0x200005e0

08008098 <_ZN7MyTimerC1ERN9EmbSysLib3Dev11TaskManagerE>:
class MyTimer : TaskManager::Task
{
public:
	/// time
	int time=0;
	MyTimer(TaskManager &tm)
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	{
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fd f9a3 	bl	80053f0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 80080aa:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <_ZN7MyTimerC1ERN9EmbSysLib3Dev11TaskManagerE+0x38>)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	609a      	str	r2, [r3, #8]
		tm.add(this);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4611      	mov	r1, r2
 80080c0:	6838      	ldr	r0, [r7, #0]
 80080c2:	4798      	blx	r3
	}
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	0800c4f4 	.word	0x0800c4f4

080080d4 <_ZN7MyTimer6updateEv>:
	/// get new ADC measurement
	///
	/// will be called every 100µs
	/// and pulls a new measurement by ADC from it's 12 Bit register
	/// zieht Werte mit Frequenz 10kHz
	void update()
 80080d4:	b590      	push	{r4, r7, lr}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
		// 100µs defined in config.h l.130
		// 100µs for 1 values => 10 values per ms are measured
		// => 10_000 values per second
		// 1/(10000 Werte/s) = 1s/(10000Werte) = 0.0001s pro Wert
		// => Frequenz f = 1/(0.0001s) = 10k 1/s = 10kHz
		time++;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	609a      	str	r2, [r3, #8]
		if (!voltsVoll) {
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <_ZN7MyTimer6updateEv+0x64>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f083 0301 	eor.w	r3, r3, #1
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01b      	beq.n	800812e <_ZN7MyTimer6updateEv+0x5a>
			volts[voltCount++] = getADCVolt();
 80080f6:	4b11      	ldr	r3, [pc, #68]	; (800813c <_ZN7MyTimer6updateEv+0x68>)
 80080f8:	681c      	ldr	r4, [r3, #0]
 80080fa:	1c63      	adds	r3, r4, #1
 80080fc:	4a0f      	ldr	r2, [pc, #60]	; (800813c <_ZN7MyTimer6updateEv+0x68>)
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	f7ff ff3c 	bl	8007f7c <_Z10getADCVoltv>
 8008104:	eef0 7a40 	vmov.f32	s15, s0
 8008108:	4a0d      	ldr	r2, [pc, #52]	; (8008140 <_ZN7MyTimer6updateEv+0x6c>)
 800810a:	00a3      	lsls	r3, r4, #2
 800810c:	4413      	add	r3, r2
 800810e:	edc3 7a00 	vstr	s15, [r3]
			if (voltCount == SAMPLESIZE) {
 8008112:	4b0a      	ldr	r3, [pc, #40]	; (800813c <_ZN7MyTimer6updateEv+0x68>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f240 3217 	movw	r2, #791	; 0x317
 800811a:	4293      	cmp	r3, r2
 800811c:	bf0c      	ite	eq
 800811e:	2301      	moveq	r3, #1
 8008120:	2300      	movne	r3, #0
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <_ZN7MyTimer6updateEv+0x5a>
				voltsVoll = true;
 8008128:	4b03      	ldr	r3, [pc, #12]	; (8008138 <_ZN7MyTimer6updateEv+0x64>)
 800812a:	2201      	movs	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
			}
		}
		//......
	}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	bd90      	pop	{r4, r7, pc}
 8008136:	bf00      	nop
 8008138:	20001244 	.word	0x20001244
 800813c:	20001248 	.word	0x20001248
 8008140:	200005e8 	.word	0x200005e8

08008144 <_Z20drawCoordinateSystemii>:
/// and voltage (vertical) axis on screen
/// with scaling (labels/values)
/// @param pixelPerVolt The distance from 1 label on Y-Axis to another, so how many pixel are inbetween the labels of Volt
/// @param pixelPerSecond The distance from 1 label on X-Axis to another, so how many pixel are inbetween the labels of Time
void drawCoordinateSystem(int pixelPerVolt, int pixelPerSecond)
{
 8008144:	b590      	push	{r4, r7, lr}
 8008146:	b091      	sub	sp, #68	; 0x44
 8008148:	af04      	add	r7, sp, #16
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
	  // draw y-achse und Beschriftungen U fuer Voltage
	  screen.drawLine( xmax/2,      0, xmax/2, ymax  , 1, Color::Red ); // vertikal
 800814e:	4b92      	ldr	r3, [pc, #584]	; (8008398 <_Z20drawCoordinateSystemii+0x254>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	da00      	bge.n	8008158 <_Z20drawCoordinateSystemii+0x14>
 8008156:	3301      	adds	r3, #1
 8008158:	105b      	asrs	r3, r3, #1
 800815a:	b299      	uxth	r1, r3
 800815c:	4b8e      	ldr	r3, [pc, #568]	; (8008398 <_Z20drawCoordinateSystemii+0x254>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	da00      	bge.n	8008166 <_Z20drawCoordinateSystemii+0x22>
 8008164:	3301      	adds	r3, #1
 8008166:	105b      	asrs	r3, r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	4b8c      	ldr	r3, [pc, #560]	; (800839c <_Z20drawCoordinateSystemii+0x258>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8008174:	9002      	str	r0, [sp, #8]
 8008176:	2001      	movs	r0, #1
 8008178:	9001      	str	r0, [sp, #4]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	2200      	movs	r2, #0
 8008180:	4887      	ldr	r0, [pc, #540]	; (80083a0 <_Z20drawCoordinateSystemii+0x25c>)
 8008182:	f7fc fe90 	bl	8004ea6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
	  // ---vertical axis---
	  // ueber der 0 muessen 15mal beschriftet werden
	  // distance from current label to next on
	  // dash ist '-' auf der Achse an dem Beschriftung liegt
	  //int dashBreite = 10;
	  int label = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (int y=ymax/2; y>=0; y-=pixelPerVolt) {
 800818a:	4b84      	ldr	r3, [pc, #528]	; (800839c <_Z20drawCoordinateSystemii+0x258>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	da00      	bge.n	8008194 <_Z20drawCoordinateSystemii+0x50>
 8008192:	3301      	adds	r3, #1
 8008194:	105b      	asrs	r3, r3, #1
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
 8008198:	e03b      	b.n	8008212 <_Z20drawCoordinateSystemii+0xce>
		  int dashStart = xmax/2 - DASHBREITE/2;
 800819a:	4b7f      	ldr	r3, [pc, #508]	; (8008398 <_Z20drawCoordinateSystemii+0x254>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	da00      	bge.n	80081a4 <_Z20drawCoordinateSystemii+0x60>
 80081a2:	3301      	adds	r3, #1
 80081a4:	105b      	asrs	r3, r3, #1
 80081a6:	3b05      	subs	r3, #5
 80081a8:	60fb      	str	r3, [r7, #12]
		  int dashEnd = xmax/2 + DASHBREITE/2;
 80081aa:	4b7b      	ldr	r3, [pc, #492]	; (8008398 <_Z20drawCoordinateSystemii+0x254>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da00      	bge.n	80081b4 <_Z20drawCoordinateSystemii+0x70>
 80081b2:	3301      	adds	r3, #1
 80081b4:	105b      	asrs	r3, r3, #1
 80081b6:	3305      	adds	r3, #5
 80081b8:	60bb      	str	r3, [r7, #8]
		  // draw beschriftung at x=0-haelfte der breite, y
		  screen.drawLine(dashStart, y, dashEnd, y, 1, Color::Red);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	b299      	uxth	r1, r3
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	b298      	uxth	r0, r3
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80081ce:	9402      	str	r4, [sp, #8]
 80081d0:	2401      	movs	r4, #1
 80081d2:	9401      	str	r4, [sp, #4]
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	4603      	mov	r3, r0
 80081d8:	4871      	ldr	r0, [pc, #452]	; (80083a0 <_Z20drawCoordinateSystemii+0x25c>)
 80081da:	f7fc fe64 	bl	8004ea6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
		  // only draw every 2 labels
		  if (label % onlyLabelEvery == 0)
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10d      	bne.n	8008204 <_Z20drawCoordinateSystemii+0xc0>
			  // -30 so that the number is left from the dash
			  // -10 so that the number is vertically center aligned with dash
			  screen.drawText(dashStart - 30, y-10, "%3d", label);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b1e      	subs	r3, #30
 80081ee:	b299      	uxth	r1, r3
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b0a      	subs	r3, #10
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	4b69      	ldr	r3, [pc, #420]	; (80083a4 <_Z20drawCoordinateSystemii+0x260>)
 80081fe:	4868      	ldr	r0, [pc, #416]	; (80083a0 <_Z20drawCoordinateSystemii+0x25c>)
 8008200:	f7fc fb6f 	bl	80048e2 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawTextEttPKcz>
		  label += 1;
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	3301      	adds	r3, #1
 8008208:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (int y=ymax/2; y>=0; y-=pixelPerVolt) {
 800820a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	2b00      	cmp	r3, #0
 8008216:	dac0      	bge.n	800819a <_Z20drawCoordinateSystemii+0x56>
	  }
	  label = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // unter der 0 muessen 15mal beschriftet werden
	  for (int y=ymax/2; y<=ymax; y+=pixelPerVolt) {
 800821c:	4b5f      	ldr	r3, [pc, #380]	; (800839c <_Z20drawCoordinateSystemii+0x258>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	da00      	bge.n	8008226 <_Z20drawCoordinateSystemii+0xe2>
 8008224:	3301      	adds	r3, #1
 8008226:	105b      	asrs	r3, r3, #1
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
 800822a:	e042      	b.n	80082b2 <_Z20drawCoordinateSystemii+0x16e>
	  		  int dashStart = xmax/2 - DASHBREITE/2;
 800822c:	4b5a      	ldr	r3, [pc, #360]	; (8008398 <_Z20drawCoordinateSystemii+0x254>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	da00      	bge.n	8008236 <_Z20drawCoordinateSystemii+0xf2>
 8008234:	3301      	adds	r3, #1
 8008236:	105b      	asrs	r3, r3, #1
 8008238:	3b05      	subs	r3, #5
 800823a:	617b      	str	r3, [r7, #20]
	  		  int dashEnd = xmax/2 + DASHBREITE/2;
 800823c:	4b56      	ldr	r3, [pc, #344]	; (8008398 <_Z20drawCoordinateSystemii+0x254>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	da00      	bge.n	8008246 <_Z20drawCoordinateSystemii+0x102>
 8008244:	3301      	adds	r3, #1
 8008246:	105b      	asrs	r3, r3, #1
 8008248:	3305      	adds	r3, #5
 800824a:	613b      	str	r3, [r7, #16]
	  		  // draw beschriftung at x=0-haelfte der breite, y
	  		  screen.drawLine(dashStart, y, dashEnd, y, 1, Color::Red);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	b299      	uxth	r1, r3
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	b29a      	uxth	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	b298      	uxth	r0, r3
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	b29b      	uxth	r3, r3
 800825c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8008260:	9402      	str	r4, [sp, #8]
 8008262:	2401      	movs	r4, #1
 8008264:	9401      	str	r4, [sp, #4]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	4603      	mov	r3, r0
 800826a:	484d      	ldr	r0, [pc, #308]	; (80083a0 <_Z20drawCoordinateSystemii+0x25c>)
 800826c:	f7fc fe1b 	bl	8004ea6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
	  		  // only draw every 2 labels and from -15 to +15
	  		  if (label % onlyLabelEvery == 0 && label <= voltmax && label >= voltmin)
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d114      	bne.n	80082a4 <_Z20drawCoordinateSystemii+0x160>
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	2b0f      	cmp	r3, #15
 800827e:	dc11      	bgt.n	80082a4 <_Z20drawCoordinateSystemii+0x160>
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	f113 0f0f 	cmn.w	r3, #15
 8008286:	db0d      	blt.n	80082a4 <_Z20drawCoordinateSystemii+0x160>
	  			  // -30 so that the number is left from the dash
	  			  // -10 so that the number is vertically center aligned with dash
	  			  screen.drawText(dashStart - 30, y-10, "%3d", label);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	b29b      	uxth	r3, r3
 800828c:	3b1e      	subs	r3, #30
 800828e:	b299      	uxth	r1, r3
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	b29b      	uxth	r3, r3
 8008294:	3b0a      	subs	r3, #10
 8008296:	b29a      	uxth	r2, r3
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	4b41      	ldr	r3, [pc, #260]	; (80083a4 <_Z20drawCoordinateSystemii+0x260>)
 800829e:	4840      	ldr	r0, [pc, #256]	; (80083a0 <_Z20drawCoordinateSystemii+0x25c>)
 80082a0:	f7fc fb1f 	bl	80048e2 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawTextEttPKcz>
	  		  label -= 1;
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	3b01      	subs	r3, #1
 80082a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (int y=ymax/2; y<=ymax; y+=pixelPerVolt) {
 80082aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
 80082b2:	4b3a      	ldr	r3, [pc, #232]	; (800839c <_Z20drawCoordinateSystemii+0x258>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b8:	429a      	cmp	r2, r3
 80082ba:	ddb7      	ble.n	800822c <_Z20drawCoordinateSystemii+0xe8>
	  // so 10000 every 1s


	  // ---horizontal axis---
	  // draw x-achse und Beschriftungen t fuer Zeit
	  screen.drawLine(0, ymax/2, xmax  , ymax/2, 1, Color::Red ); // horizontal
 80082bc:	4b37      	ldr	r3, [pc, #220]	; (800839c <_Z20drawCoordinateSystemii+0x258>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	da00      	bge.n	80082c6 <_Z20drawCoordinateSystemii+0x182>
 80082c4:	3301      	adds	r3, #1
 80082c6:	105b      	asrs	r3, r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	4b33      	ldr	r3, [pc, #204]	; (8008398 <_Z20drawCoordinateSystemii+0x254>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	b299      	uxth	r1, r3
 80082d0:	4b32      	ldr	r3, [pc, #200]	; (800839c <_Z20drawCoordinateSystemii+0x258>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da00      	bge.n	80082da <_Z20drawCoordinateSystemii+0x196>
 80082d8:	3301      	adds	r3, #1
 80082da:	105b      	asrs	r3, r3, #1
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80082e2:	9002      	str	r0, [sp, #8]
 80082e4:	2001      	movs	r0, #1
 80082e6:	9001      	str	r0, [sp, #4]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	460b      	mov	r3, r1
 80082ec:	2100      	movs	r1, #0
 80082ee:	482c      	ldr	r0, [pc, #176]	; (80083a0 <_Z20drawCoordinateSystemii+0x25c>)
 80082f0:	f7fc fdd9 	bl	8004ea6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>

	  label = 0;	// go from middle to right first
 80082f4:	2300      	movs	r3, #0
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // TODO: draw scaling of time axis
	  //int timeLabel = 0;
	  // don't draw 0 again, because the y-axis always did
	  for (int x=firstLabel; x<=xmax; x+=pixelPerSecond) {
 80082f8:	4b2b      	ldr	r3, [pc, #172]	; (80083a8 <_Z20drawCoordinateSystemii+0x264>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	e041      	b.n	8008384 <_Z20drawCoordinateSystemii+0x240>
		  	  int dashStart = ymax/2 - DASHBREITE/2;
 8008300:	4b26      	ldr	r3, [pc, #152]	; (800839c <_Z20drawCoordinateSystemii+0x258>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	da00      	bge.n	800830a <_Z20drawCoordinateSystemii+0x1c6>
 8008308:	3301      	adds	r3, #1
 800830a:	105b      	asrs	r3, r3, #1
 800830c:	3b05      	subs	r3, #5
 800830e:	61fb      	str	r3, [r7, #28]
		  	  int dashEnd = ymax/2 + DASHBREITE/2;
 8008310:	4b22      	ldr	r3, [pc, #136]	; (800839c <_Z20drawCoordinateSystemii+0x258>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	da00      	bge.n	800831a <_Z20drawCoordinateSystemii+0x1d6>
 8008318:	3301      	adds	r3, #1
 800831a:	105b      	asrs	r3, r3, #1
 800831c:	3305      	adds	r3, #5
 800831e:	61bb      	str	r3, [r7, #24]
			  // draw beschriftung at y=0-hae
			  screen.drawLine(x, dashStart, x, dashEnd, 1, Color::Red);
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	b299      	uxth	r1, r3
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	b29a      	uxth	r2, r3
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	b298      	uxth	r0, r3
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8008334:	9402      	str	r4, [sp, #8]
 8008336:	2401      	movs	r4, #1
 8008338:	9401      	str	r4, [sp, #4]
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4603      	mov	r3, r0
 800833e:	4818      	ldr	r0, [pc, #96]	; (80083a0 <_Z20drawCoordinateSystemii+0x25c>)
 8008340:	f7fc fdb1 	bl	8004ea6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
			  if (label % 2 == 0 && label > 0 && label < secondsToDisplay)
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d113      	bne.n	8008376 <_Z20drawCoordinateSystemii+0x232>
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	2b00      	cmp	r3, #0
 8008352:	dd10      	ble.n	8008376 <_Z20drawCoordinateSystemii+0x232>
 8008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008356:	2b09      	cmp	r3, #9
 8008358:	dc0d      	bgt.n	8008376 <_Z20drawCoordinateSystemii+0x232>
				  // only draw even numbers
				  // x-25, dashStart+15
				  // print only 1 decimal, so 0.1, 0.2, etc.
				  // can't print decimals, so by knowing 10 labels, each 1/10 of 0.1s, so 0.01
				  // we can do
			  	  screen.drawText(x-25, dashStart+15, "0.0%d", label);
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b19      	subs	r3, #25
 8008360:	b299      	uxth	r1, r3
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	b29b      	uxth	r3, r3
 8008366:	330f      	adds	r3, #15
 8008368:	b29a      	uxth	r2, r3
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <_Z20drawCoordinateSystemii+0x268>)
 8008370:	480b      	ldr	r0, [pc, #44]	; (80083a0 <_Z20drawCoordinateSystemii+0x25c>)
 8008372:	f7fc fab6 	bl	80048e2 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawTextEttPKcz>
			  label += 1;
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	3301      	adds	r3, #1
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (int x=firstLabel; x<=xmax; x+=pixelPerSecond) {
 800837c:	6a3a      	ldr	r2, [r7, #32]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	4413      	add	r3, r2
 8008382:	623b      	str	r3, [r7, #32]
 8008384:	4b04      	ldr	r3, [pc, #16]	; (8008398 <_Z20drawCoordinateSystemii+0x254>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6a3a      	ldr	r2, [r7, #32]
 800838a:	429a      	cmp	r2, r3
 800838c:	ddb8      	ble.n	8008300 <_Z20drawCoordinateSystemii+0x1bc>
	  }

}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	3734      	adds	r7, #52	; 0x34
 8008394:	46bd      	mov	sp, r7
 8008396:	bd90      	pop	{r4, r7, pc}
 8008398:	200005dc 	.word	0x200005dc
 800839c:	200005e0 	.word	0x200005e0
 80083a0:	200004bc 	.word	0x200004bc
 80083a4:	0800b818 	.word	0x0800b818
 80083a8:	20001250 	.word	0x20001250
 80083ac:	0800b81c 	.word	0x0800b81c

080083b0 <_Z13printInfoTextf>:
/// print info in top left corner of screen
///
/// displays 6 decimal places of volt
/// @param volt measured voltage
void printInfoText(float volt)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	ed87 0a01 	vstr	s0, [r7, #4]
	/* convert float to array of chars to print */
	char voltarr[10];	// max 2 digits (integer part) + 6 digits (decimal part), round up to 10 digis just in case
	snprintf(voltarr, sizeof(voltarr), "%.6f", volt);
 80083ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80083be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80083c2:	f107 030c 	add.w	r3, r7, #12
 80083c6:	ed8d 7b00 	vstr	d7, [sp]
 80083ca:	4a09      	ldr	r2, [pc, #36]	; (80083f0 <_Z13printInfoTextf+0x40>)
 80083cc:	210a      	movs	r1, #10
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 f8e2 	bl	8009598 <sniprintf>
	screen.printf(2, 1, "U = %s", voltarr);
 80083d4:	f107 030c 	add.w	r3, r7, #12
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <_Z13printInfoTextf+0x44>)
 80083dc:	2201      	movs	r2, #1
 80083de:	2102      	movs	r1, #2
 80083e0:	4805      	ldr	r0, [pc, #20]	; (80083f8 <_Z13printInfoTextf+0x48>)
 80083e2:	f7fc f9f7 	bl	80047d4 <_ZN9EmbSysLib3Dev13ScreenGraphic6printfEhhPKcz>
	// 10^accuracy is how to get accuracy many decimal places
}
 80083e6:	bf00      	nop
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	0800b824 	.word	0x0800b824
 80083f4:	0800b82c 	.word	0x0800b82c
 80083f8:	200004bc 	.word	0x200004bc

080083fc <main>:
	return fi;
}

//*******************************************************************
int main( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08e      	sub	sp, #56	; 0x38
 8008400:	af02      	add	r7, sp, #8
  MyTimer timer(taskManager);
 8008402:	463b      	mov	r3, r7
 8008404:	4966      	ldr	r1, [pc, #408]	; (80085a0 <main+0x1a4>)
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fe46 	bl	8008098 <_ZN7MyTimerC1ERN9EmbSysLib3Dev11TaskManagerE>

  adc.enable(adc_A1);
 800840c:	4b65      	ldr	r3, [pc, #404]	; (80085a4 <main+0x1a8>)
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2200      	movs	r2, #0
 8008414:	4619      	mov	r1, r3
 8008416:	4864      	ldr	r0, [pc, #400]	; (80085a8 <main+0x1ac>)
 8008418:	f7fb f918 	bl	800364c <_ZN9EmbSysLib2Hw3Adc6enableEhh>
  adc.enable(adc_A2);
 800841c:	4b63      	ldr	r3, [pc, #396]	; (80085ac <main+0x1b0>)
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2200      	movs	r2, #0
 8008424:	4619      	mov	r1, r3
 8008426:	4860      	ldr	r0, [pc, #384]	; (80085a8 <main+0x1ac>)
 8008428:	f7fb f910 	bl	800364c <_ZN9EmbSysLib2Hw3Adc6enableEhh>

  // Setup
  screen.setFont     ( fontFont_10x20 );
 800842c:	f107 030c 	add.w	r3, r7, #12
 8008430:	495f      	ldr	r1, [pc, #380]	; (80085b0 <main+0x1b4>)
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f90f 	bl	8008656 <_ZNK9EmbSysLib2Hw4Font4DataILt96ELh25EEcvS1_Ev>
 8008438:	2301      	movs	r3, #1
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	f107 030c 	add.w	r3, r7, #12
 8008440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008442:	485c      	ldr	r0, [pc, #368]	; (80085b4 <main+0x1b8>)
 8008444:	f7fc f9f9 	bl	800483a <_ZN9EmbSysLib3Dev13ScreenGraphic7setFontENS_2Hw4FontEh>
  screen.setTextColor( Color::White   );
 8008448:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800844c:	4859      	ldr	r0, [pc, #356]	; (80085b4 <main+0x1b8>)
 800844e:	f7fc fa34 	bl	80048ba <_ZN9EmbSysLib3Dev13ScreenGraphic12setTextColorEt>
  screen.setBackColor( Color::Black   );
 8008452:	2100      	movs	r1, #0
 8008454:	4857      	ldr	r0, [pc, #348]	; (80085b4 <main+0x1b8>)
 8008456:	f7fc fa1c 	bl	8004892 <_ZN9EmbSysLib3Dev13ScreenGraphic12setBackColorEt>
  screen.clear();
 800845a:	4856      	ldr	r0, [pc, #344]	; (80085b4 <main+0x1b8>)
 800845c:	f7fc f998 	bl	8004790 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>

  // Frame
  drawCoordinateSystem(pixelPerVolt, pixelPerSecond);
 8008460:	4b55      	ldr	r3, [pc, #340]	; (80085b8 <main+0x1bc>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a55      	ldr	r2, [pc, #340]	; (80085bc <main+0x1c0>)
 8008466:	edd2 7a00 	vldr	s15, [r2]
 800846a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800846e:	ee17 1a90 	vmov	r1, s15
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fe66 	bl	8008144 <_Z20drawCoordinateSystemii>
  screen.drawText(10, 10, "time range = %d.%ds", 0, 1);
 8008478:	2301      	movs	r3, #1
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	2300      	movs	r3, #0
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	4b4f      	ldr	r3, [pc, #316]	; (80085c0 <main+0x1c4>)
 8008482:	220a      	movs	r2, #10
 8008484:	210a      	movs	r1, #10
 8008486:	484b      	ldr	r0, [pc, #300]	; (80085b4 <main+0x1b8>)
 8008488:	f7fc fa2b 	bl	80048e2 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawTextEttPKcz>


  int x = firstLabel; // x is time-axis
 800848c:	4b4d      	ldr	r3, [pc, #308]	; (80085c4 <main+0x1c8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
  int y = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	623b      	str	r3, [r7, #32]

  // clicked button flags
  // only needed to know if a button has been pressed ONCE
  bool clicked_start	= false;
 8008496:	2300      	movs	r3, #0
 8008498:	77fb      	strb	r3, [r7, #31]
  bool clicked_stop		= false;
 800849a:	2300      	movs	r3, #0
 800849c:	77bb      	strb	r3, [r7, #30]
  bool clicked_next		= false;	// start next measure
 800849e:	2300      	movs	r3, #0
 80084a0:	777b      	strb	r3, [r7, #29]

  // timer.time = 0;	// set time to 0 at start, this will only go for 1st screen, after that theres an offset
  int t0 = timer.time;	// start time of measuring
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	61bb      	str	r3, [r7, #24]

  // drawn once is used to indicate if volts array has been already drawn
  // as it only needs to be drawn once until next measurement starts (btnRight -> clicked_next)
  bool drawnOnce = false;
 80084a6:	2300      	movs	r3, #0
 80084a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


  while( 1 )
  {
	  if (btnRight.getEvent() == Digital::Event::ACTIVATED) {
 80084ac:	4846      	ldr	r0, [pc, #280]	; (80085c8 <main+0x1cc>)
 80084ae:	f7f7 fff5 	bl	800049c <_ZN9EmbSysLib3Dev7Digital8getEventEv>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	bf0c      	ite	eq
 80084b8:	2301      	moveq	r3, #1
 80084ba:	2300      	movne	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d019      	beq.n	80084f6 <main+0xfa>
		  //clicked_next = true;
		  // start new adc measurement
		  voltCount = 0;
 80084c2:	4b42      	ldr	r3, [pc, #264]	; (80085cc <main+0x1d0>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
		  voltsVoll = false;
 80084c8:	4b41      	ldr	r3, [pc, #260]	; (80085d0 <main+0x1d4>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
		  timer.time = 0;	// reset time
 80084ce:	2300      	movs	r3, #0
 80084d0:	60bb      	str	r3, [r7, #8]
		  screen.clear();	// clear old sample from screen
 80084d2:	4838      	ldr	r0, [pc, #224]	; (80085b4 <main+0x1b8>)
 80084d4:	f7fc f95c 	bl	8004790 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>
		  drawCoordinateSystem(pixelPerVolt, pixelPerSecond);
 80084d8:	4b37      	ldr	r3, [pc, #220]	; (80085b8 <main+0x1bc>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a37      	ldr	r2, [pc, #220]	; (80085bc <main+0x1c0>)
 80084de:	edd2 7a00 	vldr	s15, [r2]
 80084e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084e6:	ee17 1a90 	vmov	r1, s15
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fe2a 	bl	8008144 <_Z20drawCoordinateSystemii>
		  drawnOnce = false;
 80084f0:	2300      	movs	r3, #0
 80084f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     * Pixel ausgeben
     * Draw all content of volts array
     * corresponds to measurement of 1 measurement of volt per 100µs
     * 1000 * 0.0001 = 0.1s measurement
    */
    if (voltsVoll && !drawnOnce) {
 80084f6:	4b36      	ldr	r3, [pc, #216]	; (80085d0 <main+0x1d4>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d008      	beq.n	8008512 <main+0x116>
 8008500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008504:	f083 0301 	eor.w	r3, r3, #1
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <main+0x116>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <main+0x118>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d03f      	beq.n	8008598 <main+0x19c>
    	int dashEnd = ymax/2 + DASHBREITE/2;
    	// draw beschriftung at y=0-hae
    	screen.drawLine(x, dashStart, x, dashEnd, 1, Color::Red);*/
    	// draw the 0.1s of measurement
    	// 10^-4 * 1000 = alle 0.1s ist voltsVoll = true
    	for (int i=0; i<SAMPLESIZE; i++) {
 8008518:	2300      	movs	r3, #0
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28
 800851c:	e034      	b.n	8008588 <main+0x18c>
    		if (i == 700) {
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008524:	d102      	bne.n	800852c <main+0x130>
    			printf("test");
 8008526:	482b      	ldr	r0, [pc, #172]	; (80085d4 <main+0x1d8>)
 8008528:	f001 f824 	bl	8009574 <iprintf>
    		}
    		// every 100µs 1 value is measured
    		// so the time difference between 2 values is 100µs
    		x = i + firstLabel; // offset, start drawing from firstLabel on	//xCoordFromTime(i, pixelPerSecond);
 800852c:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <main+0x1c8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008532:	4413      	add	r3, r2
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
    		y = yCoordFromVolt(volts[i], pixelPerVolt);
 8008536:	4a28      	ldr	r2, [pc, #160]	; (80085d8 <main+0x1dc>)
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	edd3 7a00 	vldr	s15, [r3]
 8008542:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008546:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <main+0x1bc>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	eeb0 0b47 	vmov.f64	d0, d7
 8008550:	f7ff fd38 	bl	8007fc4 <_Z14yCoordFromVoltdi>
 8008554:	6238      	str	r0, [r7, #32]
    		screen.drawPixel(x, y, Color::Yellow); // draw corresponding pixel of measured values
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	b299      	uxth	r1, r3
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	b29a      	uxth	r2, r3
 800855e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008562:	4814      	ldr	r0, [pc, #80]	; (80085b4 <main+0x1b8>)
 8008564:	f7fc f9f0 	bl	8004948 <_ZN9EmbSysLib3Dev13ScreenGraphic9drawPixelEttt>
    		printInfoText(volts[i]);	// print info about current measured values
 8008568:	4a1b      	ldr	r2, [pc, #108]	; (80085d8 <main+0x1dc>)
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	edd3 7a00 	vldr	s15, [r3]
 8008574:	eeb0 0a67 	vmov.f32	s0, s15
 8008578:	f7ff ff1a 	bl	80083b0 <_Z13printInfoTextf>
    		// for some reason this refresh has to stay
    		// or else sometimes the screen doesn't update after certain time values
    		screen.refresh();
 800857c:	480d      	ldr	r0, [pc, #52]	; (80085b4 <main+0x1b8>)
 800857e:	f7fc f918 	bl	80047b2 <_ZN9EmbSysLib3Dev13ScreenGraphic7refreshEv>
    	for (int i=0; i<SAMPLESIZE; i++) {
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	3301      	adds	r3, #1
 8008586:	62bb      	str	r3, [r7, #40]	; 0x28
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	f240 3216 	movw	r2, #790	; 0x316
 800858e:	4293      	cmp	r3, r2
 8008590:	ddc5      	ble.n	800851e <main+0x122>

    		// TODO: check for end of screen and clear
    	}
    	// only draw the volt array once for perfomance reasons
    	// the values will stay on screen automatically until new sample is started
    	drawnOnce = true;
 8008592:	2301      	movs	r3, #1
 8008594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    // seconds
    //endOfScreenHandle(timer.time);


    // Bildschirm aktualisieren
    screen.refresh();
 8008598:	4806      	ldr	r0, [pc, #24]	; (80085b4 <main+0x1b8>)
 800859a:	f7fc f90a 	bl	80047b2 <_ZN9EmbSysLib3Dev13ScreenGraphic7refreshEv>

    // Ggf. etwas warten, Zeitangabe nicht zuverlaessig
    //System::delayMilliSec( 1 );


  }
 800859e:	e785      	b.n	80084ac <main+0xb0>
 80085a0:	200003cc 	.word	0x200003cc
 80085a4:	20000120 	.word	0x20000120
 80085a8:	200003d4 	.word	0x200003d4
 80085ac:	20000122 	.word	0x20000122
 80085b0:	0800bb84 	.word	0x0800bb84
 80085b4:	200004bc 	.word	0x200004bc
 80085b8:	200005e4 	.word	0x200005e4
 80085bc:	2000124c 	.word	0x2000124c
 80085c0:	0800b834 	.word	0x0800b834
 80085c4:	20001250 	.word	0x20001250
 80085c8:	2000056c 	.word	0x2000056c
 80085cc:	20001248 	.word	0x20001248
 80085d0:	20001244 	.word	0x20001244
 80085d4:	0800b848 	.word	0x0800b848
 80085d8:	200005e8 	.word	0x200005e8

080085dc <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_>:
template <class T> inline T RANGE( T x, T min, T max )
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  if( x > max )
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d901      	bls.n	80085f4 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x18>
    return( max );
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	e006      	b.n	8008602 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x26>
  if( x < min )
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d201      	bcs.n	8008600 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x24>
    return( min );
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	e000      	b.n	8008602 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x26>
  return( x );
 8008600:	68fb      	ldr	r3, [r7, #12]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <_ZN9EmbSysLib2Hw9I2Cmaster6Device4readIhNS0_12Touch_FT62067TscDataEEEvT_PT0_>:
        void read( A addr, T *data )
 800860e:	b590      	push	{r4, r7, lr}
 8008610:	b087      	sub	sp, #28
 8008612:	af02      	add	r7, sp, #8
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	460b      	mov	r3, r1
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	72fb      	strb	r3, [r7, #11]
          isErrorFlag |= i2c.read( hwAddr, (BYTE *)&addr, sizeof(A), (BYTE *)data, sizeof(T) );
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6858      	ldr	r0, [r3, #4]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3304      	adds	r3, #4
 8008628:	681c      	ldr	r4, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	7a19      	ldrb	r1, [r3, #8]
 800862e:	f107 020b 	add.w	r2, r7, #11
 8008632:	2304      	movs	r3, #4
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2301      	movs	r3, #1
 800863c:	47a0      	blx	r4
 800863e:	4603      	mov	r3, r0
 8008640:	461a      	mov	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	7a5b      	ldrb	r3, [r3, #9]
 8008646:	4313      	orrs	r3, r2
 8008648:	b2da      	uxtb	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	725a      	strb	r2, [r3, #9]
        }
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	bd90      	pop	{r4, r7, pc}

08008656 <_ZNK9EmbSysLib2Hw4Font4DataILt96ELh25EEcvS1_Ev>:
        BYTE   data[NUM_OF_CHAR][BYTE_PER_CHAR];

        //---------------------------------------------------------------
        /*! Convert header and data
         */
        operator Font( void ) const
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
        {
          return( Font( &header, (BYTE*)data ) );
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	3305      	adds	r3, #5
 8008666:	461a      	mov	r2, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7fb f8c1 	bl	80037f0 <_ZN9EmbSysLib2Hw4FontC1EPKNS1_6HeaderEPKh>
        }
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <_ZN15myReportHandlerD1Ev>:
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	4a05      	ldr	r2, [pc, #20]	; (8008698 <_ZN15myReportHandlerD1Ev+0x20>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4618      	mov	r0, r3
 800868a:	f7fa ff55 	bl	8003538 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	0800c5d0 	.word	0x0800c5d0

0800869c <_Z41__static_initialization_and_destruction_0ii>:
}
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b08b      	sub	sp, #44	; 0x2c
 80086a0:	af04      	add	r7, sp, #16
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	f040 810f 	bne.w	80088cc <_Z41__static_initialization_and_destruction_0ii+0x230>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086b4:	4293      	cmp	r3, r2
 80086b6:	f040 8109 	bne.w	80088cc <_Z41__static_initialization_and_destruction_0ii+0x230>
} report;
 80086ba:	488c      	ldr	r0, [pc, #560]	; (80088ec <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80086bc:	f7fe f93c 	bl	8006938 <_ZN15myReportHandlerC1Ev>
};

//-------------------------------------------------------------------
// Port
//-------------------------------------------------------------------
Port_Mcu   portA( Port_Mcu::PA );
 80086c0:	2100      	movs	r1, #0
 80086c2:	488b      	ldr	r0, [pc, #556]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80086c4:	f7f9 f852 	bl	800176c <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portC( Port_Mcu::PC );
 80086c8:	2102      	movs	r1, #2
 80086ca:	488a      	ldr	r0, [pc, #552]	; (80088f4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80086cc:	f7f9 f84e 	bl	800176c <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portF( Port_Mcu::PF );
 80086d0:	2105      	movs	r1, #5
 80086d2:	4889      	ldr	r0, [pc, #548]	; (80088f8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80086d4:	f7f9 f84a 	bl	800176c <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portJ( Port_Mcu::PJ );
 80086d8:	2109      	movs	r1, #9
 80086da:	4888      	ldr	r0, [pc, #544]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80086dc:	f7f9 f846 	bl	800176c <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>


//-------------------------------------------------------------------
// Timer
//-------------------------------------------------------------------
Timer_Mcu  timer( Timer_Mcu::TIM_11, 100L/*us*/ );
 80086e0:	2264      	movs	r2, #100	; 0x64
 80086e2:	210a      	movs	r1, #10
 80086e4:	4886      	ldr	r0, [pc, #536]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80086e6:	f7f9 f9db 	bl	8001aa0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>

TaskManager taskManager( timer );
 80086ea:	4985      	ldr	r1, [pc, #532]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80086ec:	4885      	ldr	r0, [pc, #532]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80086ee:	f7fe f8d3 	bl	8006898 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>

//-------------------------------------------------------------------
// ADC
//-------------------------------------------------------------------
Adc_Mcu  adc( Adc_Mcu::ADC_3, timer );
 80086f2:	4a83      	ldr	r2, [pc, #524]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80086f4:	2103      	movs	r1, #3
 80086f6:	4884      	ldr	r0, [pc, #528]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80086f8:	f7f8 fa86 	bl	8000c08 <_ZN9EmbSysLib2Hw7Adc_McuC1ENS1_5AdcIdERNS0_5TimerE>
WORD     adc_A2 = 8;

//-------------------------------------------------------------------
// I2C
//-------------------------------------------------------------------
I2Cmaster_Mcu i2cBusTouch( I2Cmaster_Mcu::I2C_4, 400/*kHz*/ );
 80086fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008700:	2104      	movs	r1, #4
 8008702:	4882      	ldr	r0, [pc, #520]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8008704:	f7f8 fe74 	bl	80013f0 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt>

//-------------------------------------------------------------------
// UART
//-------------------------------------------------------------------
Uart_Mcu   uart ( Uart_Mcu::USART_1, 9600, Uart_Mcu::NONE, 100, 100 );
 8008708:	2364      	movs	r3, #100	; 0x64
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	2364      	movs	r3, #100	; 0x64
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	2300      	movs	r3, #0
 8008712:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008716:	2101      	movs	r1, #1
 8008718:	487d      	ldr	r0, [pc, #500]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800871a:	f7f9 fe8f 	bl	800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt>

Terminal   terminal( uart, 255,255,"# +" );
 800871e:	4b7d      	ldr	r3, [pc, #500]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	4b7d      	ldr	r3, [pc, #500]	; (8008918 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	23ff      	movs	r3, #255	; 0xff
 8008728:	22ff      	movs	r2, #255	; 0xff
 800872a:	4979      	ldr	r1, [pc, #484]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800872c:	487b      	ldr	r0, [pc, #492]	; (800891c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 800872e:	f7fc fde9 	bl	8005304 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>
//-------------------------------------------------------------------
// Display
//-------------------------------------------------------------------
#include "../../Resource/Font/Font_10x20.h"

Port::Pin     lcdResetPin( portJ, 15 );
 8008732:	220f      	movs	r2, #15
 8008734:	4971      	ldr	r1, [pc, #452]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8008736:	487a      	ldr	r0, [pc, #488]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8008738:	f7fb fcf4 	bl	8004124 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
Fmc_Mcu       fmc        ( Fmc_Mcu::SDRAM_Bank1 );  
 800873c:	2200      	movs	r2, #0
 800873e:	2102      	movs	r1, #2
 8008740:	4878      	ldr	r0, [pc, #480]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8008742:	f7fd fc9f 	bl	8006084 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb>
Dsi_Mcu       hwDSI      ( fmc.startAddr() );
 8008746:	4877      	ldr	r0, [pc, #476]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8008748:	f7fd fdec 	bl	8006324 <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv>
 800874c:	4603      	mov	r3, r0
 800874e:	4619      	mov	r1, r3
 8008750:	4875      	ldr	r0, [pc, #468]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8008752:	f7fd febb 	bl	80064cc <_ZN9EmbSysLib2Hw7Dsi_McuC1Em>
                        
DisplayGraphic_OTM8009Aram dispGraphic( hwDSI,lcdResetPin, 
                                        DisplayGraphic_OTM8009A::LANDSCAPE_90, 
                                        fontFont_10x20,
                                        1 );
 8008756:	f107 030c 	add.w	r3, r7, #12
 800875a:	4974      	ldr	r1, [pc, #464]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0x290>)
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff ff7a 	bl	8008656 <_ZNK9EmbSysLib2Hw4Font4DataILt96ELh25EEcvS1_Ev>
 8008762:	2301      	movs	r3, #1
 8008764:	9303      	str	r3, [sp, #12]
 8008766:	466c      	mov	r4, sp
 8008768:	f107 030c 	add.w	r3, r7, #12
 800876c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008774:	2301      	movs	r3, #1
 8008776:	4a6a      	ldr	r2, [pc, #424]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8008778:	496b      	ldr	r1, [pc, #428]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 800877a:	486d      	ldr	r0, [pc, #436]	; (8008930 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 800877c:	f7ff fa78 	bl	8007c70 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh>

ScreenGraphic screen( dispGraphic );
 8008780:	496b      	ldr	r1, [pc, #428]	; (8008930 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8008782:	486c      	ldr	r0, [pc, #432]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8008784:	f7fb ffda 	bl	800473c <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE>

//-------------------------------------------------------------------
// Touch
//-------------------------------------------------------------------
Touch_FT6206 touch( i2cBusTouch, 800, 480 );
 8008788:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800878c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008790:	495e      	ldr	r1, [pc, #376]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8008792:	4869      	ldr	r0, [pc, #420]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008794:	f7ff fb8c 	bl	8007eb0 <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEtt>

Pointer        pointer( touch );
 8008798:	4967      	ldr	r1, [pc, #412]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800879a:	4868      	ldr	r0, [pc, #416]	; (800893c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800879c:	f7fc fcb0 	bl	8005100 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE>

//-------------------------------------------------------------------
// Digital
//-------------------------------------------------------------------
Digital    led_A( portJ,13, Digital::Out, 0 ); // LD1 (red)
 80087a0:	2300      	movs	r3, #0
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	2301      	movs	r3, #1
 80087a6:	220d      	movs	r2, #13
 80087a8:	4954      	ldr	r1, [pc, #336]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80087aa:	4865      	ldr	r0, [pc, #404]	; (8008940 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80087ac:	f7fb ff50 	bl	8004650 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btn_A( portA, 0, Digital::In,  0 ); // B1 (user button)
 80087b0:	2300      	movs	r3, #0
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	2300      	movs	r3, #0
 80087b6:	2200      	movs	r2, #0
 80087b8:	494d      	ldr	r1, [pc, #308]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80087ba:	4862      	ldr	r0, [pc, #392]	; (8008944 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80087bc:	f7fb ff48 	bl	8004650 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

Digital    btnLeft ( portF, 8, Digital::InPU  , 1 );
 80087c0:	2301      	movs	r3, #1
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	2304      	movs	r3, #4
 80087c6:	2208      	movs	r2, #8
 80087c8:	494b      	ldr	r1, [pc, #300]	; (80088f8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80087ca:	485f      	ldr	r0, [pc, #380]	; (8008948 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80087cc:	f7fb ff40 	bl	8004650 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btnCtrl ( portF, 9, Digital::InPU  , 1 );
 80087d0:	2301      	movs	r3, #1
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	2304      	movs	r3, #4
 80087d6:	2209      	movs	r2, #9
 80087d8:	4947      	ldr	r1, [pc, #284]	; (80088f8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80087da:	485c      	ldr	r0, [pc, #368]	; (800894c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80087dc:	f7fb ff38 	bl	8004650 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btnRight( portA, 6, Digital::InPU  , 1 );
 80087e0:	2301      	movs	r3, #1
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	2304      	movs	r3, #4
 80087e6:	2206      	movs	r2, #6
 80087e8:	4941      	ldr	r1, [pc, #260]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80087ea:	4859      	ldr	r0, [pc, #356]	; (8008950 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80087ec:	f7fb ff30 	bl	8004650 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

//-------------------------------------------------------------------
// Control
//-------------------------------------------------------------------
DigitalIndicator indicator( led_A, taskManager );
 80087f0:	4a44      	ldr	r2, [pc, #272]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80087f2:	4953      	ldr	r1, [pc, #332]	; (8008940 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80087f4:	4857      	ldr	r0, [pc, #348]	; (8008954 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80087f6:	f7fd f81b 	bl	8005830 <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE>
DigitalButton    button   ( btn_A, taskManager, 40, 1000 );
 80087fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	2328      	movs	r3, #40	; 0x28
 8008802:	4a40      	ldr	r2, [pc, #256]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8008804:	494f      	ldr	r1, [pc, #316]	; (8008944 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008806:	4854      	ldr	r0, [pc, #336]	; (8008958 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008808:	f7fc fe04 	bl	8005414 <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt>

DigitalEncoderJoystick    encoder( &btnLeft, &btnRight, &btnCtrl, taskManager, 150 );
 800880c:	2396      	movs	r3, #150	; 0x96
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	4b3c      	ldr	r3, [pc, #240]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4b4d      	ldr	r3, [pc, #308]	; (800894c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008816:	4a4e      	ldr	r2, [pc, #312]	; (8008950 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008818:	494b      	ldr	r1, [pc, #300]	; (8008948 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800881a:	4850      	ldr	r0, [pc, #320]	; (800895c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800881c:	f7fc ff64 	bl	80056e8 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt>
const int xmax = screen.getWidth()  - 1;
 8008820:	4844      	ldr	r0, [pc, #272]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8008822:	f7fe f815 	bl	8006850 <_ZN9EmbSysLib3Dev13ScreenGraphic8getWidthEv>
 8008826:	4603      	mov	r3, r0
 8008828:	3b01      	subs	r3, #1
 800882a:	4a4d      	ldr	r2, [pc, #308]	; (8008960 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800882c:	6013      	str	r3, [r2, #0]
const int ymax = screen.getHeight() - 1;
 800882e:	4841      	ldr	r0, [pc, #260]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8008830:	f7fe f820 	bl	8006874 <_ZN9EmbSysLib3Dev13ScreenGraphic9getHeightEv>
 8008834:	4603      	mov	r3, r0
 8008836:	3b01      	subs	r3, #1
 8008838:	4a4a      	ldr	r2, [pc, #296]	; (8008964 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800883a:	6013      	str	r3, [r2, #0]
const int pixelPerVolt = ymax / numOfVoltLabels;
 800883c:	4b49      	ldr	r3, [pc, #292]	; (8008964 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a49      	ldr	r2, [pc, #292]	; (8008968 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008842:	fb82 1203 	smull	r1, r2, r2, r3
 8008846:	441a      	add	r2, r3
 8008848:	1112      	asrs	r2, r2, #4
 800884a:	17db      	asrs	r3, r3, #31
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	4a47      	ldr	r2, [pc, #284]	; (800896c <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8008850:	6013      	str	r3, [r2, #0]
const float pixelPerSecond = xmax / secondsToDisplay;
 8008852:	4b43      	ldr	r3, [pc, #268]	; (8008960 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a46      	ldr	r2, [pc, #280]	; (8008970 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008858:	fb82 1203 	smull	r1, r2, r2, r3
 800885c:	1092      	asrs	r2, r2, #2
 800885e:	17db      	asrs	r3, r3, #31
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800886a:	4b42      	ldr	r3, [pc, #264]	; (8008974 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800886c:	edc3 7a00 	vstr	s15, [r3]
const int firstLabel = xmax/2 - (secondsToDisplay/2) * pixelPerSecond;	// x coord of first label of time axis
 8008870:	4b3b      	ldr	r3, [pc, #236]	; (8008960 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	da00      	bge.n	800887a <_Z41__static_initialization_and_destruction_0ii+0x1de>
 8008878:	3301      	adds	r3, #1
 800887a:	105b      	asrs	r3, r3, #1
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008884:	4b3b      	ldr	r3, [pc, #236]	; (8008974 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8008886:	edd3 7a00 	vldr	s15, [r3]
 800888a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800888e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800889a:	ee17 2a90 	vmov	r2, s15
 800889e:	4b36      	ldr	r3, [pc, #216]	; (8008978 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80088a0:	601a      	str	r2, [r3, #0]
const int lastLabel = firstLabel + secondsToDisplay * pixelPerSecond;	// x coord of last label of time axis
 80088a2:	4b35      	ldr	r3, [pc, #212]	; (8008978 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088ae:	4b31      	ldr	r3, [pc, #196]	; (8008974 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80088b0:	edd3 7a00 	vldr	s15, [r3]
 80088b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80088b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80088bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088c4:	ee17 2a90 	vmov	r2, s15
 80088c8:	4b2c      	ldr	r3, [pc, #176]	; (800897c <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d107      	bne.n	80088e2 <_Z41__static_initialization_and_destruction_0ii+0x246>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088d8:	4293      	cmp	r3, r2
 80088da:	d102      	bne.n	80088e2 <_Z41__static_initialization_and_destruction_0ii+0x246>
 80088dc:	4803      	ldr	r0, [pc, #12]	; (80088ec <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80088de:	f7ff fecb 	bl	8008678 <_ZN15myReportHandlerD1Ev>
}
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd90      	pop	{r4, r7, pc}
 80088ea:	bf00      	nop
 80088ec:	2000037c 	.word	0x2000037c
 80088f0:	20000380 	.word	0x20000380
 80088f4:	2000038c 	.word	0x2000038c
 80088f8:	20000398 	.word	0x20000398
 80088fc:	200003a4 	.word	0x200003a4
 8008900:	200003b0 	.word	0x200003b0
 8008904:	200003cc 	.word	0x200003cc
 8008908:	200003d4 	.word	0x200003d4
 800890c:	200003f4 	.word	0x200003f4
 8008910:	20000404 	.word	0x20000404
 8008914:	0800b850 	.word	0x0800b850
 8008918:	0800b854 	.word	0x0800b854
 800891c:	2000042c 	.word	0x2000042c
 8008920:	20000454 	.word	0x20000454
 8008924:	20000464 	.word	0x20000464
 8008928:	20000468 	.word	0x20000468
 800892c:	0800bb84 	.word	0x0800bb84
 8008930:	20000470 	.word	0x20000470
 8008934:	200004bc 	.word	0x200004bc
 8008938:	200004cc 	.word	0x200004cc
 800893c:	200004ec 	.word	0x200004ec
 8008940:	2000050c 	.word	0x2000050c
 8008944:	20000524 	.word	0x20000524
 8008948:	2000053c 	.word	0x2000053c
 800894c:	20000554 	.word	0x20000554
 8008950:	2000056c 	.word	0x2000056c
 8008954:	20000584 	.word	0x20000584
 8008958:	2000059c 	.word	0x2000059c
 800895c:	200005b4 	.word	0x200005b4
 8008960:	200005dc 	.word	0x200005dc
 8008964:	200005e0 	.word	0x200005e0
 8008968:	88888889 	.word	0x88888889
 800896c:	200005e4 	.word	0x200005e4
 8008970:	66666667 	.word	0x66666667
 8008974:	2000124c 	.word	0x2000124c
 8008978:	20001250 	.word	0x20001250
 800897c:	20001254 	.word	0x20001254

08008980 <_GLOBAL__sub_I_report>:
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
 8008984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008988:	2001      	movs	r0, #1
 800898a:	f7ff fe87 	bl	800869c <_Z41__static_initialization_and_destruction_0ii>
 800898e:	bd80      	pop	{r7, pc}

08008990 <_GLOBAL__sub_D_report>:
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
 8008994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008998:	2000      	movs	r0, #0
 800899a:	f7ff fe7f 	bl	800869c <_Z41__static_initialization_and_destruction_0ii>
 800899e:	bd80      	pop	{r7, pc}

080089a0 <Reset_Handler>:
  ldr   r0, =_estack
 80089a0:	480d      	ldr	r0, [pc, #52]	; (80089d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80089a2:	4685      	mov	sp, r0
  bl  SystemInit
 80089a4:	f7f7 fe52 	bl	800064c <SystemInit>
  ldr r0, =_sdata
 80089a8:	480c      	ldr	r0, [pc, #48]	; (80089dc <LoopForever+0x6>)
  ldr r1, =_edata
 80089aa:	490d      	ldr	r1, [pc, #52]	; (80089e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80089ac:	4a0d      	ldr	r2, [pc, #52]	; (80089e4 <LoopForever+0xe>)
  movs r3, #0
 80089ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089b0:	e002      	b.n	80089b8 <LoopCopyDataInit>

080089b2 <CopyDataInit>:
  ldr r4, [r2, r3]
 80089b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089b6:	3304      	adds	r3, #4

080089b8 <LoopCopyDataInit>:
  adds r4, r0, r3
 80089b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089bc:	d3f9      	bcc.n	80089b2 <CopyDataInit>
  ldr r2, =_sbss
 80089be:	4a0a      	ldr	r2, [pc, #40]	; (80089e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80089c0:	4c0a      	ldr	r4, [pc, #40]	; (80089ec <LoopForever+0x16>)
  movs r3, #0
 80089c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089c4:	e001      	b.n	80089ca <LoopFillZerobss>

080089c6 <FillZerobss>:
  str  r3, [r2]
 80089c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089c8:	3204      	adds	r2, #4

080089ca <LoopFillZerobss>:
  cmp r2, r4
 80089ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089cc:	d3fb      	bcc.n	80089c6 <FillZerobss>
  bl __libc_init_array
 80089ce:	f000 ff39 	bl	8009844 <__libc_init_array>
  bl main
 80089d2:	f7ff fd13 	bl	80083fc <main>

080089d6 <LoopForever>:
    b LoopForever
 80089d6:	e7fe      	b.n	80089d6 <LoopForever>
  ldr   r0, =_estack
 80089d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80089dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089e0:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 80089e4:	0800c988 	.word	0x0800c988
  ldr r2, =_sbss
 80089e8:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 80089ec:	200013ac 	.word	0x200013ac

080089f0 <BusFault_Handler>:
  b Infinite_Loop
 80089f0:	e7fe      	b.n	80089f0 <BusFault_Handler>

080089f2 <_Znwj>:
 80089f2:	2801      	cmp	r0, #1
 80089f4:	bf38      	it	cc
 80089f6:	2001      	movcc	r0, #1
 80089f8:	b510      	push	{r4, lr}
 80089fa:	4604      	mov	r4, r0
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 f81b 	bl	8008a38 <malloc>
 8008a02:	b100      	cbz	r0, 8008a06 <_Znwj+0x14>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	f000 f807 	bl	8008a18 <_ZSt15get_new_handlerv>
 8008a0a:	b908      	cbnz	r0, 8008a10 <_Znwj+0x1e>
 8008a0c:	f000 f80c 	bl	8008a28 <abort>
 8008a10:	4780      	blx	r0
 8008a12:	e7f3      	b.n	80089fc <_Znwj+0xa>

08008a14 <_Znaj>:
 8008a14:	f7ff bfed 	b.w	80089f2 <_Znwj>

08008a18 <_ZSt15get_new_handlerv>:
 8008a18:	4b02      	ldr	r3, [pc, #8]	; (8008a24 <_ZSt15get_new_handlerv+0xc>)
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	f3bf 8f5b 	dmb	ish
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20001258 	.word	0x20001258

08008a28 <abort>:
 8008a28:	b508      	push	{r3, lr}
 8008a2a:	2006      	movs	r0, #6
 8008a2c:	f000 fe94 	bl	8009758 <raise>
 8008a30:	2001      	movs	r0, #1
 8008a32:	f002 fe5f 	bl	800b6f4 <_exit>
	...

08008a38 <malloc>:
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <malloc+0xc>)
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f000 b823 	b.w	8008a88 <_malloc_r>
 8008a42:	bf00      	nop
 8008a44:	2000017c 	.word	0x2000017c

08008a48 <sbrk_aligned>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	4e0e      	ldr	r6, [pc, #56]	; (8008a84 <sbrk_aligned+0x3c>)
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	6831      	ldr	r1, [r6, #0]
 8008a50:	4605      	mov	r5, r0
 8008a52:	b911      	cbnz	r1, 8008a5a <sbrk_aligned+0x12>
 8008a54:	f000 fed4 	bl	8009800 <_sbrk_r>
 8008a58:	6030      	str	r0, [r6, #0]
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	f000 fecf 	bl	8009800 <_sbrk_r>
 8008a62:	1c43      	adds	r3, r0, #1
 8008a64:	d00a      	beq.n	8008a7c <sbrk_aligned+0x34>
 8008a66:	1cc4      	adds	r4, r0, #3
 8008a68:	f024 0403 	bic.w	r4, r4, #3
 8008a6c:	42a0      	cmp	r0, r4
 8008a6e:	d007      	beq.n	8008a80 <sbrk_aligned+0x38>
 8008a70:	1a21      	subs	r1, r4, r0
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 fec4 	bl	8009800 <_sbrk_r>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d101      	bne.n	8008a80 <sbrk_aligned+0x38>
 8008a7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008a80:	4620      	mov	r0, r4
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	20001260 	.word	0x20001260

08008a88 <_malloc_r>:
 8008a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	1ccd      	adds	r5, r1, #3
 8008a8e:	f025 0503 	bic.w	r5, r5, #3
 8008a92:	3508      	adds	r5, #8
 8008a94:	2d0c      	cmp	r5, #12
 8008a96:	bf38      	it	cc
 8008a98:	250c      	movcc	r5, #12
 8008a9a:	2d00      	cmp	r5, #0
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	db01      	blt.n	8008aa4 <_malloc_r+0x1c>
 8008aa0:	42a9      	cmp	r1, r5
 8008aa2:	d905      	bls.n	8008ab0 <_malloc_r+0x28>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	2600      	movs	r6, #0
 8008aaa:	4630      	mov	r0, r6
 8008aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b84 <_malloc_r+0xfc>
 8008ab4:	f000 f868 	bl	8008b88 <__malloc_lock>
 8008ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8008abc:	461c      	mov	r4, r3
 8008abe:	bb5c      	cbnz	r4, 8008b18 <_malloc_r+0x90>
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	f7ff ffc0 	bl	8008a48 <sbrk_aligned>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	4604      	mov	r4, r0
 8008acc:	d155      	bne.n	8008b7a <_malloc_r+0xf2>
 8008ace:	f8d8 4000 	ldr.w	r4, [r8]
 8008ad2:	4626      	mov	r6, r4
 8008ad4:	2e00      	cmp	r6, #0
 8008ad6:	d145      	bne.n	8008b64 <_malloc_r+0xdc>
 8008ad8:	2c00      	cmp	r4, #0
 8008ada:	d048      	beq.n	8008b6e <_malloc_r+0xe6>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	eb04 0903 	add.w	r9, r4, r3
 8008ae6:	f000 fe8b 	bl	8009800 <_sbrk_r>
 8008aea:	4581      	cmp	r9, r0
 8008aec:	d13f      	bne.n	8008b6e <_malloc_r+0xe6>
 8008aee:	6821      	ldr	r1, [r4, #0]
 8008af0:	1a6d      	subs	r5, r5, r1
 8008af2:	4629      	mov	r1, r5
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7ff ffa7 	bl	8008a48 <sbrk_aligned>
 8008afa:	3001      	adds	r0, #1
 8008afc:	d037      	beq.n	8008b6e <_malloc_r+0xe6>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	442b      	add	r3, r5
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	f8d8 3000 	ldr.w	r3, [r8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d038      	beq.n	8008b7e <_malloc_r+0xf6>
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	42a2      	cmp	r2, r4
 8008b10:	d12b      	bne.n	8008b6a <_malloc_r+0xe2>
 8008b12:	2200      	movs	r2, #0
 8008b14:	605a      	str	r2, [r3, #4]
 8008b16:	e00f      	b.n	8008b38 <_malloc_r+0xb0>
 8008b18:	6822      	ldr	r2, [r4, #0]
 8008b1a:	1b52      	subs	r2, r2, r5
 8008b1c:	d41f      	bmi.n	8008b5e <_malloc_r+0xd6>
 8008b1e:	2a0b      	cmp	r2, #11
 8008b20:	d917      	bls.n	8008b52 <_malloc_r+0xca>
 8008b22:	1961      	adds	r1, r4, r5
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	6025      	str	r5, [r4, #0]
 8008b28:	bf18      	it	ne
 8008b2a:	6059      	strne	r1, [r3, #4]
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	bf08      	it	eq
 8008b30:	f8c8 1000 	streq.w	r1, [r8]
 8008b34:	5162      	str	r2, [r4, r5]
 8008b36:	604b      	str	r3, [r1, #4]
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f104 060b 	add.w	r6, r4, #11
 8008b3e:	f000 f829 	bl	8008b94 <__malloc_unlock>
 8008b42:	f026 0607 	bic.w	r6, r6, #7
 8008b46:	1d23      	adds	r3, r4, #4
 8008b48:	1af2      	subs	r2, r6, r3
 8008b4a:	d0ae      	beq.n	8008aaa <_malloc_r+0x22>
 8008b4c:	1b9b      	subs	r3, r3, r6
 8008b4e:	50a3      	str	r3, [r4, r2]
 8008b50:	e7ab      	b.n	8008aaa <_malloc_r+0x22>
 8008b52:	42a3      	cmp	r3, r4
 8008b54:	6862      	ldr	r2, [r4, #4]
 8008b56:	d1dd      	bne.n	8008b14 <_malloc_r+0x8c>
 8008b58:	f8c8 2000 	str.w	r2, [r8]
 8008b5c:	e7ec      	b.n	8008b38 <_malloc_r+0xb0>
 8008b5e:	4623      	mov	r3, r4
 8008b60:	6864      	ldr	r4, [r4, #4]
 8008b62:	e7ac      	b.n	8008abe <_malloc_r+0x36>
 8008b64:	4634      	mov	r4, r6
 8008b66:	6876      	ldr	r6, [r6, #4]
 8008b68:	e7b4      	b.n	8008ad4 <_malloc_r+0x4c>
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	e7cc      	b.n	8008b08 <_malloc_r+0x80>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	4638      	mov	r0, r7
 8008b74:	f000 f80e 	bl	8008b94 <__malloc_unlock>
 8008b78:	e797      	b.n	8008aaa <_malloc_r+0x22>
 8008b7a:	6025      	str	r5, [r4, #0]
 8008b7c:	e7dc      	b.n	8008b38 <_malloc_r+0xb0>
 8008b7e:	605b      	str	r3, [r3, #4]
 8008b80:	deff      	udf	#255	; 0xff
 8008b82:	bf00      	nop
 8008b84:	2000125c 	.word	0x2000125c

08008b88 <__malloc_lock>:
 8008b88:	4801      	ldr	r0, [pc, #4]	; (8008b90 <__malloc_lock+0x8>)
 8008b8a:	f000 be7f 	b.w	800988c <__retarget_lock_acquire_recursive>
 8008b8e:	bf00      	nop
 8008b90:	200013a4 	.word	0x200013a4

08008b94 <__malloc_unlock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	; (8008b9c <__malloc_unlock+0x8>)
 8008b96:	f000 be7a 	b.w	800988e <__retarget_lock_release_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	200013a4 	.word	0x200013a4

08008ba0 <__cvt>:
 8008ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba2:	ed2d 8b02 	vpush	{d8}
 8008ba6:	eeb0 8b40 	vmov.f64	d8, d0
 8008baa:	b085      	sub	sp, #20
 8008bac:	4617      	mov	r7, r2
 8008bae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008bb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008bb2:	ee18 2a90 	vmov	r2, s17
 8008bb6:	f025 0520 	bic.w	r5, r5, #32
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	bfb6      	itet	lt
 8008bbe:	222d      	movlt	r2, #45	; 0x2d
 8008bc0:	2200      	movge	r2, #0
 8008bc2:	eeb1 8b40 	vneglt.f64	d8, d0
 8008bc6:	2d46      	cmp	r5, #70	; 0x46
 8008bc8:	460c      	mov	r4, r1
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	d004      	beq.n	8008bd8 <__cvt+0x38>
 8008bce:	2d45      	cmp	r5, #69	; 0x45
 8008bd0:	d100      	bne.n	8008bd4 <__cvt+0x34>
 8008bd2:	3401      	adds	r4, #1
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	e000      	b.n	8008bda <__cvt+0x3a>
 8008bd8:	2103      	movs	r1, #3
 8008bda:	ab03      	add	r3, sp, #12
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	ab02      	add	r3, sp, #8
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	4622      	mov	r2, r4
 8008be4:	4633      	mov	r3, r6
 8008be6:	eeb0 0b48 	vmov.f64	d0, d8
 8008bea:	f000 fed9 	bl	80099a0 <_dtoa_r>
 8008bee:	2d47      	cmp	r5, #71	; 0x47
 8008bf0:	d101      	bne.n	8008bf6 <__cvt+0x56>
 8008bf2:	07fb      	lsls	r3, r7, #31
 8008bf4:	d51a      	bpl.n	8008c2c <__cvt+0x8c>
 8008bf6:	2d46      	cmp	r5, #70	; 0x46
 8008bf8:	eb00 0204 	add.w	r2, r0, r4
 8008bfc:	d10c      	bne.n	8008c18 <__cvt+0x78>
 8008bfe:	7803      	ldrb	r3, [r0, #0]
 8008c00:	2b30      	cmp	r3, #48	; 0x30
 8008c02:	d107      	bne.n	8008c14 <__cvt+0x74>
 8008c04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0c:	bf1c      	itt	ne
 8008c0e:	f1c4 0401 	rsbne	r4, r4, #1
 8008c12:	6034      	strne	r4, [r6, #0]
 8008c14:	6833      	ldr	r3, [r6, #0]
 8008c16:	441a      	add	r2, r3
 8008c18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c20:	bf08      	it	eq
 8008c22:	9203      	streq	r2, [sp, #12]
 8008c24:	2130      	movs	r1, #48	; 0x30
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d307      	bcc.n	8008c3c <__cvt+0x9c>
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c30:	1a1b      	subs	r3, r3, r0
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	b005      	add	sp, #20
 8008c36:	ecbd 8b02 	vpop	{d8}
 8008c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3c:	1c5c      	adds	r4, r3, #1
 8008c3e:	9403      	str	r4, [sp, #12]
 8008c40:	7019      	strb	r1, [r3, #0]
 8008c42:	e7f0      	b.n	8008c26 <__cvt+0x86>

08008c44 <__exponent>:
 8008c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c46:	4603      	mov	r3, r0
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	bfb8      	it	lt
 8008c4c:	4249      	neglt	r1, r1
 8008c4e:	f803 2b02 	strb.w	r2, [r3], #2
 8008c52:	bfb4      	ite	lt
 8008c54:	222d      	movlt	r2, #45	; 0x2d
 8008c56:	222b      	movge	r2, #43	; 0x2b
 8008c58:	2909      	cmp	r1, #9
 8008c5a:	7042      	strb	r2, [r0, #1]
 8008c5c:	dd2a      	ble.n	8008cb4 <__exponent+0x70>
 8008c5e:	f10d 0207 	add.w	r2, sp, #7
 8008c62:	4617      	mov	r7, r2
 8008c64:	260a      	movs	r6, #10
 8008c66:	4694      	mov	ip, r2
 8008c68:	fb91 f5f6 	sdiv	r5, r1, r6
 8008c6c:	fb06 1415 	mls	r4, r6, r5, r1
 8008c70:	3430      	adds	r4, #48	; 0x30
 8008c72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008c76:	460c      	mov	r4, r1
 8008c78:	2c63      	cmp	r4, #99	; 0x63
 8008c7a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008c7e:	4629      	mov	r1, r5
 8008c80:	dcf1      	bgt.n	8008c66 <__exponent+0x22>
 8008c82:	3130      	adds	r1, #48	; 0x30
 8008c84:	f1ac 0402 	sub.w	r4, ip, #2
 8008c88:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c8c:	1c41      	adds	r1, r0, #1
 8008c8e:	4622      	mov	r2, r4
 8008c90:	42ba      	cmp	r2, r7
 8008c92:	d30a      	bcc.n	8008caa <__exponent+0x66>
 8008c94:	f10d 0209 	add.w	r2, sp, #9
 8008c98:	eba2 020c 	sub.w	r2, r2, ip
 8008c9c:	42bc      	cmp	r4, r7
 8008c9e:	bf88      	it	hi
 8008ca0:	2200      	movhi	r2, #0
 8008ca2:	4413      	add	r3, r2
 8008ca4:	1a18      	subs	r0, r3, r0
 8008ca6:	b003      	add	sp, #12
 8008ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008caa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008cae:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008cb2:	e7ed      	b.n	8008c90 <__exponent+0x4c>
 8008cb4:	2330      	movs	r3, #48	; 0x30
 8008cb6:	3130      	adds	r1, #48	; 0x30
 8008cb8:	7083      	strb	r3, [r0, #2]
 8008cba:	70c1      	strb	r1, [r0, #3]
 8008cbc:	1d03      	adds	r3, r0, #4
 8008cbe:	e7f1      	b.n	8008ca4 <__exponent+0x60>

08008cc0 <_printf_float>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	b08b      	sub	sp, #44	; 0x2c
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008ccc:	4616      	mov	r6, r2
 8008cce:	461f      	mov	r7, r3
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	f000 fd49 	bl	8009768 <_localeconv_r>
 8008cd6:	f8d0 b000 	ldr.w	fp, [r0]
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f7f7 fb28 	bl	8000330 <strlen>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9308      	str	r3, [sp, #32]
 8008ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	3307      	adds	r3, #7
 8008cf0:	f023 0307 	bic.w	r3, r3, #7
 8008cf4:	f103 0108 	add.w	r1, r3, #8
 8008cf8:	f8c8 1000 	str.w	r1, [r8]
 8008cfc:	ed93 0b00 	vldr	d0, [r3]
 8008d00:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008f60 <_printf_float+0x2a0>
 8008d04:	eeb0 7bc0 	vabs.f64	d7, d0
 8008d08:	eeb4 7b46 	vcmp.f64	d7, d6
 8008d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d10:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8008d14:	4682      	mov	sl, r0
 8008d16:	dd24      	ble.n	8008d62 <_printf_float+0xa2>
 8008d18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	d502      	bpl.n	8008d28 <_printf_float+0x68>
 8008d22:	232d      	movs	r3, #45	; 0x2d
 8008d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d28:	498f      	ldr	r1, [pc, #572]	; (8008f68 <_printf_float+0x2a8>)
 8008d2a:	4b90      	ldr	r3, [pc, #576]	; (8008f6c <_printf_float+0x2ac>)
 8008d2c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008d30:	bf94      	ite	ls
 8008d32:	4688      	movls	r8, r1
 8008d34:	4698      	movhi	r8, r3
 8008d36:	2303      	movs	r3, #3
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	f022 0204 	bic.w	r2, r2, #4
 8008d3e:	2300      	movs	r3, #0
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	9700      	str	r7, [sp, #0]
 8008d46:	4633      	mov	r3, r6
 8008d48:	aa09      	add	r2, sp, #36	; 0x24
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 f9d1 	bl	80090f4 <_printf_common>
 8008d52:	3001      	adds	r0, #1
 8008d54:	f040 808a 	bne.w	8008e6c <_printf_float+0x1ac>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5c:	b00b      	add	sp, #44	; 0x2c
 8008d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d62:	eeb4 0b40 	vcmp.f64	d0, d0
 8008d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6a:	d709      	bvc.n	8008d80 <_printf_float+0xc0>
 8008d6c:	ee10 3a90 	vmov	r3, s1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bfbc      	itt	lt
 8008d74:	232d      	movlt	r3, #45	; 0x2d
 8008d76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d7a:	497d      	ldr	r1, [pc, #500]	; (8008f70 <_printf_float+0x2b0>)
 8008d7c:	4b7d      	ldr	r3, [pc, #500]	; (8008f74 <_printf_float+0x2b4>)
 8008d7e:	e7d5      	b.n	8008d2c <_printf_float+0x6c>
 8008d80:	6863      	ldr	r3, [r4, #4]
 8008d82:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008d86:	9104      	str	r1, [sp, #16]
 8008d88:	1c59      	adds	r1, r3, #1
 8008d8a:	d13c      	bne.n	8008e06 <_printf_float+0x146>
 8008d8c:	2306      	movs	r3, #6
 8008d8e:	6063      	str	r3, [r4, #4]
 8008d90:	2300      	movs	r3, #0
 8008d92:	9303      	str	r3, [sp, #12]
 8008d94:	ab08      	add	r3, sp, #32
 8008d96:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d9e:	ab07      	add	r3, sp, #28
 8008da0:	6861      	ldr	r1, [r4, #4]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	6022      	str	r2, [r4, #0]
 8008da6:	f10d 031b 	add.w	r3, sp, #27
 8008daa:	4628      	mov	r0, r5
 8008dac:	f7ff fef8 	bl	8008ba0 <__cvt>
 8008db0:	9b04      	ldr	r3, [sp, #16]
 8008db2:	9907      	ldr	r1, [sp, #28]
 8008db4:	2b47      	cmp	r3, #71	; 0x47
 8008db6:	4680      	mov	r8, r0
 8008db8:	d108      	bne.n	8008dcc <_printf_float+0x10c>
 8008dba:	1cc8      	adds	r0, r1, #3
 8008dbc:	db02      	blt.n	8008dc4 <_printf_float+0x104>
 8008dbe:	6863      	ldr	r3, [r4, #4]
 8008dc0:	4299      	cmp	r1, r3
 8008dc2:	dd41      	ble.n	8008e48 <_printf_float+0x188>
 8008dc4:	f1a9 0902 	sub.w	r9, r9, #2
 8008dc8:	fa5f f989 	uxtb.w	r9, r9
 8008dcc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008dd0:	d820      	bhi.n	8008e14 <_printf_float+0x154>
 8008dd2:	3901      	subs	r1, #1
 8008dd4:	464a      	mov	r2, r9
 8008dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008dda:	9107      	str	r1, [sp, #28]
 8008ddc:	f7ff ff32 	bl	8008c44 <__exponent>
 8008de0:	9a08      	ldr	r2, [sp, #32]
 8008de2:	9004      	str	r0, [sp, #16]
 8008de4:	1813      	adds	r3, r2, r0
 8008de6:	2a01      	cmp	r2, #1
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	dc02      	bgt.n	8008df2 <_printf_float+0x132>
 8008dec:	6822      	ldr	r2, [r4, #0]
 8008dee:	07d2      	lsls	r2, r2, #31
 8008df0:	d501      	bpl.n	8008df6 <_printf_float+0x136>
 8008df2:	3301      	adds	r3, #1
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0a2      	beq.n	8008d44 <_printf_float+0x84>
 8008dfe:	232d      	movs	r3, #45	; 0x2d
 8008e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e04:	e79e      	b.n	8008d44 <_printf_float+0x84>
 8008e06:	9904      	ldr	r1, [sp, #16]
 8008e08:	2947      	cmp	r1, #71	; 0x47
 8008e0a:	d1c1      	bne.n	8008d90 <_printf_float+0xd0>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1bf      	bne.n	8008d90 <_printf_float+0xd0>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e7bc      	b.n	8008d8e <_printf_float+0xce>
 8008e14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008e18:	d118      	bne.n	8008e4c <_printf_float+0x18c>
 8008e1a:	2900      	cmp	r1, #0
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	dd0b      	ble.n	8008e38 <_printf_float+0x178>
 8008e20:	6121      	str	r1, [r4, #16]
 8008e22:	b913      	cbnz	r3, 8008e2a <_printf_float+0x16a>
 8008e24:	6822      	ldr	r2, [r4, #0]
 8008e26:	07d0      	lsls	r0, r2, #31
 8008e28:	d502      	bpl.n	8008e30 <_printf_float+0x170>
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	440b      	add	r3, r1
 8008e2e:	6123      	str	r3, [r4, #16]
 8008e30:	2300      	movs	r3, #0
 8008e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	e7de      	b.n	8008df6 <_printf_float+0x136>
 8008e38:	b913      	cbnz	r3, 8008e40 <_printf_float+0x180>
 8008e3a:	6822      	ldr	r2, [r4, #0]
 8008e3c:	07d2      	lsls	r2, r2, #31
 8008e3e:	d501      	bpl.n	8008e44 <_printf_float+0x184>
 8008e40:	3302      	adds	r3, #2
 8008e42:	e7f4      	b.n	8008e2e <_printf_float+0x16e>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e7f2      	b.n	8008e2e <_printf_float+0x16e>
 8008e48:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	4299      	cmp	r1, r3
 8008e50:	db05      	blt.n	8008e5e <_printf_float+0x19e>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	6121      	str	r1, [r4, #16]
 8008e56:	07d8      	lsls	r0, r3, #31
 8008e58:	d5ea      	bpl.n	8008e30 <_printf_float+0x170>
 8008e5a:	1c4b      	adds	r3, r1, #1
 8008e5c:	e7e7      	b.n	8008e2e <_printf_float+0x16e>
 8008e5e:	2900      	cmp	r1, #0
 8008e60:	bfd4      	ite	le
 8008e62:	f1c1 0202 	rsble	r2, r1, #2
 8008e66:	2201      	movgt	r2, #1
 8008e68:	4413      	add	r3, r2
 8008e6a:	e7e0      	b.n	8008e2e <_printf_float+0x16e>
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	055a      	lsls	r2, r3, #21
 8008e70:	d407      	bmi.n	8008e82 <_printf_float+0x1c2>
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	4642      	mov	r2, r8
 8008e76:	4631      	mov	r1, r6
 8008e78:	4628      	mov	r0, r5
 8008e7a:	47b8      	blx	r7
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d12a      	bne.n	8008ed6 <_printf_float+0x216>
 8008e80:	e76a      	b.n	8008d58 <_printf_float+0x98>
 8008e82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008e86:	f240 80e0 	bls.w	800904a <_printf_float+0x38a>
 8008e8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008e8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	d133      	bne.n	8008f00 <_printf_float+0x240>
 8008e98:	4a37      	ldr	r2, [pc, #220]	; (8008f78 <_printf_float+0x2b8>)
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	47b8      	blx	r7
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	f43f af58 	beq.w	8008d58 <_printf_float+0x98>
 8008ea8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	db02      	blt.n	8008eb6 <_printf_float+0x1f6>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07d8      	lsls	r0, r3, #31
 8008eb4:	d50f      	bpl.n	8008ed6 <_printf_float+0x216>
 8008eb6:	4653      	mov	r3, sl
 8008eb8:	465a      	mov	r2, fp
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f43f af49 	beq.w	8008d58 <_printf_float+0x98>
 8008ec6:	f04f 0800 	mov.w	r8, #0
 8008eca:	f104 091a 	add.w	r9, r4, #26
 8008ece:	9b08      	ldr	r3, [sp, #32]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	4543      	cmp	r3, r8
 8008ed4:	dc09      	bgt.n	8008eea <_printf_float+0x22a>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	079b      	lsls	r3, r3, #30
 8008eda:	f100 8106 	bmi.w	80090ea <_printf_float+0x42a>
 8008ede:	68e0      	ldr	r0, [r4, #12]
 8008ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee2:	4298      	cmp	r0, r3
 8008ee4:	bfb8      	it	lt
 8008ee6:	4618      	movlt	r0, r3
 8008ee8:	e738      	b.n	8008d5c <_printf_float+0x9c>
 8008eea:	2301      	movs	r3, #1
 8008eec:	464a      	mov	r2, r9
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f43f af2f 	beq.w	8008d58 <_printf_float+0x98>
 8008efa:	f108 0801 	add.w	r8, r8, #1
 8008efe:	e7e6      	b.n	8008ece <_printf_float+0x20e>
 8008f00:	9b07      	ldr	r3, [sp, #28]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	dc3a      	bgt.n	8008f7c <_printf_float+0x2bc>
 8008f06:	4a1c      	ldr	r2, [pc, #112]	; (8008f78 <_printf_float+0x2b8>)
 8008f08:	2301      	movs	r3, #1
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	47b8      	blx	r7
 8008f10:	3001      	adds	r0, #1
 8008f12:	f43f af21 	beq.w	8008d58 <_printf_float+0x98>
 8008f16:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	d102      	bne.n	8008f24 <_printf_float+0x264>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	07d9      	lsls	r1, r3, #31
 8008f22:	d5d8      	bpl.n	8008ed6 <_printf_float+0x216>
 8008f24:	4653      	mov	r3, sl
 8008f26:	465a      	mov	r2, fp
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f43f af12 	beq.w	8008d58 <_printf_float+0x98>
 8008f34:	f04f 0900 	mov.w	r9, #0
 8008f38:	f104 0a1a 	add.w	sl, r4, #26
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	425b      	negs	r3, r3
 8008f40:	454b      	cmp	r3, r9
 8008f42:	dc01      	bgt.n	8008f48 <_printf_float+0x288>
 8008f44:	9b08      	ldr	r3, [sp, #32]
 8008f46:	e795      	b.n	8008e74 <_printf_float+0x1b4>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4652      	mov	r2, sl
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b8      	blx	r7
 8008f52:	3001      	adds	r0, #1
 8008f54:	f43f af00 	beq.w	8008d58 <_printf_float+0x98>
 8008f58:	f109 0901 	add.w	r9, r9, #1
 8008f5c:	e7ee      	b.n	8008f3c <_printf_float+0x27c>
 8008f5e:	bf00      	nop
 8008f60:	ffffffff 	.word	0xffffffff
 8008f64:	7fefffff 	.word	0x7fefffff
 8008f68:	0800c600 	.word	0x0800c600
 8008f6c:	0800c604 	.word	0x0800c604
 8008f70:	0800c608 	.word	0x0800c608
 8008f74:	0800c60c 	.word	0x0800c60c
 8008f78:	0800c610 	.word	0x0800c610
 8008f7c:	9a08      	ldr	r2, [sp, #32]
 8008f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f80:	429a      	cmp	r2, r3
 8008f82:	bfa8      	it	ge
 8008f84:	461a      	movge	r2, r3
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	4691      	mov	r9, r2
 8008f8a:	dc38      	bgt.n	8008ffe <_printf_float+0x33e>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9305      	str	r3, [sp, #20]
 8008f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f94:	f104 021a 	add.w	r2, r4, #26
 8008f98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f9a:	9905      	ldr	r1, [sp, #20]
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	eba3 0309 	sub.w	r3, r3, r9
 8008fa2:	428b      	cmp	r3, r1
 8008fa4:	dc33      	bgt.n	800900e <_printf_float+0x34e>
 8008fa6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	db3c      	blt.n	8009028 <_printf_float+0x368>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	07da      	lsls	r2, r3, #31
 8008fb2:	d439      	bmi.n	8009028 <_printf_float+0x368>
 8008fb4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008fb8:	eba2 0903 	sub.w	r9, r2, r3
 8008fbc:	9b04      	ldr	r3, [sp, #16]
 8008fbe:	1ad2      	subs	r2, r2, r3
 8008fc0:	4591      	cmp	r9, r2
 8008fc2:	bfa8      	it	ge
 8008fc4:	4691      	movge	r9, r2
 8008fc6:	f1b9 0f00 	cmp.w	r9, #0
 8008fca:	dc35      	bgt.n	8009038 <_printf_float+0x378>
 8008fcc:	f04f 0800 	mov.w	r8, #0
 8008fd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fd4:	f104 0a1a 	add.w	sl, r4, #26
 8008fd8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008fdc:	1a9b      	subs	r3, r3, r2
 8008fde:	eba3 0309 	sub.w	r3, r3, r9
 8008fe2:	4543      	cmp	r3, r8
 8008fe4:	f77f af77 	ble.w	8008ed6 <_printf_float+0x216>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4652      	mov	r2, sl
 8008fec:	4631      	mov	r1, r6
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b8      	blx	r7
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	f43f aeb0 	beq.w	8008d58 <_printf_float+0x98>
 8008ff8:	f108 0801 	add.w	r8, r8, #1
 8008ffc:	e7ec      	b.n	8008fd8 <_printf_float+0x318>
 8008ffe:	4613      	mov	r3, r2
 8009000:	4631      	mov	r1, r6
 8009002:	4642      	mov	r2, r8
 8009004:	4628      	mov	r0, r5
 8009006:	47b8      	blx	r7
 8009008:	3001      	adds	r0, #1
 800900a:	d1bf      	bne.n	8008f8c <_printf_float+0x2cc>
 800900c:	e6a4      	b.n	8008d58 <_printf_float+0x98>
 800900e:	2301      	movs	r3, #1
 8009010:	4631      	mov	r1, r6
 8009012:	4628      	mov	r0, r5
 8009014:	9204      	str	r2, [sp, #16]
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	f43f ae9d 	beq.w	8008d58 <_printf_float+0x98>
 800901e:	9b05      	ldr	r3, [sp, #20]
 8009020:	9a04      	ldr	r2, [sp, #16]
 8009022:	3301      	adds	r3, #1
 8009024:	9305      	str	r3, [sp, #20]
 8009026:	e7b7      	b.n	8008f98 <_printf_float+0x2d8>
 8009028:	4653      	mov	r3, sl
 800902a:	465a      	mov	r2, fp
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	d1be      	bne.n	8008fb4 <_printf_float+0x2f4>
 8009036:	e68f      	b.n	8008d58 <_printf_float+0x98>
 8009038:	9a04      	ldr	r2, [sp, #16]
 800903a:	464b      	mov	r3, r9
 800903c:	4442      	add	r2, r8
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	47b8      	blx	r7
 8009044:	3001      	adds	r0, #1
 8009046:	d1c1      	bne.n	8008fcc <_printf_float+0x30c>
 8009048:	e686      	b.n	8008d58 <_printf_float+0x98>
 800904a:	9a08      	ldr	r2, [sp, #32]
 800904c:	2a01      	cmp	r2, #1
 800904e:	dc01      	bgt.n	8009054 <_printf_float+0x394>
 8009050:	07db      	lsls	r3, r3, #31
 8009052:	d537      	bpl.n	80090c4 <_printf_float+0x404>
 8009054:	2301      	movs	r3, #1
 8009056:	4642      	mov	r2, r8
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f ae7a 	beq.w	8008d58 <_printf_float+0x98>
 8009064:	4653      	mov	r3, sl
 8009066:	465a      	mov	r2, fp
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	f43f ae72 	beq.w	8008d58 <_printf_float+0x98>
 8009074:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009078:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009080:	9b08      	ldr	r3, [sp, #32]
 8009082:	d01a      	beq.n	80090ba <_printf_float+0x3fa>
 8009084:	3b01      	subs	r3, #1
 8009086:	f108 0201 	add.w	r2, r8, #1
 800908a:	4631      	mov	r1, r6
 800908c:	4628      	mov	r0, r5
 800908e:	47b8      	blx	r7
 8009090:	3001      	adds	r0, #1
 8009092:	d10e      	bne.n	80090b2 <_printf_float+0x3f2>
 8009094:	e660      	b.n	8008d58 <_printf_float+0x98>
 8009096:	2301      	movs	r3, #1
 8009098:	464a      	mov	r2, r9
 800909a:	4631      	mov	r1, r6
 800909c:	4628      	mov	r0, r5
 800909e:	47b8      	blx	r7
 80090a0:	3001      	adds	r0, #1
 80090a2:	f43f ae59 	beq.w	8008d58 <_printf_float+0x98>
 80090a6:	f108 0801 	add.w	r8, r8, #1
 80090aa:	9b08      	ldr	r3, [sp, #32]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	4543      	cmp	r3, r8
 80090b0:	dcf1      	bgt.n	8009096 <_printf_float+0x3d6>
 80090b2:	9b04      	ldr	r3, [sp, #16]
 80090b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090b8:	e6dd      	b.n	8008e76 <_printf_float+0x1b6>
 80090ba:	f04f 0800 	mov.w	r8, #0
 80090be:	f104 091a 	add.w	r9, r4, #26
 80090c2:	e7f2      	b.n	80090aa <_printf_float+0x3ea>
 80090c4:	2301      	movs	r3, #1
 80090c6:	4642      	mov	r2, r8
 80090c8:	e7df      	b.n	800908a <_printf_float+0x3ca>
 80090ca:	2301      	movs	r3, #1
 80090cc:	464a      	mov	r2, r9
 80090ce:	4631      	mov	r1, r6
 80090d0:	4628      	mov	r0, r5
 80090d2:	47b8      	blx	r7
 80090d4:	3001      	adds	r0, #1
 80090d6:	f43f ae3f 	beq.w	8008d58 <_printf_float+0x98>
 80090da:	f108 0801 	add.w	r8, r8, #1
 80090de:	68e3      	ldr	r3, [r4, #12]
 80090e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090e2:	1a5b      	subs	r3, r3, r1
 80090e4:	4543      	cmp	r3, r8
 80090e6:	dcf0      	bgt.n	80090ca <_printf_float+0x40a>
 80090e8:	e6f9      	b.n	8008ede <_printf_float+0x21e>
 80090ea:	f04f 0800 	mov.w	r8, #0
 80090ee:	f104 0919 	add.w	r9, r4, #25
 80090f2:	e7f4      	b.n	80090de <_printf_float+0x41e>

080090f4 <_printf_common>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	4616      	mov	r6, r2
 80090fa:	4699      	mov	r9, r3
 80090fc:	688a      	ldr	r2, [r1, #8]
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009104:	4293      	cmp	r3, r2
 8009106:	bfb8      	it	lt
 8009108:	4613      	movlt	r3, r2
 800910a:	6033      	str	r3, [r6, #0]
 800910c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009110:	4607      	mov	r7, r0
 8009112:	460c      	mov	r4, r1
 8009114:	b10a      	cbz	r2, 800911a <_printf_common+0x26>
 8009116:	3301      	adds	r3, #1
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	0699      	lsls	r1, r3, #26
 800911e:	bf42      	ittt	mi
 8009120:	6833      	ldrmi	r3, [r6, #0]
 8009122:	3302      	addmi	r3, #2
 8009124:	6033      	strmi	r3, [r6, #0]
 8009126:	6825      	ldr	r5, [r4, #0]
 8009128:	f015 0506 	ands.w	r5, r5, #6
 800912c:	d106      	bne.n	800913c <_printf_common+0x48>
 800912e:	f104 0a19 	add.w	sl, r4, #25
 8009132:	68e3      	ldr	r3, [r4, #12]
 8009134:	6832      	ldr	r2, [r6, #0]
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	42ab      	cmp	r3, r5
 800913a:	dc26      	bgt.n	800918a <_printf_common+0x96>
 800913c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009140:	1e13      	subs	r3, r2, #0
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	bf18      	it	ne
 8009146:	2301      	movne	r3, #1
 8009148:	0692      	lsls	r2, r2, #26
 800914a:	d42b      	bmi.n	80091a4 <_printf_common+0xb0>
 800914c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009150:	4649      	mov	r1, r9
 8009152:	4638      	mov	r0, r7
 8009154:	47c0      	blx	r8
 8009156:	3001      	adds	r0, #1
 8009158:	d01e      	beq.n	8009198 <_printf_common+0xa4>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	6922      	ldr	r2, [r4, #16]
 800915e:	f003 0306 	and.w	r3, r3, #6
 8009162:	2b04      	cmp	r3, #4
 8009164:	bf02      	ittt	eq
 8009166:	68e5      	ldreq	r5, [r4, #12]
 8009168:	6833      	ldreq	r3, [r6, #0]
 800916a:	1aed      	subeq	r5, r5, r3
 800916c:	68a3      	ldr	r3, [r4, #8]
 800916e:	bf0c      	ite	eq
 8009170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009174:	2500      	movne	r5, #0
 8009176:	4293      	cmp	r3, r2
 8009178:	bfc4      	itt	gt
 800917a:	1a9b      	subgt	r3, r3, r2
 800917c:	18ed      	addgt	r5, r5, r3
 800917e:	2600      	movs	r6, #0
 8009180:	341a      	adds	r4, #26
 8009182:	42b5      	cmp	r5, r6
 8009184:	d11a      	bne.n	80091bc <_printf_common+0xc8>
 8009186:	2000      	movs	r0, #0
 8009188:	e008      	b.n	800919c <_printf_common+0xa8>
 800918a:	2301      	movs	r3, #1
 800918c:	4652      	mov	r2, sl
 800918e:	4649      	mov	r1, r9
 8009190:	4638      	mov	r0, r7
 8009192:	47c0      	blx	r8
 8009194:	3001      	adds	r0, #1
 8009196:	d103      	bne.n	80091a0 <_printf_common+0xac>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800919c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a0:	3501      	adds	r5, #1
 80091a2:	e7c6      	b.n	8009132 <_printf_common+0x3e>
 80091a4:	18e1      	adds	r1, r4, r3
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	2030      	movs	r0, #48	; 0x30
 80091aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ae:	4422      	add	r2, r4
 80091b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b8:	3302      	adds	r3, #2
 80091ba:	e7c7      	b.n	800914c <_printf_common+0x58>
 80091bc:	2301      	movs	r3, #1
 80091be:	4622      	mov	r2, r4
 80091c0:	4649      	mov	r1, r9
 80091c2:	4638      	mov	r0, r7
 80091c4:	47c0      	blx	r8
 80091c6:	3001      	adds	r0, #1
 80091c8:	d0e6      	beq.n	8009198 <_printf_common+0xa4>
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7d9      	b.n	8009182 <_printf_common+0x8e>
	...

080091d0 <_printf_i>:
 80091d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	7e0f      	ldrb	r7, [r1, #24]
 80091d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091d8:	2f78      	cmp	r7, #120	; 0x78
 80091da:	4691      	mov	r9, r2
 80091dc:	4680      	mov	r8, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	469a      	mov	sl, r3
 80091e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091e6:	d807      	bhi.n	80091f8 <_printf_i+0x28>
 80091e8:	2f62      	cmp	r7, #98	; 0x62
 80091ea:	d80a      	bhi.n	8009202 <_printf_i+0x32>
 80091ec:	2f00      	cmp	r7, #0
 80091ee:	f000 80d4 	beq.w	800939a <_printf_i+0x1ca>
 80091f2:	2f58      	cmp	r7, #88	; 0x58
 80091f4:	f000 80c0 	beq.w	8009378 <_printf_i+0x1a8>
 80091f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009200:	e03a      	b.n	8009278 <_printf_i+0xa8>
 8009202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009206:	2b15      	cmp	r3, #21
 8009208:	d8f6      	bhi.n	80091f8 <_printf_i+0x28>
 800920a:	a101      	add	r1, pc, #4	; (adr r1, 8009210 <_printf_i+0x40>)
 800920c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009210:	08009269 	.word	0x08009269
 8009214:	0800927d 	.word	0x0800927d
 8009218:	080091f9 	.word	0x080091f9
 800921c:	080091f9 	.word	0x080091f9
 8009220:	080091f9 	.word	0x080091f9
 8009224:	080091f9 	.word	0x080091f9
 8009228:	0800927d 	.word	0x0800927d
 800922c:	080091f9 	.word	0x080091f9
 8009230:	080091f9 	.word	0x080091f9
 8009234:	080091f9 	.word	0x080091f9
 8009238:	080091f9 	.word	0x080091f9
 800923c:	08009381 	.word	0x08009381
 8009240:	080092a9 	.word	0x080092a9
 8009244:	0800933b 	.word	0x0800933b
 8009248:	080091f9 	.word	0x080091f9
 800924c:	080091f9 	.word	0x080091f9
 8009250:	080093a3 	.word	0x080093a3
 8009254:	080091f9 	.word	0x080091f9
 8009258:	080092a9 	.word	0x080092a9
 800925c:	080091f9 	.word	0x080091f9
 8009260:	080091f9 	.word	0x080091f9
 8009264:	08009343 	.word	0x08009343
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	1d1a      	adds	r2, r3, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	602a      	str	r2, [r5, #0]
 8009270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009278:	2301      	movs	r3, #1
 800927a:	e09f      	b.n	80093bc <_printf_i+0x1ec>
 800927c:	6820      	ldr	r0, [r4, #0]
 800927e:	682b      	ldr	r3, [r5, #0]
 8009280:	0607      	lsls	r7, r0, #24
 8009282:	f103 0104 	add.w	r1, r3, #4
 8009286:	6029      	str	r1, [r5, #0]
 8009288:	d501      	bpl.n	800928e <_printf_i+0xbe>
 800928a:	681e      	ldr	r6, [r3, #0]
 800928c:	e003      	b.n	8009296 <_printf_i+0xc6>
 800928e:	0646      	lsls	r6, r0, #25
 8009290:	d5fb      	bpl.n	800928a <_printf_i+0xba>
 8009292:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009296:	2e00      	cmp	r6, #0
 8009298:	da03      	bge.n	80092a2 <_printf_i+0xd2>
 800929a:	232d      	movs	r3, #45	; 0x2d
 800929c:	4276      	negs	r6, r6
 800929e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092a2:	485a      	ldr	r0, [pc, #360]	; (800940c <_printf_i+0x23c>)
 80092a4:	230a      	movs	r3, #10
 80092a6:	e012      	b.n	80092ce <_printf_i+0xfe>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	6820      	ldr	r0, [r4, #0]
 80092ac:	1d19      	adds	r1, r3, #4
 80092ae:	6029      	str	r1, [r5, #0]
 80092b0:	0605      	lsls	r5, r0, #24
 80092b2:	d501      	bpl.n	80092b8 <_printf_i+0xe8>
 80092b4:	681e      	ldr	r6, [r3, #0]
 80092b6:	e002      	b.n	80092be <_printf_i+0xee>
 80092b8:	0641      	lsls	r1, r0, #25
 80092ba:	d5fb      	bpl.n	80092b4 <_printf_i+0xe4>
 80092bc:	881e      	ldrh	r6, [r3, #0]
 80092be:	4853      	ldr	r0, [pc, #332]	; (800940c <_printf_i+0x23c>)
 80092c0:	2f6f      	cmp	r7, #111	; 0x6f
 80092c2:	bf0c      	ite	eq
 80092c4:	2308      	moveq	r3, #8
 80092c6:	230a      	movne	r3, #10
 80092c8:	2100      	movs	r1, #0
 80092ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ce:	6865      	ldr	r5, [r4, #4]
 80092d0:	60a5      	str	r5, [r4, #8]
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	bfa2      	ittt	ge
 80092d6:	6821      	ldrge	r1, [r4, #0]
 80092d8:	f021 0104 	bicge.w	r1, r1, #4
 80092dc:	6021      	strge	r1, [r4, #0]
 80092de:	b90e      	cbnz	r6, 80092e4 <_printf_i+0x114>
 80092e0:	2d00      	cmp	r5, #0
 80092e2:	d04b      	beq.n	800937c <_printf_i+0x1ac>
 80092e4:	4615      	mov	r5, r2
 80092e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80092ea:	fb03 6711 	mls	r7, r3, r1, r6
 80092ee:	5dc7      	ldrb	r7, [r0, r7]
 80092f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092f4:	4637      	mov	r7, r6
 80092f6:	42bb      	cmp	r3, r7
 80092f8:	460e      	mov	r6, r1
 80092fa:	d9f4      	bls.n	80092e6 <_printf_i+0x116>
 80092fc:	2b08      	cmp	r3, #8
 80092fe:	d10b      	bne.n	8009318 <_printf_i+0x148>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	07de      	lsls	r6, r3, #31
 8009304:	d508      	bpl.n	8009318 <_printf_i+0x148>
 8009306:	6923      	ldr	r3, [r4, #16]
 8009308:	6861      	ldr	r1, [r4, #4]
 800930a:	4299      	cmp	r1, r3
 800930c:	bfde      	ittt	le
 800930e:	2330      	movle	r3, #48	; 0x30
 8009310:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009314:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009318:	1b52      	subs	r2, r2, r5
 800931a:	6122      	str	r2, [r4, #16]
 800931c:	f8cd a000 	str.w	sl, [sp]
 8009320:	464b      	mov	r3, r9
 8009322:	aa03      	add	r2, sp, #12
 8009324:	4621      	mov	r1, r4
 8009326:	4640      	mov	r0, r8
 8009328:	f7ff fee4 	bl	80090f4 <_printf_common>
 800932c:	3001      	adds	r0, #1
 800932e:	d14a      	bne.n	80093c6 <_printf_i+0x1f6>
 8009330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009334:	b004      	add	sp, #16
 8009336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	f043 0320 	orr.w	r3, r3, #32
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	4833      	ldr	r0, [pc, #204]	; (8009410 <_printf_i+0x240>)
 8009344:	2778      	movs	r7, #120	; 0x78
 8009346:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	6829      	ldr	r1, [r5, #0]
 800934e:	061f      	lsls	r7, r3, #24
 8009350:	f851 6b04 	ldr.w	r6, [r1], #4
 8009354:	d402      	bmi.n	800935c <_printf_i+0x18c>
 8009356:	065f      	lsls	r7, r3, #25
 8009358:	bf48      	it	mi
 800935a:	b2b6      	uxthmi	r6, r6
 800935c:	07df      	lsls	r7, r3, #31
 800935e:	bf48      	it	mi
 8009360:	f043 0320 	orrmi.w	r3, r3, #32
 8009364:	6029      	str	r1, [r5, #0]
 8009366:	bf48      	it	mi
 8009368:	6023      	strmi	r3, [r4, #0]
 800936a:	b91e      	cbnz	r6, 8009374 <_printf_i+0x1a4>
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	f023 0320 	bic.w	r3, r3, #32
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	2310      	movs	r3, #16
 8009376:	e7a7      	b.n	80092c8 <_printf_i+0xf8>
 8009378:	4824      	ldr	r0, [pc, #144]	; (800940c <_printf_i+0x23c>)
 800937a:	e7e4      	b.n	8009346 <_printf_i+0x176>
 800937c:	4615      	mov	r5, r2
 800937e:	e7bd      	b.n	80092fc <_printf_i+0x12c>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	6826      	ldr	r6, [r4, #0]
 8009384:	6961      	ldr	r1, [r4, #20]
 8009386:	1d18      	adds	r0, r3, #4
 8009388:	6028      	str	r0, [r5, #0]
 800938a:	0635      	lsls	r5, r6, #24
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	d501      	bpl.n	8009394 <_printf_i+0x1c4>
 8009390:	6019      	str	r1, [r3, #0]
 8009392:	e002      	b.n	800939a <_printf_i+0x1ca>
 8009394:	0670      	lsls	r0, r6, #25
 8009396:	d5fb      	bpl.n	8009390 <_printf_i+0x1c0>
 8009398:	8019      	strh	r1, [r3, #0]
 800939a:	2300      	movs	r3, #0
 800939c:	6123      	str	r3, [r4, #16]
 800939e:	4615      	mov	r5, r2
 80093a0:	e7bc      	b.n	800931c <_printf_i+0x14c>
 80093a2:	682b      	ldr	r3, [r5, #0]
 80093a4:	1d1a      	adds	r2, r3, #4
 80093a6:	602a      	str	r2, [r5, #0]
 80093a8:	681d      	ldr	r5, [r3, #0]
 80093aa:	6862      	ldr	r2, [r4, #4]
 80093ac:	2100      	movs	r1, #0
 80093ae:	4628      	mov	r0, r5
 80093b0:	f7f6 ff6e 	bl	8000290 <memchr>
 80093b4:	b108      	cbz	r0, 80093ba <_printf_i+0x1ea>
 80093b6:	1b40      	subs	r0, r0, r5
 80093b8:	6060      	str	r0, [r4, #4]
 80093ba:	6863      	ldr	r3, [r4, #4]
 80093bc:	6123      	str	r3, [r4, #16]
 80093be:	2300      	movs	r3, #0
 80093c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c4:	e7aa      	b.n	800931c <_printf_i+0x14c>
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	462a      	mov	r2, r5
 80093ca:	4649      	mov	r1, r9
 80093cc:	4640      	mov	r0, r8
 80093ce:	47d0      	blx	sl
 80093d0:	3001      	adds	r0, #1
 80093d2:	d0ad      	beq.n	8009330 <_printf_i+0x160>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	079b      	lsls	r3, r3, #30
 80093d8:	d413      	bmi.n	8009402 <_printf_i+0x232>
 80093da:	68e0      	ldr	r0, [r4, #12]
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	4298      	cmp	r0, r3
 80093e0:	bfb8      	it	lt
 80093e2:	4618      	movlt	r0, r3
 80093e4:	e7a6      	b.n	8009334 <_printf_i+0x164>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4632      	mov	r2, r6
 80093ea:	4649      	mov	r1, r9
 80093ec:	4640      	mov	r0, r8
 80093ee:	47d0      	blx	sl
 80093f0:	3001      	adds	r0, #1
 80093f2:	d09d      	beq.n	8009330 <_printf_i+0x160>
 80093f4:	3501      	adds	r5, #1
 80093f6:	68e3      	ldr	r3, [r4, #12]
 80093f8:	9903      	ldr	r1, [sp, #12]
 80093fa:	1a5b      	subs	r3, r3, r1
 80093fc:	42ab      	cmp	r3, r5
 80093fe:	dcf2      	bgt.n	80093e6 <_printf_i+0x216>
 8009400:	e7eb      	b.n	80093da <_printf_i+0x20a>
 8009402:	2500      	movs	r5, #0
 8009404:	f104 0619 	add.w	r6, r4, #25
 8009408:	e7f5      	b.n	80093f6 <_printf_i+0x226>
 800940a:	bf00      	nop
 800940c:	0800c612 	.word	0x0800c612
 8009410:	0800c623 	.word	0x0800c623

08009414 <std>:
 8009414:	2300      	movs	r3, #0
 8009416:	b510      	push	{r4, lr}
 8009418:	4604      	mov	r4, r0
 800941a:	e9c0 3300 	strd	r3, r3, [r0]
 800941e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009422:	6083      	str	r3, [r0, #8]
 8009424:	8181      	strh	r1, [r0, #12]
 8009426:	6643      	str	r3, [r0, #100]	; 0x64
 8009428:	81c2      	strh	r2, [r0, #14]
 800942a:	6183      	str	r3, [r0, #24]
 800942c:	4619      	mov	r1, r3
 800942e:	2208      	movs	r2, #8
 8009430:	305c      	adds	r0, #92	; 0x5c
 8009432:	f000 f961 	bl	80096f8 <memset>
 8009436:	4b05      	ldr	r3, [pc, #20]	; (800944c <std+0x38>)
 8009438:	6263      	str	r3, [r4, #36]	; 0x24
 800943a:	4b05      	ldr	r3, [pc, #20]	; (8009450 <std+0x3c>)
 800943c:	62a3      	str	r3, [r4, #40]	; 0x28
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <std+0x40>)
 8009440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009442:	4b05      	ldr	r3, [pc, #20]	; (8009458 <std+0x44>)
 8009444:	6224      	str	r4, [r4, #32]
 8009446:	6323      	str	r3, [r4, #48]	; 0x30
 8009448:	bd10      	pop	{r4, pc}
 800944a:	bf00      	nop
 800944c:	08009601 	.word	0x08009601
 8009450:	08009623 	.word	0x08009623
 8009454:	0800965b 	.word	0x0800965b
 8009458:	0800967f 	.word	0x0800967f

0800945c <stdio_exit_handler>:
 800945c:	4a02      	ldr	r2, [pc, #8]	; (8009468 <stdio_exit_handler+0xc>)
 800945e:	4903      	ldr	r1, [pc, #12]	; (800946c <stdio_exit_handler+0x10>)
 8009460:	4803      	ldr	r0, [pc, #12]	; (8009470 <stdio_exit_handler+0x14>)
 8009462:	f000 b869 	b.w	8009538 <_fwalk_sglue>
 8009466:	bf00      	nop
 8009468:	20000124 	.word	0x20000124
 800946c:	0800b24d 	.word	0x0800b24d
 8009470:	20000130 	.word	0x20000130

08009474 <cleanup_stdio>:
 8009474:	6841      	ldr	r1, [r0, #4]
 8009476:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <cleanup_stdio+0x34>)
 8009478:	4299      	cmp	r1, r3
 800947a:	b510      	push	{r4, lr}
 800947c:	4604      	mov	r4, r0
 800947e:	d001      	beq.n	8009484 <cleanup_stdio+0x10>
 8009480:	f001 fee4 	bl	800b24c <_fflush_r>
 8009484:	68a1      	ldr	r1, [r4, #8]
 8009486:	4b09      	ldr	r3, [pc, #36]	; (80094ac <cleanup_stdio+0x38>)
 8009488:	4299      	cmp	r1, r3
 800948a:	d002      	beq.n	8009492 <cleanup_stdio+0x1e>
 800948c:	4620      	mov	r0, r4
 800948e:	f001 fedd 	bl	800b24c <_fflush_r>
 8009492:	68e1      	ldr	r1, [r4, #12]
 8009494:	4b06      	ldr	r3, [pc, #24]	; (80094b0 <cleanup_stdio+0x3c>)
 8009496:	4299      	cmp	r1, r3
 8009498:	d004      	beq.n	80094a4 <cleanup_stdio+0x30>
 800949a:	4620      	mov	r0, r4
 800949c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a0:	f001 bed4 	b.w	800b24c <_fflush_r>
 80094a4:	bd10      	pop	{r4, pc}
 80094a6:	bf00      	nop
 80094a8:	20001264 	.word	0x20001264
 80094ac:	200012cc 	.word	0x200012cc
 80094b0:	20001334 	.word	0x20001334

080094b4 <global_stdio_init.part.0>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <global_stdio_init.part.0+0x30>)
 80094b8:	4c0b      	ldr	r4, [pc, #44]	; (80094e8 <global_stdio_init.part.0+0x34>)
 80094ba:	4a0c      	ldr	r2, [pc, #48]	; (80094ec <global_stdio_init.part.0+0x38>)
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	4620      	mov	r0, r4
 80094c0:	2200      	movs	r2, #0
 80094c2:	2104      	movs	r1, #4
 80094c4:	f7ff ffa6 	bl	8009414 <std>
 80094c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80094cc:	2201      	movs	r2, #1
 80094ce:	2109      	movs	r1, #9
 80094d0:	f7ff ffa0 	bl	8009414 <std>
 80094d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80094d8:	2202      	movs	r2, #2
 80094da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094de:	2112      	movs	r1, #18
 80094e0:	f7ff bf98 	b.w	8009414 <std>
 80094e4:	2000139c 	.word	0x2000139c
 80094e8:	20001264 	.word	0x20001264
 80094ec:	0800945d 	.word	0x0800945d

080094f0 <__sfp_lock_acquire>:
 80094f0:	4801      	ldr	r0, [pc, #4]	; (80094f8 <__sfp_lock_acquire+0x8>)
 80094f2:	f000 b9cb 	b.w	800988c <__retarget_lock_acquire_recursive>
 80094f6:	bf00      	nop
 80094f8:	200013a5 	.word	0x200013a5

080094fc <__sfp_lock_release>:
 80094fc:	4801      	ldr	r0, [pc, #4]	; (8009504 <__sfp_lock_release+0x8>)
 80094fe:	f000 b9c6 	b.w	800988e <__retarget_lock_release_recursive>
 8009502:	bf00      	nop
 8009504:	200013a5 	.word	0x200013a5

08009508 <__sinit>:
 8009508:	b510      	push	{r4, lr}
 800950a:	4604      	mov	r4, r0
 800950c:	f7ff fff0 	bl	80094f0 <__sfp_lock_acquire>
 8009510:	6a23      	ldr	r3, [r4, #32]
 8009512:	b11b      	cbz	r3, 800951c <__sinit+0x14>
 8009514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009518:	f7ff bff0 	b.w	80094fc <__sfp_lock_release>
 800951c:	4b04      	ldr	r3, [pc, #16]	; (8009530 <__sinit+0x28>)
 800951e:	6223      	str	r3, [r4, #32]
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <__sinit+0x2c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1f5      	bne.n	8009514 <__sinit+0xc>
 8009528:	f7ff ffc4 	bl	80094b4 <global_stdio_init.part.0>
 800952c:	e7f2      	b.n	8009514 <__sinit+0xc>
 800952e:	bf00      	nop
 8009530:	08009475 	.word	0x08009475
 8009534:	2000139c 	.word	0x2000139c

08009538 <_fwalk_sglue>:
 8009538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800953c:	4607      	mov	r7, r0
 800953e:	4688      	mov	r8, r1
 8009540:	4614      	mov	r4, r2
 8009542:	2600      	movs	r6, #0
 8009544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009548:	f1b9 0901 	subs.w	r9, r9, #1
 800954c:	d505      	bpl.n	800955a <_fwalk_sglue+0x22>
 800954e:	6824      	ldr	r4, [r4, #0]
 8009550:	2c00      	cmp	r4, #0
 8009552:	d1f7      	bne.n	8009544 <_fwalk_sglue+0xc>
 8009554:	4630      	mov	r0, r6
 8009556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d907      	bls.n	8009570 <_fwalk_sglue+0x38>
 8009560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009564:	3301      	adds	r3, #1
 8009566:	d003      	beq.n	8009570 <_fwalk_sglue+0x38>
 8009568:	4629      	mov	r1, r5
 800956a:	4638      	mov	r0, r7
 800956c:	47c0      	blx	r8
 800956e:	4306      	orrs	r6, r0
 8009570:	3568      	adds	r5, #104	; 0x68
 8009572:	e7e9      	b.n	8009548 <_fwalk_sglue+0x10>

08009574 <iprintf>:
 8009574:	b40f      	push	{r0, r1, r2, r3}
 8009576:	b507      	push	{r0, r1, r2, lr}
 8009578:	4906      	ldr	r1, [pc, #24]	; (8009594 <iprintf+0x20>)
 800957a:	ab04      	add	r3, sp, #16
 800957c:	6808      	ldr	r0, [r1, #0]
 800957e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009582:	6881      	ldr	r1, [r0, #8]
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	f001 fcc1 	bl	800af0c <_vfiprintf_r>
 800958a:	b003      	add	sp, #12
 800958c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009590:	b004      	add	sp, #16
 8009592:	4770      	bx	lr
 8009594:	2000017c 	.word	0x2000017c

08009598 <sniprintf>:
 8009598:	b40c      	push	{r2, r3}
 800959a:	b530      	push	{r4, r5, lr}
 800959c:	4b17      	ldr	r3, [pc, #92]	; (80095fc <sniprintf+0x64>)
 800959e:	1e0c      	subs	r4, r1, #0
 80095a0:	681d      	ldr	r5, [r3, #0]
 80095a2:	b09d      	sub	sp, #116	; 0x74
 80095a4:	da08      	bge.n	80095b8 <sniprintf+0x20>
 80095a6:	238b      	movs	r3, #139	; 0x8b
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095ae:	b01d      	add	sp, #116	; 0x74
 80095b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095b4:	b002      	add	sp, #8
 80095b6:	4770      	bx	lr
 80095b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80095bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095c0:	bf14      	ite	ne
 80095c2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80095c6:	4623      	moveq	r3, r4
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	9307      	str	r3, [sp, #28]
 80095cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095d0:	9002      	str	r0, [sp, #8]
 80095d2:	9006      	str	r0, [sp, #24]
 80095d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80095d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80095da:	ab21      	add	r3, sp, #132	; 0x84
 80095dc:	a902      	add	r1, sp, #8
 80095de:	4628      	mov	r0, r5
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	f001 fb6b 	bl	800acbc <_svfiprintf_r>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	bfbc      	itt	lt
 80095ea:	238b      	movlt	r3, #139	; 0x8b
 80095ec:	602b      	strlt	r3, [r5, #0]
 80095ee:	2c00      	cmp	r4, #0
 80095f0:	d0dd      	beq.n	80095ae <sniprintf+0x16>
 80095f2:	9b02      	ldr	r3, [sp, #8]
 80095f4:	2200      	movs	r2, #0
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	e7d9      	b.n	80095ae <sniprintf+0x16>
 80095fa:	bf00      	nop
 80095fc:	2000017c 	.word	0x2000017c

08009600 <__sread>:
 8009600:	b510      	push	{r4, lr}
 8009602:	460c      	mov	r4, r1
 8009604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009608:	f000 f8d4 	bl	80097b4 <_read_r>
 800960c:	2800      	cmp	r0, #0
 800960e:	bfab      	itete	ge
 8009610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009612:	89a3      	ldrhlt	r3, [r4, #12]
 8009614:	181b      	addge	r3, r3, r0
 8009616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800961a:	bfac      	ite	ge
 800961c:	6563      	strge	r3, [r4, #84]	; 0x54
 800961e:	81a3      	strhlt	r3, [r4, #12]
 8009620:	bd10      	pop	{r4, pc}

08009622 <__swrite>:
 8009622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009626:	461f      	mov	r7, r3
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	05db      	lsls	r3, r3, #23
 800962c:	4605      	mov	r5, r0
 800962e:	460c      	mov	r4, r1
 8009630:	4616      	mov	r6, r2
 8009632:	d505      	bpl.n	8009640 <__swrite+0x1e>
 8009634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009638:	2302      	movs	r3, #2
 800963a:	2200      	movs	r2, #0
 800963c:	f000 f8a8 	bl	8009790 <_lseek_r>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	4632      	mov	r2, r6
 800964e:	463b      	mov	r3, r7
 8009650:	4628      	mov	r0, r5
 8009652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	f000 b8e3 	b.w	8009820 <_write_r>

0800965a <__sseek>:
 800965a:	b510      	push	{r4, lr}
 800965c:	460c      	mov	r4, r1
 800965e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009662:	f000 f895 	bl	8009790 <_lseek_r>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	bf15      	itete	ne
 800966c:	6560      	strne	r0, [r4, #84]	; 0x54
 800966e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009676:	81a3      	strheq	r3, [r4, #12]
 8009678:	bf18      	it	ne
 800967a:	81a3      	strhne	r3, [r4, #12]
 800967c:	bd10      	pop	{r4, pc}

0800967e <__sclose>:
 800967e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009682:	f000 b875 	b.w	8009770 <_close_r>

08009686 <_vsniprintf_r>:
 8009686:	b530      	push	{r4, r5, lr}
 8009688:	4614      	mov	r4, r2
 800968a:	2c00      	cmp	r4, #0
 800968c:	b09b      	sub	sp, #108	; 0x6c
 800968e:	4605      	mov	r5, r0
 8009690:	461a      	mov	r2, r3
 8009692:	da05      	bge.n	80096a0 <_vsniprintf_r+0x1a>
 8009694:	238b      	movs	r3, #139	; 0x8b
 8009696:	6003      	str	r3, [r0, #0]
 8009698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800969c:	b01b      	add	sp, #108	; 0x6c
 800969e:	bd30      	pop	{r4, r5, pc}
 80096a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80096a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80096a8:	bf14      	ite	ne
 80096aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80096ae:	4623      	moveq	r3, r4
 80096b0:	9302      	str	r3, [sp, #8]
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096b8:	9100      	str	r1, [sp, #0]
 80096ba:	9104      	str	r1, [sp, #16]
 80096bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80096c0:	4669      	mov	r1, sp
 80096c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80096c4:	f001 fafa 	bl	800acbc <_svfiprintf_r>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	bfbc      	itt	lt
 80096cc:	238b      	movlt	r3, #139	; 0x8b
 80096ce:	602b      	strlt	r3, [r5, #0]
 80096d0:	2c00      	cmp	r4, #0
 80096d2:	d0e3      	beq.n	800969c <_vsniprintf_r+0x16>
 80096d4:	9b00      	ldr	r3, [sp, #0]
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	e7df      	b.n	800969c <_vsniprintf_r+0x16>

080096dc <vsniprintf>:
 80096dc:	b507      	push	{r0, r1, r2, lr}
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4613      	mov	r3, r2
 80096e2:	460a      	mov	r2, r1
 80096e4:	4601      	mov	r1, r0
 80096e6:	4803      	ldr	r0, [pc, #12]	; (80096f4 <vsniprintf+0x18>)
 80096e8:	6800      	ldr	r0, [r0, #0]
 80096ea:	f7ff ffcc 	bl	8009686 <_vsniprintf_r>
 80096ee:	b003      	add	sp, #12
 80096f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80096f4:	2000017c 	.word	0x2000017c

080096f8 <memset>:
 80096f8:	4402      	add	r2, r0
 80096fa:	4603      	mov	r3, r0
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d100      	bne.n	8009702 <memset+0xa>
 8009700:	4770      	bx	lr
 8009702:	f803 1b01 	strb.w	r1, [r3], #1
 8009706:	e7f9      	b.n	80096fc <memset+0x4>

08009708 <_raise_r>:
 8009708:	291f      	cmp	r1, #31
 800970a:	b538      	push	{r3, r4, r5, lr}
 800970c:	4604      	mov	r4, r0
 800970e:	460d      	mov	r5, r1
 8009710:	d904      	bls.n	800971c <_raise_r+0x14>
 8009712:	2316      	movs	r3, #22
 8009714:	6003      	str	r3, [r0, #0]
 8009716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800971e:	b112      	cbz	r2, 8009726 <_raise_r+0x1e>
 8009720:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009724:	b94b      	cbnz	r3, 800973a <_raise_r+0x32>
 8009726:	4620      	mov	r0, r4
 8009728:	f000 f868 	bl	80097fc <_getpid_r>
 800972c:	462a      	mov	r2, r5
 800972e:	4601      	mov	r1, r0
 8009730:	4620      	mov	r0, r4
 8009732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009736:	f000 b84f 	b.w	80097d8 <_kill_r>
 800973a:	2b01      	cmp	r3, #1
 800973c:	d00a      	beq.n	8009754 <_raise_r+0x4c>
 800973e:	1c59      	adds	r1, r3, #1
 8009740:	d103      	bne.n	800974a <_raise_r+0x42>
 8009742:	2316      	movs	r3, #22
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	2001      	movs	r0, #1
 8009748:	e7e7      	b.n	800971a <_raise_r+0x12>
 800974a:	2400      	movs	r4, #0
 800974c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009750:	4628      	mov	r0, r5
 8009752:	4798      	blx	r3
 8009754:	2000      	movs	r0, #0
 8009756:	e7e0      	b.n	800971a <_raise_r+0x12>

08009758 <raise>:
 8009758:	4b02      	ldr	r3, [pc, #8]	; (8009764 <raise+0xc>)
 800975a:	4601      	mov	r1, r0
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	f7ff bfd3 	b.w	8009708 <_raise_r>
 8009762:	bf00      	nop
 8009764:	2000017c 	.word	0x2000017c

08009768 <_localeconv_r>:
 8009768:	4800      	ldr	r0, [pc, #0]	; (800976c <_localeconv_r+0x4>)
 800976a:	4770      	bx	lr
 800976c:	20000270 	.word	0x20000270

08009770 <_close_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4d06      	ldr	r5, [pc, #24]	; (800978c <_close_r+0x1c>)
 8009774:	2300      	movs	r3, #0
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	f001 ff6c 	bl	800b658 <_close>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_close_r+0x1a>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_close_r+0x1a>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	200013a0 	.word	0x200013a0

08009790 <_lseek_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d07      	ldr	r5, [pc, #28]	; (80097b0 <_lseek_r+0x20>)
 8009794:	4604      	mov	r4, r0
 8009796:	4608      	mov	r0, r1
 8009798:	4611      	mov	r1, r2
 800979a:	2200      	movs	r2, #0
 800979c:	602a      	str	r2, [r5, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	f001 ff82 	bl	800b6a8 <_lseek>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_lseek_r+0x1e>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_lseek_r+0x1e>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	200013a0 	.word	0x200013a0

080097b4 <_read_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4d07      	ldr	r5, [pc, #28]	; (80097d4 <_read_r+0x20>)
 80097b8:	4604      	mov	r4, r0
 80097ba:	4608      	mov	r0, r1
 80097bc:	4611      	mov	r1, r2
 80097be:	2200      	movs	r2, #0
 80097c0:	602a      	str	r2, [r5, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f001 ff78 	bl	800b6b8 <_read>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_read_r+0x1e>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_read_r+0x1e>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	200013a0 	.word	0x200013a0

080097d8 <_kill_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d07      	ldr	r5, [pc, #28]	; (80097f8 <_kill_r+0x20>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	4611      	mov	r1, r2
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	f001 ff57 	bl	800b698 <_kill>
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d102      	bne.n	80097f4 <_kill_r+0x1c>
 80097ee:	682b      	ldr	r3, [r5, #0]
 80097f0:	b103      	cbz	r3, 80097f4 <_kill_r+0x1c>
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	bd38      	pop	{r3, r4, r5, pc}
 80097f6:	bf00      	nop
 80097f8:	200013a0 	.word	0x200013a0

080097fc <_getpid_r>:
 80097fc:	f001 bf3c 	b.w	800b678 <_getpid>

08009800 <_sbrk_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d06      	ldr	r5, [pc, #24]	; (800981c <_sbrk_r+0x1c>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	f001 ff5c 	bl	800b6c8 <_sbrk>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_sbrk_r+0x1a>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_sbrk_r+0x1a>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	200013a0 	.word	0x200013a0

08009820 <_write_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d07      	ldr	r5, [pc, #28]	; (8009840 <_write_r+0x20>)
 8009824:	4604      	mov	r4, r0
 8009826:	4608      	mov	r0, r1
 8009828:	4611      	mov	r1, r2
 800982a:	2200      	movs	r2, #0
 800982c:	602a      	str	r2, [r5, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	f001 ff58 	bl	800b6e4 <_write>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_write_r+0x1e>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_write_r+0x1e>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	200013a0 	.word	0x200013a0

08009844 <__libc_init_array>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	4d0d      	ldr	r5, [pc, #52]	; (800987c <__libc_init_array+0x38>)
 8009848:	4c0d      	ldr	r4, [pc, #52]	; (8009880 <__libc_init_array+0x3c>)
 800984a:	1b64      	subs	r4, r4, r5
 800984c:	10a4      	asrs	r4, r4, #2
 800984e:	2600      	movs	r6, #0
 8009850:	42a6      	cmp	r6, r4
 8009852:	d109      	bne.n	8009868 <__libc_init_array+0x24>
 8009854:	4d0b      	ldr	r5, [pc, #44]	; (8009884 <__libc_init_array+0x40>)
 8009856:	4c0c      	ldr	r4, [pc, #48]	; (8009888 <__libc_init_array+0x44>)
 8009858:	f001 ff4e 	bl	800b6f8 <_init>
 800985c:	1b64      	subs	r4, r4, r5
 800985e:	10a4      	asrs	r4, r4, #2
 8009860:	2600      	movs	r6, #0
 8009862:	42a6      	cmp	r6, r4
 8009864:	d105      	bne.n	8009872 <__libc_init_array+0x2e>
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	f855 3b04 	ldr.w	r3, [r5], #4
 800986c:	4798      	blx	r3
 800986e:	3601      	adds	r6, #1
 8009870:	e7ee      	b.n	8009850 <__libc_init_array+0xc>
 8009872:	f855 3b04 	ldr.w	r3, [r5], #4
 8009876:	4798      	blx	r3
 8009878:	3601      	adds	r6, #1
 800987a:	e7f2      	b.n	8009862 <__libc_init_array+0x1e>
 800987c:	0800c974 	.word	0x0800c974
 8009880:	0800c974 	.word	0x0800c974
 8009884:	0800c974 	.word	0x0800c974
 8009888:	0800c980 	.word	0x0800c980

0800988c <__retarget_lock_acquire_recursive>:
 800988c:	4770      	bx	lr

0800988e <__retarget_lock_release_recursive>:
 800988e:	4770      	bx	lr

08009890 <quorem>:
 8009890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	6903      	ldr	r3, [r0, #16]
 8009896:	690c      	ldr	r4, [r1, #16]
 8009898:	42a3      	cmp	r3, r4
 800989a:	4607      	mov	r7, r0
 800989c:	db7e      	blt.n	800999c <quorem+0x10c>
 800989e:	3c01      	subs	r4, #1
 80098a0:	f101 0814 	add.w	r8, r1, #20
 80098a4:	f100 0514 	add.w	r5, r0, #20
 80098a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098b6:	3301      	adds	r3, #1
 80098b8:	429a      	cmp	r2, r3
 80098ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80098c6:	d331      	bcc.n	800992c <quorem+0x9c>
 80098c8:	f04f 0e00 	mov.w	lr, #0
 80098cc:	4640      	mov	r0, r8
 80098ce:	46ac      	mov	ip, r5
 80098d0:	46f2      	mov	sl, lr
 80098d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80098d6:	b293      	uxth	r3, r2
 80098d8:	fb06 e303 	mla	r3, r6, r3, lr
 80098dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098e0:	0c1a      	lsrs	r2, r3, #16
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	ebaa 0303 	sub.w	r3, sl, r3
 80098e8:	f8dc a000 	ldr.w	sl, [ip]
 80098ec:	fa13 f38a 	uxtah	r3, r3, sl
 80098f0:	fb06 220e 	mla	r2, r6, lr, r2
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	9b00      	ldr	r3, [sp, #0]
 80098f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098fc:	b292      	uxth	r2, r2
 80098fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009906:	f8bd 3000 	ldrh.w	r3, [sp]
 800990a:	4581      	cmp	r9, r0
 800990c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009910:	f84c 3b04 	str.w	r3, [ip], #4
 8009914:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009918:	d2db      	bcs.n	80098d2 <quorem+0x42>
 800991a:	f855 300b 	ldr.w	r3, [r5, fp]
 800991e:	b92b      	cbnz	r3, 800992c <quorem+0x9c>
 8009920:	9b01      	ldr	r3, [sp, #4]
 8009922:	3b04      	subs	r3, #4
 8009924:	429d      	cmp	r5, r3
 8009926:	461a      	mov	r2, r3
 8009928:	d32c      	bcc.n	8009984 <quorem+0xf4>
 800992a:	613c      	str	r4, [r7, #16]
 800992c:	4638      	mov	r0, r7
 800992e:	f001 f86b 	bl	800aa08 <__mcmp>
 8009932:	2800      	cmp	r0, #0
 8009934:	db22      	blt.n	800997c <quorem+0xec>
 8009936:	3601      	adds	r6, #1
 8009938:	4629      	mov	r1, r5
 800993a:	2000      	movs	r0, #0
 800993c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009940:	f8d1 c000 	ldr.w	ip, [r1]
 8009944:	b293      	uxth	r3, r2
 8009946:	1ac3      	subs	r3, r0, r3
 8009948:	0c12      	lsrs	r2, r2, #16
 800994a:	fa13 f38c 	uxtah	r3, r3, ip
 800994e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009952:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009956:	b29b      	uxth	r3, r3
 8009958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800995c:	45c1      	cmp	r9, r8
 800995e:	f841 3b04 	str.w	r3, [r1], #4
 8009962:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009966:	d2e9      	bcs.n	800993c <quorem+0xac>
 8009968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800996c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009970:	b922      	cbnz	r2, 800997c <quorem+0xec>
 8009972:	3b04      	subs	r3, #4
 8009974:	429d      	cmp	r5, r3
 8009976:	461a      	mov	r2, r3
 8009978:	d30a      	bcc.n	8009990 <quorem+0x100>
 800997a:	613c      	str	r4, [r7, #16]
 800997c:	4630      	mov	r0, r6
 800997e:	b003      	add	sp, #12
 8009980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009984:	6812      	ldr	r2, [r2, #0]
 8009986:	3b04      	subs	r3, #4
 8009988:	2a00      	cmp	r2, #0
 800998a:	d1ce      	bne.n	800992a <quorem+0x9a>
 800998c:	3c01      	subs	r4, #1
 800998e:	e7c9      	b.n	8009924 <quorem+0x94>
 8009990:	6812      	ldr	r2, [r2, #0]
 8009992:	3b04      	subs	r3, #4
 8009994:	2a00      	cmp	r2, #0
 8009996:	d1f0      	bne.n	800997a <quorem+0xea>
 8009998:	3c01      	subs	r4, #1
 800999a:	e7eb      	b.n	8009974 <quorem+0xe4>
 800999c:	2000      	movs	r0, #0
 800999e:	e7ee      	b.n	800997e <quorem+0xee>

080099a0 <_dtoa_r>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	ed2d 8b02 	vpush	{d8}
 80099a8:	69c5      	ldr	r5, [r0, #28]
 80099aa:	b091      	sub	sp, #68	; 0x44
 80099ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099b0:	ec59 8b10 	vmov	r8, r9, d0
 80099b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80099b6:	9106      	str	r1, [sp, #24]
 80099b8:	4606      	mov	r6, r0
 80099ba:	9208      	str	r2, [sp, #32]
 80099bc:	930c      	str	r3, [sp, #48]	; 0x30
 80099be:	b975      	cbnz	r5, 80099de <_dtoa_r+0x3e>
 80099c0:	2010      	movs	r0, #16
 80099c2:	f7ff f839 	bl	8008a38 <malloc>
 80099c6:	4602      	mov	r2, r0
 80099c8:	61f0      	str	r0, [r6, #28]
 80099ca:	b920      	cbnz	r0, 80099d6 <_dtoa_r+0x36>
 80099cc:	4ba6      	ldr	r3, [pc, #664]	; (8009c68 <_dtoa_r+0x2c8>)
 80099ce:	21ef      	movs	r1, #239	; 0xef
 80099d0:	48a6      	ldr	r0, [pc, #664]	; (8009c6c <_dtoa_r+0x2cc>)
 80099d2:	f001 fd21 	bl	800b418 <__assert_func>
 80099d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099da:	6005      	str	r5, [r0, #0]
 80099dc:	60c5      	str	r5, [r0, #12]
 80099de:	69f3      	ldr	r3, [r6, #28]
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	b151      	cbz	r1, 80099fa <_dtoa_r+0x5a>
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	604a      	str	r2, [r1, #4]
 80099e8:	2301      	movs	r3, #1
 80099ea:	4093      	lsls	r3, r2
 80099ec:	608b      	str	r3, [r1, #8]
 80099ee:	4630      	mov	r0, r6
 80099f0:	f000 fdce 	bl	800a590 <_Bfree>
 80099f4:	69f3      	ldr	r3, [r6, #28]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	f1b9 0300 	subs.w	r3, r9, #0
 80099fe:	bfbb      	ittet	lt
 8009a00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a04:	9303      	strlt	r3, [sp, #12]
 8009a06:	2300      	movge	r3, #0
 8009a08:	2201      	movlt	r2, #1
 8009a0a:	bfac      	ite	ge
 8009a0c:	6023      	strge	r3, [r4, #0]
 8009a0e:	6022      	strlt	r2, [r4, #0]
 8009a10:	4b97      	ldr	r3, [pc, #604]	; (8009c70 <_dtoa_r+0x2d0>)
 8009a12:	9c03      	ldr	r4, [sp, #12]
 8009a14:	43a3      	bics	r3, r4
 8009a16:	d11c      	bne.n	8009a52 <_dtoa_r+0xb2>
 8009a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009a24:	ea53 0308 	orrs.w	r3, r3, r8
 8009a28:	f000 84fb 	beq.w	800a422 <_dtoa_r+0xa82>
 8009a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a2e:	b963      	cbnz	r3, 8009a4a <_dtoa_r+0xaa>
 8009a30:	4b90      	ldr	r3, [pc, #576]	; (8009c74 <_dtoa_r+0x2d4>)
 8009a32:	e020      	b.n	8009a76 <_dtoa_r+0xd6>
 8009a34:	4b90      	ldr	r3, [pc, #576]	; (8009c78 <_dtoa_r+0x2d8>)
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	9801      	ldr	r0, [sp, #4]
 8009a40:	b011      	add	sp, #68	; 0x44
 8009a42:	ecbd 8b02 	vpop	{d8}
 8009a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4a:	4b8a      	ldr	r3, [pc, #552]	; (8009c74 <_dtoa_r+0x2d4>)
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	3303      	adds	r3, #3
 8009a50:	e7f3      	b.n	8009a3a <_dtoa_r+0x9a>
 8009a52:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009a56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5e:	d10c      	bne.n	8009a7a <_dtoa_r+0xda>
 8009a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a62:	2301      	movs	r3, #1
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 84d7 	beq.w	800a41c <_dtoa_r+0xa7c>
 8009a6e:	4b83      	ldr	r3, [pc, #524]	; (8009c7c <_dtoa_r+0x2dc>)
 8009a70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	e7e1      	b.n	8009a3e <_dtoa_r+0x9e>
 8009a7a:	aa0e      	add	r2, sp, #56	; 0x38
 8009a7c:	a90f      	add	r1, sp, #60	; 0x3c
 8009a7e:	4630      	mov	r0, r6
 8009a80:	eeb0 0b48 	vmov.f64	d0, d8
 8009a84:	f001 f866 	bl	800ab54 <__d2b>
 8009a88:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8009a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a8e:	4605      	mov	r5, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d046      	beq.n	8009b22 <_dtoa_r+0x182>
 8009a94:	eeb0 7b48 	vmov.f64	d7, d8
 8009a98:	ee18 1a90 	vmov	r1, s17
 8009a9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009aa0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009aa4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009aa8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009aac:	2000      	movs	r0, #0
 8009aae:	ee07 1a90 	vmov	s15, r1
 8009ab2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8009ab6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009c50 <_dtoa_r+0x2b0>
 8009aba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009abe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009c58 <_dtoa_r+0x2b8>
 8009ac2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009ac6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009c60 <_dtoa_r+0x2c0>
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009ad2:	eeb0 7b46 	vmov.f64	d7, d6
 8009ad6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009ada:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009ade:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae6:	ee16 ba90 	vmov	fp, s13
 8009aea:	9009      	str	r0, [sp, #36]	; 0x24
 8009aec:	d508      	bpl.n	8009b00 <_dtoa_r+0x160>
 8009aee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009af2:	eeb4 6b47 	vcmp.f64	d6, d7
 8009af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afa:	bf18      	it	ne
 8009afc:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8009b00:	f1bb 0f16 	cmp.w	fp, #22
 8009b04:	d82b      	bhi.n	8009b5e <_dtoa_r+0x1be>
 8009b06:	495e      	ldr	r1, [pc, #376]	; (8009c80 <_dtoa_r+0x2e0>)
 8009b08:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009b0c:	ed91 7b00 	vldr	d7, [r1]
 8009b10:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b18:	d501      	bpl.n	8009b1e <_dtoa_r+0x17e>
 8009b1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009b1e:	2100      	movs	r1, #0
 8009b20:	e01e      	b.n	8009b60 <_dtoa_r+0x1c0>
 8009b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b24:	4413      	add	r3, r2
 8009b26:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009b2a:	2920      	cmp	r1, #32
 8009b2c:	bfc1      	itttt	gt
 8009b2e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8009b32:	408c      	lslgt	r4, r1
 8009b34:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009b38:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009b3c:	bfd6      	itet	le
 8009b3e:	f1c1 0120 	rsble	r1, r1, #32
 8009b42:	4321      	orrgt	r1, r4
 8009b44:	fa08 f101 	lslle.w	r1, r8, r1
 8009b48:	ee07 1a90 	vmov	s15, r1
 8009b4c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009b50:	3b01      	subs	r3, #1
 8009b52:	ee17 1a90 	vmov	r1, s15
 8009b56:	2001      	movs	r0, #1
 8009b58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009b5c:	e7a7      	b.n	8009aae <_dtoa_r+0x10e>
 8009b5e:	2101      	movs	r1, #1
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	1e53      	subs	r3, r2, #1
 8009b64:	9305      	str	r3, [sp, #20]
 8009b66:	bf45      	ittet	mi
 8009b68:	f1c2 0301 	rsbmi	r3, r2, #1
 8009b6c:	9304      	strmi	r3, [sp, #16]
 8009b6e:	2300      	movpl	r3, #0
 8009b70:	2300      	movmi	r3, #0
 8009b72:	bf4c      	ite	mi
 8009b74:	9305      	strmi	r3, [sp, #20]
 8009b76:	9304      	strpl	r3, [sp, #16]
 8009b78:	f1bb 0f00 	cmp.w	fp, #0
 8009b7c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009b7e:	db18      	blt.n	8009bb2 <_dtoa_r+0x212>
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009b86:	445b      	add	r3, fp
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9a06      	ldr	r2, [sp, #24]
 8009b8e:	2a09      	cmp	r2, #9
 8009b90:	d848      	bhi.n	8009c24 <_dtoa_r+0x284>
 8009b92:	2a05      	cmp	r2, #5
 8009b94:	bfc4      	itt	gt
 8009b96:	3a04      	subgt	r2, #4
 8009b98:	9206      	strgt	r2, [sp, #24]
 8009b9a:	9a06      	ldr	r2, [sp, #24]
 8009b9c:	f1a2 0202 	sub.w	r2, r2, #2
 8009ba0:	bfcc      	ite	gt
 8009ba2:	2400      	movgt	r4, #0
 8009ba4:	2401      	movle	r4, #1
 8009ba6:	2a03      	cmp	r2, #3
 8009ba8:	d847      	bhi.n	8009c3a <_dtoa_r+0x29a>
 8009baa:	e8df f002 	tbb	[pc, r2]
 8009bae:	2d0b      	.short	0x2d0b
 8009bb0:	392b      	.short	0x392b
 8009bb2:	9b04      	ldr	r3, [sp, #16]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	eba3 030b 	sub.w	r3, r3, fp
 8009bba:	9304      	str	r3, [sp, #16]
 8009bbc:	920a      	str	r2, [sp, #40]	; 0x28
 8009bbe:	f1cb 0300 	rsb	r3, fp, #0
 8009bc2:	e7e3      	b.n	8009b8c <_dtoa_r+0x1ec>
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	9207      	str	r2, [sp, #28]
 8009bc8:	9a08      	ldr	r2, [sp, #32]
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	dc38      	bgt.n	8009c40 <_dtoa_r+0x2a0>
 8009bce:	f04f 0a01 	mov.w	sl, #1
 8009bd2:	46d1      	mov	r9, sl
 8009bd4:	4652      	mov	r2, sl
 8009bd6:	f8cd a020 	str.w	sl, [sp, #32]
 8009bda:	69f7      	ldr	r7, [r6, #28]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	2004      	movs	r0, #4
 8009be0:	f100 0c14 	add.w	ip, r0, #20
 8009be4:	4594      	cmp	ip, r2
 8009be6:	d930      	bls.n	8009c4a <_dtoa_r+0x2aa>
 8009be8:	6079      	str	r1, [r7, #4]
 8009bea:	4630      	mov	r0, r6
 8009bec:	930d      	str	r3, [sp, #52]	; 0x34
 8009bee:	f000 fc8f 	bl	800a510 <_Balloc>
 8009bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bf4:	9001      	str	r0, [sp, #4]
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d145      	bne.n	8009c88 <_dtoa_r+0x2e8>
 8009bfc:	4b21      	ldr	r3, [pc, #132]	; (8009c84 <_dtoa_r+0x2e4>)
 8009bfe:	f240 11af 	movw	r1, #431	; 0x1af
 8009c02:	e6e5      	b.n	80099d0 <_dtoa_r+0x30>
 8009c04:	2201      	movs	r2, #1
 8009c06:	e7de      	b.n	8009bc6 <_dtoa_r+0x226>
 8009c08:	2200      	movs	r2, #0
 8009c0a:	9207      	str	r2, [sp, #28]
 8009c0c:	9a08      	ldr	r2, [sp, #32]
 8009c0e:	eb0b 0a02 	add.w	sl, fp, r2
 8009c12:	f10a 0901 	add.w	r9, sl, #1
 8009c16:	464a      	mov	r2, r9
 8009c18:	2a01      	cmp	r2, #1
 8009c1a:	bfb8      	it	lt
 8009c1c:	2201      	movlt	r2, #1
 8009c1e:	e7dc      	b.n	8009bda <_dtoa_r+0x23a>
 8009c20:	2201      	movs	r2, #1
 8009c22:	e7f2      	b.n	8009c0a <_dtoa_r+0x26a>
 8009c24:	2401      	movs	r4, #1
 8009c26:	2200      	movs	r2, #0
 8009c28:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009c2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009c30:	2100      	movs	r1, #0
 8009c32:	46d1      	mov	r9, sl
 8009c34:	2212      	movs	r2, #18
 8009c36:	9108      	str	r1, [sp, #32]
 8009c38:	e7cf      	b.n	8009bda <_dtoa_r+0x23a>
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	9207      	str	r2, [sp, #28]
 8009c3e:	e7f5      	b.n	8009c2c <_dtoa_r+0x28c>
 8009c40:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009c44:	46d1      	mov	r9, sl
 8009c46:	4652      	mov	r2, sl
 8009c48:	e7c7      	b.n	8009bda <_dtoa_r+0x23a>
 8009c4a:	3101      	adds	r1, #1
 8009c4c:	0040      	lsls	r0, r0, #1
 8009c4e:	e7c7      	b.n	8009be0 <_dtoa_r+0x240>
 8009c50:	636f4361 	.word	0x636f4361
 8009c54:	3fd287a7 	.word	0x3fd287a7
 8009c58:	8b60c8b3 	.word	0x8b60c8b3
 8009c5c:	3fc68a28 	.word	0x3fc68a28
 8009c60:	509f79fb 	.word	0x509f79fb
 8009c64:	3fd34413 	.word	0x3fd34413
 8009c68:	0800c641 	.word	0x0800c641
 8009c6c:	0800c658 	.word	0x0800c658
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	0800c63d 	.word	0x0800c63d
 8009c78:	0800c634 	.word	0x0800c634
 8009c7c:	0800c611 	.word	0x0800c611
 8009c80:	0800c748 	.word	0x0800c748
 8009c84:	0800c6b0 	.word	0x0800c6b0
 8009c88:	69f2      	ldr	r2, [r6, #28]
 8009c8a:	9901      	ldr	r1, [sp, #4]
 8009c8c:	6011      	str	r1, [r2, #0]
 8009c8e:	f1b9 0f0e 	cmp.w	r9, #14
 8009c92:	d86c      	bhi.n	8009d6e <_dtoa_r+0x3ce>
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d06a      	beq.n	8009d6e <_dtoa_r+0x3ce>
 8009c98:	f1bb 0f00 	cmp.w	fp, #0
 8009c9c:	f340 80a0 	ble.w	8009de0 <_dtoa_r+0x440>
 8009ca0:	4ac1      	ldr	r2, [pc, #772]	; (8009fa8 <_dtoa_r+0x608>)
 8009ca2:	f00b 010f 	and.w	r1, fp, #15
 8009ca6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009caa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009cae:	ed92 7b00 	vldr	d7, [r2]
 8009cb2:	ea4f 122b 	mov.w	r2, fp, asr #4
 8009cb6:	f000 8087 	beq.w	8009dc8 <_dtoa_r+0x428>
 8009cba:	49bc      	ldr	r1, [pc, #752]	; (8009fac <_dtoa_r+0x60c>)
 8009cbc:	ed91 6b08 	vldr	d6, [r1, #32]
 8009cc0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009cc4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009cc8:	f002 020f 	and.w	r2, r2, #15
 8009ccc:	2103      	movs	r1, #3
 8009cce:	48b7      	ldr	r0, [pc, #732]	; (8009fac <_dtoa_r+0x60c>)
 8009cd0:	2a00      	cmp	r2, #0
 8009cd2:	d17b      	bne.n	8009dcc <_dtoa_r+0x42c>
 8009cd4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009cd8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009cdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ce2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	f000 80a0 	beq.w	8009e2c <_dtoa_r+0x48c>
 8009cec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009cf0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf8:	f140 8098 	bpl.w	8009e2c <_dtoa_r+0x48c>
 8009cfc:	f1b9 0f00 	cmp.w	r9, #0
 8009d00:	f000 8094 	beq.w	8009e2c <_dtoa_r+0x48c>
 8009d04:	f1ba 0f00 	cmp.w	sl, #0
 8009d08:	dd2f      	ble.n	8009d6a <_dtoa_r+0x3ca>
 8009d0a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009d0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d12:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d16:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009d1a:	3101      	adds	r1, #1
 8009d1c:	4654      	mov	r4, sl
 8009d1e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009d22:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009d26:	ee07 1a90 	vmov	s15, r1
 8009d2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d2e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009d32:	ee15 7a90 	vmov	r7, s11
 8009d36:	ec51 0b15 	vmov	r0, r1, d5
 8009d3a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009d3e:	2c00      	cmp	r4, #0
 8009d40:	d177      	bne.n	8009e32 <_dtoa_r+0x492>
 8009d42:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009d46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009d4a:	ec41 0b17 	vmov	d7, r0, r1
 8009d4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d56:	f300 826a 	bgt.w	800a22e <_dtoa_r+0x88e>
 8009d5a:	eeb1 7b47 	vneg.f64	d7, d7
 8009d5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d66:	f100 8260 	bmi.w	800a22a <_dtoa_r+0x88a>
 8009d6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009d6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	f2c0 811d 	blt.w	8009fb0 <_dtoa_r+0x610>
 8009d76:	f1bb 0f0e 	cmp.w	fp, #14
 8009d7a:	f300 8119 	bgt.w	8009fb0 <_dtoa_r+0x610>
 8009d7e:	4b8a      	ldr	r3, [pc, #552]	; (8009fa8 <_dtoa_r+0x608>)
 8009d80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d84:	ed93 6b00 	vldr	d6, [r3]
 8009d88:	9b08      	ldr	r3, [sp, #32]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f280 80b7 	bge.w	8009efe <_dtoa_r+0x55e>
 8009d90:	f1b9 0f00 	cmp.w	r9, #0
 8009d94:	f300 80b3 	bgt.w	8009efe <_dtoa_r+0x55e>
 8009d98:	f040 8246 	bne.w	800a228 <_dtoa_r+0x888>
 8009d9c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009da0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009da4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009da8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db0:	464c      	mov	r4, r9
 8009db2:	464f      	mov	r7, r9
 8009db4:	f280 821c 	bge.w	800a1f0 <_dtoa_r+0x850>
 8009db8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009dbc:	2331      	movs	r3, #49	; 0x31
 8009dbe:	f808 3b01 	strb.w	r3, [r8], #1
 8009dc2:	f10b 0b01 	add.w	fp, fp, #1
 8009dc6:	e218      	b.n	800a1fa <_dtoa_r+0x85a>
 8009dc8:	2102      	movs	r1, #2
 8009dca:	e780      	b.n	8009cce <_dtoa_r+0x32e>
 8009dcc:	07d4      	lsls	r4, r2, #31
 8009dce:	d504      	bpl.n	8009dda <_dtoa_r+0x43a>
 8009dd0:	ed90 6b00 	vldr	d6, [r0]
 8009dd4:	3101      	adds	r1, #1
 8009dd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009dda:	1052      	asrs	r2, r2, #1
 8009ddc:	3008      	adds	r0, #8
 8009dde:	e777      	b.n	8009cd0 <_dtoa_r+0x330>
 8009de0:	d022      	beq.n	8009e28 <_dtoa_r+0x488>
 8009de2:	f1cb 0200 	rsb	r2, fp, #0
 8009de6:	4970      	ldr	r1, [pc, #448]	; (8009fa8 <_dtoa_r+0x608>)
 8009de8:	f002 000f 	and.w	r0, r2, #15
 8009dec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009df0:	ed91 7b00 	vldr	d7, [r1]
 8009df4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009df8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009dfc:	486b      	ldr	r0, [pc, #428]	; (8009fac <_dtoa_r+0x60c>)
 8009dfe:	1112      	asrs	r2, r2, #4
 8009e00:	2400      	movs	r4, #0
 8009e02:	2102      	movs	r1, #2
 8009e04:	b92a      	cbnz	r2, 8009e12 <_dtoa_r+0x472>
 8009e06:	2c00      	cmp	r4, #0
 8009e08:	f43f af6a 	beq.w	8009ce0 <_dtoa_r+0x340>
 8009e0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e10:	e766      	b.n	8009ce0 <_dtoa_r+0x340>
 8009e12:	07d7      	lsls	r7, r2, #31
 8009e14:	d505      	bpl.n	8009e22 <_dtoa_r+0x482>
 8009e16:	ed90 6b00 	vldr	d6, [r0]
 8009e1a:	3101      	adds	r1, #1
 8009e1c:	2401      	movs	r4, #1
 8009e1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e22:	1052      	asrs	r2, r2, #1
 8009e24:	3008      	adds	r0, #8
 8009e26:	e7ed      	b.n	8009e04 <_dtoa_r+0x464>
 8009e28:	2102      	movs	r1, #2
 8009e2a:	e759      	b.n	8009ce0 <_dtoa_r+0x340>
 8009e2c:	465a      	mov	r2, fp
 8009e2e:	464c      	mov	r4, r9
 8009e30:	e775      	b.n	8009d1e <_dtoa_r+0x37e>
 8009e32:	ec41 0b17 	vmov	d7, r0, r1
 8009e36:	495c      	ldr	r1, [pc, #368]	; (8009fa8 <_dtoa_r+0x608>)
 8009e38:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009e3c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009e40:	9901      	ldr	r1, [sp, #4]
 8009e42:	440c      	add	r4, r1
 8009e44:	9907      	ldr	r1, [sp, #28]
 8009e46:	b351      	cbz	r1, 8009e9e <_dtoa_r+0x4fe>
 8009e48:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009e4c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009e50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e54:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009e58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009e5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e60:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e64:	ee14 1a90 	vmov	r1, s9
 8009e68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e6c:	3130      	adds	r1, #48	; 0x30
 8009e6e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7a:	f808 1b01 	strb.w	r1, [r8], #1
 8009e7e:	d439      	bmi.n	8009ef4 <_dtoa_r+0x554>
 8009e80:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009e84:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e8c:	d472      	bmi.n	8009f74 <_dtoa_r+0x5d4>
 8009e8e:	45a0      	cmp	r8, r4
 8009e90:	f43f af6b 	beq.w	8009d6a <_dtoa_r+0x3ca>
 8009e94:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009e98:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e9c:	e7e0      	b.n	8009e60 <_dtoa_r+0x4c0>
 8009e9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ea2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009eac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009eb0:	ee14 1a90 	vmov	r1, s9
 8009eb4:	3130      	adds	r1, #48	; 0x30
 8009eb6:	f808 1b01 	strb.w	r1, [r8], #1
 8009eba:	45a0      	cmp	r8, r4
 8009ebc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ec0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009ec4:	d118      	bne.n	8009ef8 <_dtoa_r+0x558>
 8009ec6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009eca:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009ece:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed6:	dc4d      	bgt.n	8009f74 <_dtoa_r+0x5d4>
 8009ed8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009edc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee4:	f57f af41 	bpl.w	8009d6a <_dtoa_r+0x3ca>
 8009ee8:	4680      	mov	r8, r0
 8009eea:	3801      	subs	r0, #1
 8009eec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009ef0:	2b30      	cmp	r3, #48	; 0x30
 8009ef2:	d0f9      	beq.n	8009ee8 <_dtoa_r+0x548>
 8009ef4:	4693      	mov	fp, r2
 8009ef6:	e02a      	b.n	8009f4e <_dtoa_r+0x5ae>
 8009ef8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009efc:	e7d6      	b.n	8009eac <_dtoa_r+0x50c>
 8009efe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f02:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009f06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f0a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009f0e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009f12:	ee15 3a10 	vmov	r3, s10
 8009f16:	3330      	adds	r3, #48	; 0x30
 8009f18:	f808 3b01 	strb.w	r3, [r8], #1
 8009f1c:	9b01      	ldr	r3, [sp, #4]
 8009f1e:	eba8 0303 	sub.w	r3, r8, r3
 8009f22:	4599      	cmp	r9, r3
 8009f24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009f28:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009f2c:	d133      	bne.n	8009f96 <_dtoa_r+0x5f6>
 8009f2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009f32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3a:	dc1a      	bgt.n	8009f72 <_dtoa_r+0x5d2>
 8009f3c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f44:	d103      	bne.n	8009f4e <_dtoa_r+0x5ae>
 8009f46:	ee15 3a10 	vmov	r3, s10
 8009f4a:	07d9      	lsls	r1, r3, #31
 8009f4c:	d411      	bmi.n	8009f72 <_dtoa_r+0x5d2>
 8009f4e:	4629      	mov	r1, r5
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 fb1d 	bl	800a590 <_Bfree>
 8009f56:	2300      	movs	r3, #0
 8009f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f5a:	f888 3000 	strb.w	r3, [r8]
 8009f5e:	f10b 0301 	add.w	r3, fp, #1
 8009f62:	6013      	str	r3, [r2, #0]
 8009f64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f43f ad69 	beq.w	8009a3e <_dtoa_r+0x9e>
 8009f6c:	f8c3 8000 	str.w	r8, [r3]
 8009f70:	e565      	b.n	8009a3e <_dtoa_r+0x9e>
 8009f72:	465a      	mov	r2, fp
 8009f74:	4643      	mov	r3, r8
 8009f76:	4698      	mov	r8, r3
 8009f78:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009f7c:	2939      	cmp	r1, #57	; 0x39
 8009f7e:	d106      	bne.n	8009f8e <_dtoa_r+0x5ee>
 8009f80:	9901      	ldr	r1, [sp, #4]
 8009f82:	4299      	cmp	r1, r3
 8009f84:	d1f7      	bne.n	8009f76 <_dtoa_r+0x5d6>
 8009f86:	9801      	ldr	r0, [sp, #4]
 8009f88:	2130      	movs	r1, #48	; 0x30
 8009f8a:	3201      	adds	r2, #1
 8009f8c:	7001      	strb	r1, [r0, #0]
 8009f8e:	7819      	ldrb	r1, [r3, #0]
 8009f90:	3101      	adds	r1, #1
 8009f92:	7019      	strb	r1, [r3, #0]
 8009f94:	e7ae      	b.n	8009ef4 <_dtoa_r+0x554>
 8009f96:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa2:	d1b2      	bne.n	8009f0a <_dtoa_r+0x56a>
 8009fa4:	e7d3      	b.n	8009f4e <_dtoa_r+0x5ae>
 8009fa6:	bf00      	nop
 8009fa8:	0800c748 	.word	0x0800c748
 8009fac:	0800c720 	.word	0x0800c720
 8009fb0:	9907      	ldr	r1, [sp, #28]
 8009fb2:	2900      	cmp	r1, #0
 8009fb4:	f000 80d0 	beq.w	800a158 <_dtoa_r+0x7b8>
 8009fb8:	9906      	ldr	r1, [sp, #24]
 8009fba:	2901      	cmp	r1, #1
 8009fbc:	f300 80b4 	bgt.w	800a128 <_dtoa_r+0x788>
 8009fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fc2:	2900      	cmp	r1, #0
 8009fc4:	f000 80ac 	beq.w	800a120 <_dtoa_r+0x780>
 8009fc8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009fcc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009fd0:	461c      	mov	r4, r3
 8009fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd4:	9b04      	ldr	r3, [sp, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	9b05      	ldr	r3, [sp, #20]
 8009fdc:	2101      	movs	r1, #1
 8009fde:	4413      	add	r3, r2
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	f000 fb8a 	bl	800a6fc <__i2b>
 8009fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fea:	4607      	mov	r7, r0
 8009fec:	f1b8 0f00 	cmp.w	r8, #0
 8009ff0:	d00d      	beq.n	800a00e <_dtoa_r+0x66e>
 8009ff2:	9a05      	ldr	r2, [sp, #20]
 8009ff4:	2a00      	cmp	r2, #0
 8009ff6:	dd0a      	ble.n	800a00e <_dtoa_r+0x66e>
 8009ff8:	4542      	cmp	r2, r8
 8009ffa:	9904      	ldr	r1, [sp, #16]
 8009ffc:	bfa8      	it	ge
 8009ffe:	4642      	movge	r2, r8
 800a000:	1a89      	subs	r1, r1, r2
 800a002:	9104      	str	r1, [sp, #16]
 800a004:	9905      	ldr	r1, [sp, #20]
 800a006:	eba8 0802 	sub.w	r8, r8, r2
 800a00a:	1a8a      	subs	r2, r1, r2
 800a00c:	9205      	str	r2, [sp, #20]
 800a00e:	b303      	cbz	r3, 800a052 <_dtoa_r+0x6b2>
 800a010:	9a07      	ldr	r2, [sp, #28]
 800a012:	2a00      	cmp	r2, #0
 800a014:	f000 80a5 	beq.w	800a162 <_dtoa_r+0x7c2>
 800a018:	2c00      	cmp	r4, #0
 800a01a:	dd13      	ble.n	800a044 <_dtoa_r+0x6a4>
 800a01c:	4639      	mov	r1, r7
 800a01e:	4622      	mov	r2, r4
 800a020:	4630      	mov	r0, r6
 800a022:	930d      	str	r3, [sp, #52]	; 0x34
 800a024:	f000 fc2a 	bl	800a87c <__pow5mult>
 800a028:	462a      	mov	r2, r5
 800a02a:	4601      	mov	r1, r0
 800a02c:	4607      	mov	r7, r0
 800a02e:	4630      	mov	r0, r6
 800a030:	f000 fb7a 	bl	800a728 <__multiply>
 800a034:	4629      	mov	r1, r5
 800a036:	9009      	str	r0, [sp, #36]	; 0x24
 800a038:	4630      	mov	r0, r6
 800a03a:	f000 faa9 	bl	800a590 <_Bfree>
 800a03e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a042:	4615      	mov	r5, r2
 800a044:	1b1a      	subs	r2, r3, r4
 800a046:	d004      	beq.n	800a052 <_dtoa_r+0x6b2>
 800a048:	4629      	mov	r1, r5
 800a04a:	4630      	mov	r0, r6
 800a04c:	f000 fc16 	bl	800a87c <__pow5mult>
 800a050:	4605      	mov	r5, r0
 800a052:	2101      	movs	r1, #1
 800a054:	4630      	mov	r0, r6
 800a056:	f000 fb51 	bl	800a6fc <__i2b>
 800a05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	f340 8081 	ble.w	800a166 <_dtoa_r+0x7c6>
 800a064:	461a      	mov	r2, r3
 800a066:	4601      	mov	r1, r0
 800a068:	4630      	mov	r0, r6
 800a06a:	f000 fc07 	bl	800a87c <__pow5mult>
 800a06e:	9b06      	ldr	r3, [sp, #24]
 800a070:	2b01      	cmp	r3, #1
 800a072:	4604      	mov	r4, r0
 800a074:	dd7a      	ble.n	800a16c <_dtoa_r+0x7cc>
 800a076:	2300      	movs	r3, #0
 800a078:	9309      	str	r3, [sp, #36]	; 0x24
 800a07a:	6922      	ldr	r2, [r4, #16]
 800a07c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a080:	6910      	ldr	r0, [r2, #16]
 800a082:	f000 faed 	bl	800a660 <__hi0bits>
 800a086:	f1c0 0020 	rsb	r0, r0, #32
 800a08a:	9b05      	ldr	r3, [sp, #20]
 800a08c:	4418      	add	r0, r3
 800a08e:	f010 001f 	ands.w	r0, r0, #31
 800a092:	f000 8093 	beq.w	800a1bc <_dtoa_r+0x81c>
 800a096:	f1c0 0220 	rsb	r2, r0, #32
 800a09a:	2a04      	cmp	r2, #4
 800a09c:	f340 8085 	ble.w	800a1aa <_dtoa_r+0x80a>
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	f1c0 001c 	rsb	r0, r0, #28
 800a0a6:	4403      	add	r3, r0
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	9b05      	ldr	r3, [sp, #20]
 800a0ac:	4480      	add	r8, r0
 800a0ae:	4403      	add	r3, r0
 800a0b0:	9305      	str	r3, [sp, #20]
 800a0b2:	9b04      	ldr	r3, [sp, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dd05      	ble.n	800a0c4 <_dtoa_r+0x724>
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 fc37 	bl	800a930 <__lshift>
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	9b05      	ldr	r3, [sp, #20]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	dd05      	ble.n	800a0d6 <_dtoa_r+0x736>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f000 fc2e 	bl	800a930 <__lshift>
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d071      	beq.n	800a1c0 <_dtoa_r+0x820>
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f000 fc92 	bl	800aa08 <__mcmp>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	da6b      	bge.n	800a1c0 <_dtoa_r+0x820>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	220a      	movs	r2, #10
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f000 fa70 	bl	800a5d4 <__multadd>
 800a0f4:	9b07      	ldr	r3, [sp, #28]
 800a0f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8197 	beq.w	800a430 <_dtoa_r+0xa90>
 800a102:	4639      	mov	r1, r7
 800a104:	2300      	movs	r3, #0
 800a106:	220a      	movs	r2, #10
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 fa63 	bl	800a5d4 <__multadd>
 800a10e:	f1ba 0f00 	cmp.w	sl, #0
 800a112:	4607      	mov	r7, r0
 800a114:	f300 8093 	bgt.w	800a23e <_dtoa_r+0x89e>
 800a118:	9b06      	ldr	r3, [sp, #24]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	dc57      	bgt.n	800a1ce <_dtoa_r+0x82e>
 800a11e:	e08e      	b.n	800a23e <_dtoa_r+0x89e>
 800a120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a122:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a126:	e751      	b.n	8009fcc <_dtoa_r+0x62c>
 800a128:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	bfbf      	itttt	lt
 800a130:	1ae2      	sublt	r2, r4, r3
 800a132:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a134:	189b      	addlt	r3, r3, r2
 800a136:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a138:	bfae      	itee	ge
 800a13a:	1b1c      	subge	r4, r3, r4
 800a13c:	4623      	movlt	r3, r4
 800a13e:	2400      	movlt	r4, #0
 800a140:	f1b9 0f00 	cmp.w	r9, #0
 800a144:	bfb5      	itete	lt
 800a146:	9a04      	ldrlt	r2, [sp, #16]
 800a148:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a14c:	eba2 0809 	sublt.w	r8, r2, r9
 800a150:	464a      	movge	r2, r9
 800a152:	bfb8      	it	lt
 800a154:	2200      	movlt	r2, #0
 800a156:	e73c      	b.n	8009fd2 <_dtoa_r+0x632>
 800a158:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a15c:	9f07      	ldr	r7, [sp, #28]
 800a15e:	461c      	mov	r4, r3
 800a160:	e744      	b.n	8009fec <_dtoa_r+0x64c>
 800a162:	461a      	mov	r2, r3
 800a164:	e770      	b.n	800a048 <_dtoa_r+0x6a8>
 800a166:	9b06      	ldr	r3, [sp, #24]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	dc18      	bgt.n	800a19e <_dtoa_r+0x7fe>
 800a16c:	9b02      	ldr	r3, [sp, #8]
 800a16e:	b9b3      	cbnz	r3, 800a19e <_dtoa_r+0x7fe>
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a176:	b9a2      	cbnz	r2, 800a1a2 <_dtoa_r+0x802>
 800a178:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a17c:	0d12      	lsrs	r2, r2, #20
 800a17e:	0512      	lsls	r2, r2, #20
 800a180:	b18a      	cbz	r2, 800a1a6 <_dtoa_r+0x806>
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	3301      	adds	r3, #1
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	9b05      	ldr	r3, [sp, #20]
 800a18a:	3301      	adds	r3, #1
 800a18c:	9305      	str	r3, [sp, #20]
 800a18e:	2301      	movs	r3, #1
 800a190:	9309      	str	r3, [sp, #36]	; 0x24
 800a192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a194:	2b00      	cmp	r3, #0
 800a196:	f47f af70 	bne.w	800a07a <_dtoa_r+0x6da>
 800a19a:	2001      	movs	r0, #1
 800a19c:	e775      	b.n	800a08a <_dtoa_r+0x6ea>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e7f6      	b.n	800a190 <_dtoa_r+0x7f0>
 800a1a2:	9b02      	ldr	r3, [sp, #8]
 800a1a4:	e7f4      	b.n	800a190 <_dtoa_r+0x7f0>
 800a1a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a1a8:	e7f3      	b.n	800a192 <_dtoa_r+0x7f2>
 800a1aa:	d082      	beq.n	800a0b2 <_dtoa_r+0x712>
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	321c      	adds	r2, #28
 800a1b0:	4413      	add	r3, r2
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	9b05      	ldr	r3, [sp, #20]
 800a1b6:	4490      	add	r8, r2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	e779      	b.n	800a0b0 <_dtoa_r+0x710>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	e7f5      	b.n	800a1ac <_dtoa_r+0x80c>
 800a1c0:	f1b9 0f00 	cmp.w	r9, #0
 800a1c4:	dc36      	bgt.n	800a234 <_dtoa_r+0x894>
 800a1c6:	9b06      	ldr	r3, [sp, #24]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	dd33      	ble.n	800a234 <_dtoa_r+0x894>
 800a1cc:	46ca      	mov	sl, r9
 800a1ce:	f1ba 0f00 	cmp.w	sl, #0
 800a1d2:	d10d      	bne.n	800a1f0 <_dtoa_r+0x850>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4653      	mov	r3, sl
 800a1d8:	2205      	movs	r2, #5
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f000 f9fa 	bl	800a5d4 <__multadd>
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f000 fc0f 	bl	800aa08 <__mcmp>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f73f ade4 	bgt.w	8009db8 <_dtoa_r+0x418>
 800a1f0:	9b08      	ldr	r3, [sp, #32]
 800a1f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1f6:	ea6f 0b03 	mvn.w	fp, r3
 800a1fa:	f04f 0900 	mov.w	r9, #0
 800a1fe:	4621      	mov	r1, r4
 800a200:	4630      	mov	r0, r6
 800a202:	f000 f9c5 	bl	800a590 <_Bfree>
 800a206:	2f00      	cmp	r7, #0
 800a208:	f43f aea1 	beq.w	8009f4e <_dtoa_r+0x5ae>
 800a20c:	f1b9 0f00 	cmp.w	r9, #0
 800a210:	d005      	beq.n	800a21e <_dtoa_r+0x87e>
 800a212:	45b9      	cmp	r9, r7
 800a214:	d003      	beq.n	800a21e <_dtoa_r+0x87e>
 800a216:	4649      	mov	r1, r9
 800a218:	4630      	mov	r0, r6
 800a21a:	f000 f9b9 	bl	800a590 <_Bfree>
 800a21e:	4639      	mov	r1, r7
 800a220:	4630      	mov	r0, r6
 800a222:	f000 f9b5 	bl	800a590 <_Bfree>
 800a226:	e692      	b.n	8009f4e <_dtoa_r+0x5ae>
 800a228:	2400      	movs	r4, #0
 800a22a:	4627      	mov	r7, r4
 800a22c:	e7e0      	b.n	800a1f0 <_dtoa_r+0x850>
 800a22e:	4693      	mov	fp, r2
 800a230:	4627      	mov	r7, r4
 800a232:	e5c1      	b.n	8009db8 <_dtoa_r+0x418>
 800a234:	9b07      	ldr	r3, [sp, #28]
 800a236:	46ca      	mov	sl, r9
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 8100 	beq.w	800a43e <_dtoa_r+0xa9e>
 800a23e:	f1b8 0f00 	cmp.w	r8, #0
 800a242:	dd05      	ble.n	800a250 <_dtoa_r+0x8b0>
 800a244:	4639      	mov	r1, r7
 800a246:	4642      	mov	r2, r8
 800a248:	4630      	mov	r0, r6
 800a24a:	f000 fb71 	bl	800a930 <__lshift>
 800a24e:	4607      	mov	r7, r0
 800a250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a252:	2b00      	cmp	r3, #0
 800a254:	d05d      	beq.n	800a312 <_dtoa_r+0x972>
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	4630      	mov	r0, r6
 800a25a:	f000 f959 	bl	800a510 <_Balloc>
 800a25e:	4680      	mov	r8, r0
 800a260:	b928      	cbnz	r0, 800a26e <_dtoa_r+0x8ce>
 800a262:	4b82      	ldr	r3, [pc, #520]	; (800a46c <_dtoa_r+0xacc>)
 800a264:	4602      	mov	r2, r0
 800a266:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a26a:	f7ff bbb1 	b.w	80099d0 <_dtoa_r+0x30>
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	3202      	adds	r2, #2
 800a272:	0092      	lsls	r2, r2, #2
 800a274:	f107 010c 	add.w	r1, r7, #12
 800a278:	300c      	adds	r0, #12
 800a27a:	f001 f8bf 	bl	800b3fc <memcpy>
 800a27e:	2201      	movs	r2, #1
 800a280:	4641      	mov	r1, r8
 800a282:	4630      	mov	r0, r6
 800a284:	f000 fb54 	bl	800a930 <__lshift>
 800a288:	9b01      	ldr	r3, [sp, #4]
 800a28a:	3301      	adds	r3, #1
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	9b01      	ldr	r3, [sp, #4]
 800a290:	4453      	add	r3, sl
 800a292:	9308      	str	r3, [sp, #32]
 800a294:	9b02      	ldr	r3, [sp, #8]
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	46b9      	mov	r9, r7
 800a29c:	9307      	str	r3, [sp, #28]
 800a29e:	4607      	mov	r7, r0
 800a2a0:	9b04      	ldr	r3, [sp, #16]
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	9302      	str	r3, [sp, #8]
 800a2aa:	f7ff faf1 	bl	8009890 <quorem>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	3330      	adds	r3, #48	; 0x30
 800a2b2:	9005      	str	r0, [sp, #20]
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ba:	f000 fba5 	bl	800aa08 <__mcmp>
 800a2be:	463a      	mov	r2, r7
 800a2c0:	4682      	mov	sl, r0
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f000 fbbb 	bl	800aa40 <__mdiff>
 800a2ca:	68c2      	ldr	r2, [r0, #12]
 800a2cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	bb0a      	cbnz	r2, 800a316 <_dtoa_r+0x976>
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 fb97 	bl	800aa08 <__mcmp>
 800a2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2dc:	4602      	mov	r2, r0
 800a2de:	4641      	mov	r1, r8
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a2e6:	f000 f953 	bl	800a590 <_Bfree>
 800a2ea:	9b06      	ldr	r3, [sp, #24]
 800a2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a2f2:	ea43 0102 	orr.w	r1, r3, r2
 800a2f6:	9b07      	ldr	r3, [sp, #28]
 800a2f8:	4319      	orrs	r1, r3
 800a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fc:	d10d      	bne.n	800a31a <_dtoa_r+0x97a>
 800a2fe:	2b39      	cmp	r3, #57	; 0x39
 800a300:	d029      	beq.n	800a356 <_dtoa_r+0x9b6>
 800a302:	f1ba 0f00 	cmp.w	sl, #0
 800a306:	dd01      	ble.n	800a30c <_dtoa_r+0x96c>
 800a308:	9b05      	ldr	r3, [sp, #20]
 800a30a:	3331      	adds	r3, #49	; 0x31
 800a30c:	9a02      	ldr	r2, [sp, #8]
 800a30e:	7013      	strb	r3, [r2, #0]
 800a310:	e775      	b.n	800a1fe <_dtoa_r+0x85e>
 800a312:	4638      	mov	r0, r7
 800a314:	e7b8      	b.n	800a288 <_dtoa_r+0x8e8>
 800a316:	2201      	movs	r2, #1
 800a318:	e7e1      	b.n	800a2de <_dtoa_r+0x93e>
 800a31a:	f1ba 0f00 	cmp.w	sl, #0
 800a31e:	db06      	blt.n	800a32e <_dtoa_r+0x98e>
 800a320:	9906      	ldr	r1, [sp, #24]
 800a322:	ea41 0a0a 	orr.w	sl, r1, sl
 800a326:	9907      	ldr	r1, [sp, #28]
 800a328:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a32c:	d120      	bne.n	800a370 <_dtoa_r+0x9d0>
 800a32e:	2a00      	cmp	r2, #0
 800a330:	ddec      	ble.n	800a30c <_dtoa_r+0x96c>
 800a332:	4629      	mov	r1, r5
 800a334:	2201      	movs	r2, #1
 800a336:	4630      	mov	r0, r6
 800a338:	9304      	str	r3, [sp, #16]
 800a33a:	f000 faf9 	bl	800a930 <__lshift>
 800a33e:	4621      	mov	r1, r4
 800a340:	4605      	mov	r5, r0
 800a342:	f000 fb61 	bl	800aa08 <__mcmp>
 800a346:	2800      	cmp	r0, #0
 800a348:	9b04      	ldr	r3, [sp, #16]
 800a34a:	dc02      	bgt.n	800a352 <_dtoa_r+0x9b2>
 800a34c:	d1de      	bne.n	800a30c <_dtoa_r+0x96c>
 800a34e:	07da      	lsls	r2, r3, #31
 800a350:	d5dc      	bpl.n	800a30c <_dtoa_r+0x96c>
 800a352:	2b39      	cmp	r3, #57	; 0x39
 800a354:	d1d8      	bne.n	800a308 <_dtoa_r+0x968>
 800a356:	9a02      	ldr	r2, [sp, #8]
 800a358:	2339      	movs	r3, #57	; 0x39
 800a35a:	7013      	strb	r3, [r2, #0]
 800a35c:	4643      	mov	r3, r8
 800a35e:	4698      	mov	r8, r3
 800a360:	3b01      	subs	r3, #1
 800a362:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a366:	2a39      	cmp	r2, #57	; 0x39
 800a368:	d051      	beq.n	800a40e <_dtoa_r+0xa6e>
 800a36a:	3201      	adds	r2, #1
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	e746      	b.n	800a1fe <_dtoa_r+0x85e>
 800a370:	2a00      	cmp	r2, #0
 800a372:	dd03      	ble.n	800a37c <_dtoa_r+0x9dc>
 800a374:	2b39      	cmp	r3, #57	; 0x39
 800a376:	d0ee      	beq.n	800a356 <_dtoa_r+0x9b6>
 800a378:	3301      	adds	r3, #1
 800a37a:	e7c7      	b.n	800a30c <_dtoa_r+0x96c>
 800a37c:	9a04      	ldr	r2, [sp, #16]
 800a37e:	9908      	ldr	r1, [sp, #32]
 800a380:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a384:	428a      	cmp	r2, r1
 800a386:	d02b      	beq.n	800a3e0 <_dtoa_r+0xa40>
 800a388:	4629      	mov	r1, r5
 800a38a:	2300      	movs	r3, #0
 800a38c:	220a      	movs	r2, #10
 800a38e:	4630      	mov	r0, r6
 800a390:	f000 f920 	bl	800a5d4 <__multadd>
 800a394:	45b9      	cmp	r9, r7
 800a396:	4605      	mov	r5, r0
 800a398:	f04f 0300 	mov.w	r3, #0
 800a39c:	f04f 020a 	mov.w	r2, #10
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	d107      	bne.n	800a3b6 <_dtoa_r+0xa16>
 800a3a6:	f000 f915 	bl	800a5d4 <__multadd>
 800a3aa:	4681      	mov	r9, r0
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	9b04      	ldr	r3, [sp, #16]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	9304      	str	r3, [sp, #16]
 800a3b4:	e774      	b.n	800a2a0 <_dtoa_r+0x900>
 800a3b6:	f000 f90d 	bl	800a5d4 <__multadd>
 800a3ba:	4639      	mov	r1, r7
 800a3bc:	4681      	mov	r9, r0
 800a3be:	2300      	movs	r3, #0
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f000 f906 	bl	800a5d4 <__multadd>
 800a3c8:	4607      	mov	r7, r0
 800a3ca:	e7f0      	b.n	800a3ae <_dtoa_r+0xa0e>
 800a3cc:	f1ba 0f00 	cmp.w	sl, #0
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	bfcc      	ite	gt
 800a3d4:	46d0      	movgt	r8, sl
 800a3d6:	f04f 0801 	movle.w	r8, #1
 800a3da:	4490      	add	r8, r2
 800a3dc:	f04f 0900 	mov.w	r9, #0
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	9302      	str	r3, [sp, #8]
 800a3e8:	f000 faa2 	bl	800a930 <__lshift>
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	f000 fb0a 	bl	800aa08 <__mcmp>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	dcb1      	bgt.n	800a35c <_dtoa_r+0x9bc>
 800a3f8:	d102      	bne.n	800a400 <_dtoa_r+0xa60>
 800a3fa:	9b02      	ldr	r3, [sp, #8]
 800a3fc:	07db      	lsls	r3, r3, #31
 800a3fe:	d4ad      	bmi.n	800a35c <_dtoa_r+0x9bc>
 800a400:	4643      	mov	r3, r8
 800a402:	4698      	mov	r8, r3
 800a404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a408:	2a30      	cmp	r2, #48	; 0x30
 800a40a:	d0fa      	beq.n	800a402 <_dtoa_r+0xa62>
 800a40c:	e6f7      	b.n	800a1fe <_dtoa_r+0x85e>
 800a40e:	9a01      	ldr	r2, [sp, #4]
 800a410:	429a      	cmp	r2, r3
 800a412:	d1a4      	bne.n	800a35e <_dtoa_r+0x9be>
 800a414:	f10b 0b01 	add.w	fp, fp, #1
 800a418:	2331      	movs	r3, #49	; 0x31
 800a41a:	e778      	b.n	800a30e <_dtoa_r+0x96e>
 800a41c:	4b14      	ldr	r3, [pc, #80]	; (800a470 <_dtoa_r+0xad0>)
 800a41e:	f7ff bb2a 	b.w	8009a76 <_dtoa_r+0xd6>
 800a422:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a424:	2b00      	cmp	r3, #0
 800a426:	f47f ab05 	bne.w	8009a34 <_dtoa_r+0x94>
 800a42a:	4b12      	ldr	r3, [pc, #72]	; (800a474 <_dtoa_r+0xad4>)
 800a42c:	f7ff bb23 	b.w	8009a76 <_dtoa_r+0xd6>
 800a430:	f1ba 0f00 	cmp.w	sl, #0
 800a434:	dc03      	bgt.n	800a43e <_dtoa_r+0xa9e>
 800a436:	9b06      	ldr	r3, [sp, #24]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	f73f aec8 	bgt.w	800a1ce <_dtoa_r+0x82e>
 800a43e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a442:	4621      	mov	r1, r4
 800a444:	4628      	mov	r0, r5
 800a446:	f7ff fa23 	bl	8009890 <quorem>
 800a44a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a44e:	f808 3b01 	strb.w	r3, [r8], #1
 800a452:	9a01      	ldr	r2, [sp, #4]
 800a454:	eba8 0202 	sub.w	r2, r8, r2
 800a458:	4592      	cmp	sl, r2
 800a45a:	ddb7      	ble.n	800a3cc <_dtoa_r+0xa2c>
 800a45c:	4629      	mov	r1, r5
 800a45e:	2300      	movs	r3, #0
 800a460:	220a      	movs	r2, #10
 800a462:	4630      	mov	r0, r6
 800a464:	f000 f8b6 	bl	800a5d4 <__multadd>
 800a468:	4605      	mov	r5, r0
 800a46a:	e7ea      	b.n	800a442 <_dtoa_r+0xaa2>
 800a46c:	0800c6b0 	.word	0x0800c6b0
 800a470:	0800c610 	.word	0x0800c610
 800a474:	0800c634 	.word	0x0800c634

0800a478 <_free_r>:
 800a478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a47a:	2900      	cmp	r1, #0
 800a47c:	d044      	beq.n	800a508 <_free_r+0x90>
 800a47e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a482:	9001      	str	r0, [sp, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	f1a1 0404 	sub.w	r4, r1, #4
 800a48a:	bfb8      	it	lt
 800a48c:	18e4      	addlt	r4, r4, r3
 800a48e:	f7fe fb7b 	bl	8008b88 <__malloc_lock>
 800a492:	4a1e      	ldr	r2, [pc, #120]	; (800a50c <_free_r+0x94>)
 800a494:	9801      	ldr	r0, [sp, #4]
 800a496:	6813      	ldr	r3, [r2, #0]
 800a498:	b933      	cbnz	r3, 800a4a8 <_free_r+0x30>
 800a49a:	6063      	str	r3, [r4, #4]
 800a49c:	6014      	str	r4, [r2, #0]
 800a49e:	b003      	add	sp, #12
 800a4a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4a4:	f7fe bb76 	b.w	8008b94 <__malloc_unlock>
 800a4a8:	42a3      	cmp	r3, r4
 800a4aa:	d908      	bls.n	800a4be <_free_r+0x46>
 800a4ac:	6825      	ldr	r5, [r4, #0]
 800a4ae:	1961      	adds	r1, r4, r5
 800a4b0:	428b      	cmp	r3, r1
 800a4b2:	bf01      	itttt	eq
 800a4b4:	6819      	ldreq	r1, [r3, #0]
 800a4b6:	685b      	ldreq	r3, [r3, #4]
 800a4b8:	1949      	addeq	r1, r1, r5
 800a4ba:	6021      	streq	r1, [r4, #0]
 800a4bc:	e7ed      	b.n	800a49a <_free_r+0x22>
 800a4be:	461a      	mov	r2, r3
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	b10b      	cbz	r3, 800a4c8 <_free_r+0x50>
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	d9fa      	bls.n	800a4be <_free_r+0x46>
 800a4c8:	6811      	ldr	r1, [r2, #0]
 800a4ca:	1855      	adds	r5, r2, r1
 800a4cc:	42a5      	cmp	r5, r4
 800a4ce:	d10b      	bne.n	800a4e8 <_free_r+0x70>
 800a4d0:	6824      	ldr	r4, [r4, #0]
 800a4d2:	4421      	add	r1, r4
 800a4d4:	1854      	adds	r4, r2, r1
 800a4d6:	42a3      	cmp	r3, r4
 800a4d8:	6011      	str	r1, [r2, #0]
 800a4da:	d1e0      	bne.n	800a49e <_free_r+0x26>
 800a4dc:	681c      	ldr	r4, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	6053      	str	r3, [r2, #4]
 800a4e2:	440c      	add	r4, r1
 800a4e4:	6014      	str	r4, [r2, #0]
 800a4e6:	e7da      	b.n	800a49e <_free_r+0x26>
 800a4e8:	d902      	bls.n	800a4f0 <_free_r+0x78>
 800a4ea:	230c      	movs	r3, #12
 800a4ec:	6003      	str	r3, [r0, #0]
 800a4ee:	e7d6      	b.n	800a49e <_free_r+0x26>
 800a4f0:	6825      	ldr	r5, [r4, #0]
 800a4f2:	1961      	adds	r1, r4, r5
 800a4f4:	428b      	cmp	r3, r1
 800a4f6:	bf04      	itt	eq
 800a4f8:	6819      	ldreq	r1, [r3, #0]
 800a4fa:	685b      	ldreq	r3, [r3, #4]
 800a4fc:	6063      	str	r3, [r4, #4]
 800a4fe:	bf04      	itt	eq
 800a500:	1949      	addeq	r1, r1, r5
 800a502:	6021      	streq	r1, [r4, #0]
 800a504:	6054      	str	r4, [r2, #4]
 800a506:	e7ca      	b.n	800a49e <_free_r+0x26>
 800a508:	b003      	add	sp, #12
 800a50a:	bd30      	pop	{r4, r5, pc}
 800a50c:	2000125c 	.word	0x2000125c

0800a510 <_Balloc>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	69c6      	ldr	r6, [r0, #28]
 800a514:	4604      	mov	r4, r0
 800a516:	460d      	mov	r5, r1
 800a518:	b976      	cbnz	r6, 800a538 <_Balloc+0x28>
 800a51a:	2010      	movs	r0, #16
 800a51c:	f7fe fa8c 	bl	8008a38 <malloc>
 800a520:	4602      	mov	r2, r0
 800a522:	61e0      	str	r0, [r4, #28]
 800a524:	b920      	cbnz	r0, 800a530 <_Balloc+0x20>
 800a526:	4b18      	ldr	r3, [pc, #96]	; (800a588 <_Balloc+0x78>)
 800a528:	4818      	ldr	r0, [pc, #96]	; (800a58c <_Balloc+0x7c>)
 800a52a:	216b      	movs	r1, #107	; 0x6b
 800a52c:	f000 ff74 	bl	800b418 <__assert_func>
 800a530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a534:	6006      	str	r6, [r0, #0]
 800a536:	60c6      	str	r6, [r0, #12]
 800a538:	69e6      	ldr	r6, [r4, #28]
 800a53a:	68f3      	ldr	r3, [r6, #12]
 800a53c:	b183      	cbz	r3, 800a560 <_Balloc+0x50>
 800a53e:	69e3      	ldr	r3, [r4, #28]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a546:	b9b8      	cbnz	r0, 800a578 <_Balloc+0x68>
 800a548:	2101      	movs	r1, #1
 800a54a:	fa01 f605 	lsl.w	r6, r1, r5
 800a54e:	1d72      	adds	r2, r6, #5
 800a550:	0092      	lsls	r2, r2, #2
 800a552:	4620      	mov	r0, r4
 800a554:	f000 ff7e 	bl	800b454 <_calloc_r>
 800a558:	b160      	cbz	r0, 800a574 <_Balloc+0x64>
 800a55a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a55e:	e00e      	b.n	800a57e <_Balloc+0x6e>
 800a560:	2221      	movs	r2, #33	; 0x21
 800a562:	2104      	movs	r1, #4
 800a564:	4620      	mov	r0, r4
 800a566:	f000 ff75 	bl	800b454 <_calloc_r>
 800a56a:	69e3      	ldr	r3, [r4, #28]
 800a56c:	60f0      	str	r0, [r6, #12]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1e4      	bne.n	800a53e <_Balloc+0x2e>
 800a574:	2000      	movs	r0, #0
 800a576:	bd70      	pop	{r4, r5, r6, pc}
 800a578:	6802      	ldr	r2, [r0, #0]
 800a57a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a57e:	2300      	movs	r3, #0
 800a580:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a584:	e7f7      	b.n	800a576 <_Balloc+0x66>
 800a586:	bf00      	nop
 800a588:	0800c641 	.word	0x0800c641
 800a58c:	0800c6c1 	.word	0x0800c6c1

0800a590 <_Bfree>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	69c6      	ldr	r6, [r0, #28]
 800a594:	4605      	mov	r5, r0
 800a596:	460c      	mov	r4, r1
 800a598:	b976      	cbnz	r6, 800a5b8 <_Bfree+0x28>
 800a59a:	2010      	movs	r0, #16
 800a59c:	f7fe fa4c 	bl	8008a38 <malloc>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	61e8      	str	r0, [r5, #28]
 800a5a4:	b920      	cbnz	r0, 800a5b0 <_Bfree+0x20>
 800a5a6:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <_Bfree+0x3c>)
 800a5a8:	4809      	ldr	r0, [pc, #36]	; (800a5d0 <_Bfree+0x40>)
 800a5aa:	218f      	movs	r1, #143	; 0x8f
 800a5ac:	f000 ff34 	bl	800b418 <__assert_func>
 800a5b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5b4:	6006      	str	r6, [r0, #0]
 800a5b6:	60c6      	str	r6, [r0, #12]
 800a5b8:	b13c      	cbz	r4, 800a5ca <_Bfree+0x3a>
 800a5ba:	69eb      	ldr	r3, [r5, #28]
 800a5bc:	6862      	ldr	r2, [r4, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5c4:	6021      	str	r1, [r4, #0]
 800a5c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	0800c641 	.word	0x0800c641
 800a5d0:	0800c6c1 	.word	0x0800c6c1

0800a5d4 <__multadd>:
 800a5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d8:	690d      	ldr	r5, [r1, #16]
 800a5da:	4607      	mov	r7, r0
 800a5dc:	460c      	mov	r4, r1
 800a5de:	461e      	mov	r6, r3
 800a5e0:	f101 0c14 	add.w	ip, r1, #20
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	f8dc 3000 	ldr.w	r3, [ip]
 800a5ea:	b299      	uxth	r1, r3
 800a5ec:	fb02 6101 	mla	r1, r2, r1, r6
 800a5f0:	0c1e      	lsrs	r6, r3, #16
 800a5f2:	0c0b      	lsrs	r3, r1, #16
 800a5f4:	fb02 3306 	mla	r3, r2, r6, r3
 800a5f8:	b289      	uxth	r1, r1
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a600:	4285      	cmp	r5, r0
 800a602:	f84c 1b04 	str.w	r1, [ip], #4
 800a606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a60a:	dcec      	bgt.n	800a5e6 <__multadd+0x12>
 800a60c:	b30e      	cbz	r6, 800a652 <__multadd+0x7e>
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	42ab      	cmp	r3, r5
 800a612:	dc19      	bgt.n	800a648 <__multadd+0x74>
 800a614:	6861      	ldr	r1, [r4, #4]
 800a616:	4638      	mov	r0, r7
 800a618:	3101      	adds	r1, #1
 800a61a:	f7ff ff79 	bl	800a510 <_Balloc>
 800a61e:	4680      	mov	r8, r0
 800a620:	b928      	cbnz	r0, 800a62e <__multadd+0x5a>
 800a622:	4602      	mov	r2, r0
 800a624:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <__multadd+0x84>)
 800a626:	480d      	ldr	r0, [pc, #52]	; (800a65c <__multadd+0x88>)
 800a628:	21ba      	movs	r1, #186	; 0xba
 800a62a:	f000 fef5 	bl	800b418 <__assert_func>
 800a62e:	6922      	ldr	r2, [r4, #16]
 800a630:	3202      	adds	r2, #2
 800a632:	f104 010c 	add.w	r1, r4, #12
 800a636:	0092      	lsls	r2, r2, #2
 800a638:	300c      	adds	r0, #12
 800a63a:	f000 fedf 	bl	800b3fc <memcpy>
 800a63e:	4621      	mov	r1, r4
 800a640:	4638      	mov	r0, r7
 800a642:	f7ff ffa5 	bl	800a590 <_Bfree>
 800a646:	4644      	mov	r4, r8
 800a648:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a64c:	3501      	adds	r5, #1
 800a64e:	615e      	str	r6, [r3, #20]
 800a650:	6125      	str	r5, [r4, #16]
 800a652:	4620      	mov	r0, r4
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	0800c6b0 	.word	0x0800c6b0
 800a65c:	0800c6c1 	.word	0x0800c6c1

0800a660 <__hi0bits>:
 800a660:	0c03      	lsrs	r3, r0, #16
 800a662:	041b      	lsls	r3, r3, #16
 800a664:	b9d3      	cbnz	r3, 800a69c <__hi0bits+0x3c>
 800a666:	0400      	lsls	r0, r0, #16
 800a668:	2310      	movs	r3, #16
 800a66a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a66e:	bf04      	itt	eq
 800a670:	0200      	lsleq	r0, r0, #8
 800a672:	3308      	addeq	r3, #8
 800a674:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a678:	bf04      	itt	eq
 800a67a:	0100      	lsleq	r0, r0, #4
 800a67c:	3304      	addeq	r3, #4
 800a67e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a682:	bf04      	itt	eq
 800a684:	0080      	lsleq	r0, r0, #2
 800a686:	3302      	addeq	r3, #2
 800a688:	2800      	cmp	r0, #0
 800a68a:	db05      	blt.n	800a698 <__hi0bits+0x38>
 800a68c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a690:	f103 0301 	add.w	r3, r3, #1
 800a694:	bf08      	it	eq
 800a696:	2320      	moveq	r3, #32
 800a698:	4618      	mov	r0, r3
 800a69a:	4770      	bx	lr
 800a69c:	2300      	movs	r3, #0
 800a69e:	e7e4      	b.n	800a66a <__hi0bits+0xa>

0800a6a0 <__lo0bits>:
 800a6a0:	6803      	ldr	r3, [r0, #0]
 800a6a2:	f013 0207 	ands.w	r2, r3, #7
 800a6a6:	d00c      	beq.n	800a6c2 <__lo0bits+0x22>
 800a6a8:	07d9      	lsls	r1, r3, #31
 800a6aa:	d422      	bmi.n	800a6f2 <__lo0bits+0x52>
 800a6ac:	079a      	lsls	r2, r3, #30
 800a6ae:	bf49      	itett	mi
 800a6b0:	085b      	lsrmi	r3, r3, #1
 800a6b2:	089b      	lsrpl	r3, r3, #2
 800a6b4:	6003      	strmi	r3, [r0, #0]
 800a6b6:	2201      	movmi	r2, #1
 800a6b8:	bf5c      	itt	pl
 800a6ba:	6003      	strpl	r3, [r0, #0]
 800a6bc:	2202      	movpl	r2, #2
 800a6be:	4610      	mov	r0, r2
 800a6c0:	4770      	bx	lr
 800a6c2:	b299      	uxth	r1, r3
 800a6c4:	b909      	cbnz	r1, 800a6ca <__lo0bits+0x2a>
 800a6c6:	0c1b      	lsrs	r3, r3, #16
 800a6c8:	2210      	movs	r2, #16
 800a6ca:	b2d9      	uxtb	r1, r3
 800a6cc:	b909      	cbnz	r1, 800a6d2 <__lo0bits+0x32>
 800a6ce:	3208      	adds	r2, #8
 800a6d0:	0a1b      	lsrs	r3, r3, #8
 800a6d2:	0719      	lsls	r1, r3, #28
 800a6d4:	bf04      	itt	eq
 800a6d6:	091b      	lsreq	r3, r3, #4
 800a6d8:	3204      	addeq	r2, #4
 800a6da:	0799      	lsls	r1, r3, #30
 800a6dc:	bf04      	itt	eq
 800a6de:	089b      	lsreq	r3, r3, #2
 800a6e0:	3202      	addeq	r2, #2
 800a6e2:	07d9      	lsls	r1, r3, #31
 800a6e4:	d403      	bmi.n	800a6ee <__lo0bits+0x4e>
 800a6e6:	085b      	lsrs	r3, r3, #1
 800a6e8:	f102 0201 	add.w	r2, r2, #1
 800a6ec:	d003      	beq.n	800a6f6 <__lo0bits+0x56>
 800a6ee:	6003      	str	r3, [r0, #0]
 800a6f0:	e7e5      	b.n	800a6be <__lo0bits+0x1e>
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	e7e3      	b.n	800a6be <__lo0bits+0x1e>
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	e7e1      	b.n	800a6be <__lo0bits+0x1e>
	...

0800a6fc <__i2b>:
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	460c      	mov	r4, r1
 800a700:	2101      	movs	r1, #1
 800a702:	f7ff ff05 	bl	800a510 <_Balloc>
 800a706:	4602      	mov	r2, r0
 800a708:	b928      	cbnz	r0, 800a716 <__i2b+0x1a>
 800a70a:	4b05      	ldr	r3, [pc, #20]	; (800a720 <__i2b+0x24>)
 800a70c:	4805      	ldr	r0, [pc, #20]	; (800a724 <__i2b+0x28>)
 800a70e:	f240 1145 	movw	r1, #325	; 0x145
 800a712:	f000 fe81 	bl	800b418 <__assert_func>
 800a716:	2301      	movs	r3, #1
 800a718:	6144      	str	r4, [r0, #20]
 800a71a:	6103      	str	r3, [r0, #16]
 800a71c:	bd10      	pop	{r4, pc}
 800a71e:	bf00      	nop
 800a720:	0800c6b0 	.word	0x0800c6b0
 800a724:	0800c6c1 	.word	0x0800c6c1

0800a728 <__multiply>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	4691      	mov	r9, r2
 800a72e:	690a      	ldr	r2, [r1, #16]
 800a730:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a734:	429a      	cmp	r2, r3
 800a736:	bfb8      	it	lt
 800a738:	460b      	movlt	r3, r1
 800a73a:	460c      	mov	r4, r1
 800a73c:	bfbc      	itt	lt
 800a73e:	464c      	movlt	r4, r9
 800a740:	4699      	movlt	r9, r3
 800a742:	6927      	ldr	r7, [r4, #16]
 800a744:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a748:	68a3      	ldr	r3, [r4, #8]
 800a74a:	6861      	ldr	r1, [r4, #4]
 800a74c:	eb07 060a 	add.w	r6, r7, sl
 800a750:	42b3      	cmp	r3, r6
 800a752:	b085      	sub	sp, #20
 800a754:	bfb8      	it	lt
 800a756:	3101      	addlt	r1, #1
 800a758:	f7ff feda 	bl	800a510 <_Balloc>
 800a75c:	b930      	cbnz	r0, 800a76c <__multiply+0x44>
 800a75e:	4602      	mov	r2, r0
 800a760:	4b44      	ldr	r3, [pc, #272]	; (800a874 <__multiply+0x14c>)
 800a762:	4845      	ldr	r0, [pc, #276]	; (800a878 <__multiply+0x150>)
 800a764:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a768:	f000 fe56 	bl	800b418 <__assert_func>
 800a76c:	f100 0514 	add.w	r5, r0, #20
 800a770:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a774:	462b      	mov	r3, r5
 800a776:	2200      	movs	r2, #0
 800a778:	4543      	cmp	r3, r8
 800a77a:	d321      	bcc.n	800a7c0 <__multiply+0x98>
 800a77c:	f104 0314 	add.w	r3, r4, #20
 800a780:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a784:	f109 0314 	add.w	r3, r9, #20
 800a788:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a78c:	9202      	str	r2, [sp, #8]
 800a78e:	1b3a      	subs	r2, r7, r4
 800a790:	3a15      	subs	r2, #21
 800a792:	f022 0203 	bic.w	r2, r2, #3
 800a796:	3204      	adds	r2, #4
 800a798:	f104 0115 	add.w	r1, r4, #21
 800a79c:	428f      	cmp	r7, r1
 800a79e:	bf38      	it	cc
 800a7a0:	2204      	movcc	r2, #4
 800a7a2:	9201      	str	r2, [sp, #4]
 800a7a4:	9a02      	ldr	r2, [sp, #8]
 800a7a6:	9303      	str	r3, [sp, #12]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d80c      	bhi.n	800a7c6 <__multiply+0x9e>
 800a7ac:	2e00      	cmp	r6, #0
 800a7ae:	dd03      	ble.n	800a7b8 <__multiply+0x90>
 800a7b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d05b      	beq.n	800a870 <__multiply+0x148>
 800a7b8:	6106      	str	r6, [r0, #16]
 800a7ba:	b005      	add	sp, #20
 800a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c0:	f843 2b04 	str.w	r2, [r3], #4
 800a7c4:	e7d8      	b.n	800a778 <__multiply+0x50>
 800a7c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7ca:	f1ba 0f00 	cmp.w	sl, #0
 800a7ce:	d024      	beq.n	800a81a <__multiply+0xf2>
 800a7d0:	f104 0e14 	add.w	lr, r4, #20
 800a7d4:	46a9      	mov	r9, r5
 800a7d6:	f04f 0c00 	mov.w	ip, #0
 800a7da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a7de:	f8d9 1000 	ldr.w	r1, [r9]
 800a7e2:	fa1f fb82 	uxth.w	fp, r2
 800a7e6:	b289      	uxth	r1, r1
 800a7e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a7ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a7f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a7f4:	4461      	add	r1, ip
 800a7f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a7fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a802:	b289      	uxth	r1, r1
 800a804:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a808:	4577      	cmp	r7, lr
 800a80a:	f849 1b04 	str.w	r1, [r9], #4
 800a80e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a812:	d8e2      	bhi.n	800a7da <__multiply+0xb2>
 800a814:	9a01      	ldr	r2, [sp, #4]
 800a816:	f845 c002 	str.w	ip, [r5, r2]
 800a81a:	9a03      	ldr	r2, [sp, #12]
 800a81c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a820:	3304      	adds	r3, #4
 800a822:	f1b9 0f00 	cmp.w	r9, #0
 800a826:	d021      	beq.n	800a86c <__multiply+0x144>
 800a828:	6829      	ldr	r1, [r5, #0]
 800a82a:	f104 0c14 	add.w	ip, r4, #20
 800a82e:	46ae      	mov	lr, r5
 800a830:	f04f 0a00 	mov.w	sl, #0
 800a834:	f8bc b000 	ldrh.w	fp, [ip]
 800a838:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a83c:	fb09 220b 	mla	r2, r9, fp, r2
 800a840:	4452      	add	r2, sl
 800a842:	b289      	uxth	r1, r1
 800a844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a848:	f84e 1b04 	str.w	r1, [lr], #4
 800a84c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a850:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a854:	f8be 1000 	ldrh.w	r1, [lr]
 800a858:	fb09 110a 	mla	r1, r9, sl, r1
 800a85c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a860:	4567      	cmp	r7, ip
 800a862:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a866:	d8e5      	bhi.n	800a834 <__multiply+0x10c>
 800a868:	9a01      	ldr	r2, [sp, #4]
 800a86a:	50a9      	str	r1, [r5, r2]
 800a86c:	3504      	adds	r5, #4
 800a86e:	e799      	b.n	800a7a4 <__multiply+0x7c>
 800a870:	3e01      	subs	r6, #1
 800a872:	e79b      	b.n	800a7ac <__multiply+0x84>
 800a874:	0800c6b0 	.word	0x0800c6b0
 800a878:	0800c6c1 	.word	0x0800c6c1

0800a87c <__pow5mult>:
 800a87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a880:	4615      	mov	r5, r2
 800a882:	f012 0203 	ands.w	r2, r2, #3
 800a886:	4606      	mov	r6, r0
 800a888:	460f      	mov	r7, r1
 800a88a:	d007      	beq.n	800a89c <__pow5mult+0x20>
 800a88c:	4c25      	ldr	r4, [pc, #148]	; (800a924 <__pow5mult+0xa8>)
 800a88e:	3a01      	subs	r2, #1
 800a890:	2300      	movs	r3, #0
 800a892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a896:	f7ff fe9d 	bl	800a5d4 <__multadd>
 800a89a:	4607      	mov	r7, r0
 800a89c:	10ad      	asrs	r5, r5, #2
 800a89e:	d03d      	beq.n	800a91c <__pow5mult+0xa0>
 800a8a0:	69f4      	ldr	r4, [r6, #28]
 800a8a2:	b97c      	cbnz	r4, 800a8c4 <__pow5mult+0x48>
 800a8a4:	2010      	movs	r0, #16
 800a8a6:	f7fe f8c7 	bl	8008a38 <malloc>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	61f0      	str	r0, [r6, #28]
 800a8ae:	b928      	cbnz	r0, 800a8bc <__pow5mult+0x40>
 800a8b0:	4b1d      	ldr	r3, [pc, #116]	; (800a928 <__pow5mult+0xac>)
 800a8b2:	481e      	ldr	r0, [pc, #120]	; (800a92c <__pow5mult+0xb0>)
 800a8b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a8b8:	f000 fdae 	bl	800b418 <__assert_func>
 800a8bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8c0:	6004      	str	r4, [r0, #0]
 800a8c2:	60c4      	str	r4, [r0, #12]
 800a8c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a8c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8cc:	b94c      	cbnz	r4, 800a8e2 <__pow5mult+0x66>
 800a8ce:	f240 2171 	movw	r1, #625	; 0x271
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f7ff ff12 	bl	800a6fc <__i2b>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8de:	4604      	mov	r4, r0
 800a8e0:	6003      	str	r3, [r0, #0]
 800a8e2:	f04f 0900 	mov.w	r9, #0
 800a8e6:	07eb      	lsls	r3, r5, #31
 800a8e8:	d50a      	bpl.n	800a900 <__pow5mult+0x84>
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff1a 	bl	800a728 <__multiply>
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	4680      	mov	r8, r0
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	f7ff fe49 	bl	800a590 <_Bfree>
 800a8fe:	4647      	mov	r7, r8
 800a900:	106d      	asrs	r5, r5, #1
 800a902:	d00b      	beq.n	800a91c <__pow5mult+0xa0>
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	b938      	cbnz	r0, 800a918 <__pow5mult+0x9c>
 800a908:	4622      	mov	r2, r4
 800a90a:	4621      	mov	r1, r4
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff ff0b 	bl	800a728 <__multiply>
 800a912:	6020      	str	r0, [r4, #0]
 800a914:	f8c0 9000 	str.w	r9, [r0]
 800a918:	4604      	mov	r4, r0
 800a91a:	e7e4      	b.n	800a8e6 <__pow5mult+0x6a>
 800a91c:	4638      	mov	r0, r7
 800a91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a922:	bf00      	nop
 800a924:	0800c810 	.word	0x0800c810
 800a928:	0800c641 	.word	0x0800c641
 800a92c:	0800c6c1 	.word	0x0800c6c1

0800a930 <__lshift>:
 800a930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a934:	460c      	mov	r4, r1
 800a936:	6849      	ldr	r1, [r1, #4]
 800a938:	6923      	ldr	r3, [r4, #16]
 800a93a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a93e:	68a3      	ldr	r3, [r4, #8]
 800a940:	4607      	mov	r7, r0
 800a942:	4691      	mov	r9, r2
 800a944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a948:	f108 0601 	add.w	r6, r8, #1
 800a94c:	42b3      	cmp	r3, r6
 800a94e:	db0b      	blt.n	800a968 <__lshift+0x38>
 800a950:	4638      	mov	r0, r7
 800a952:	f7ff fddd 	bl	800a510 <_Balloc>
 800a956:	4605      	mov	r5, r0
 800a958:	b948      	cbnz	r0, 800a96e <__lshift+0x3e>
 800a95a:	4602      	mov	r2, r0
 800a95c:	4b28      	ldr	r3, [pc, #160]	; (800aa00 <__lshift+0xd0>)
 800a95e:	4829      	ldr	r0, [pc, #164]	; (800aa04 <__lshift+0xd4>)
 800a960:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a964:	f000 fd58 	bl	800b418 <__assert_func>
 800a968:	3101      	adds	r1, #1
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	e7ee      	b.n	800a94c <__lshift+0x1c>
 800a96e:	2300      	movs	r3, #0
 800a970:	f100 0114 	add.w	r1, r0, #20
 800a974:	f100 0210 	add.w	r2, r0, #16
 800a978:	4618      	mov	r0, r3
 800a97a:	4553      	cmp	r3, sl
 800a97c:	db33      	blt.n	800a9e6 <__lshift+0xb6>
 800a97e:	6920      	ldr	r0, [r4, #16]
 800a980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a984:	f104 0314 	add.w	r3, r4, #20
 800a988:	f019 091f 	ands.w	r9, r9, #31
 800a98c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a994:	d02b      	beq.n	800a9ee <__lshift+0xbe>
 800a996:	f1c9 0e20 	rsb	lr, r9, #32
 800a99a:	468a      	mov	sl, r1
 800a99c:	2200      	movs	r2, #0
 800a99e:	6818      	ldr	r0, [r3, #0]
 800a9a0:	fa00 f009 	lsl.w	r0, r0, r9
 800a9a4:	4310      	orrs	r0, r2
 800a9a6:	f84a 0b04 	str.w	r0, [sl], #4
 800a9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ae:	459c      	cmp	ip, r3
 800a9b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9b4:	d8f3      	bhi.n	800a99e <__lshift+0x6e>
 800a9b6:	ebac 0304 	sub.w	r3, ip, r4
 800a9ba:	3b15      	subs	r3, #21
 800a9bc:	f023 0303 	bic.w	r3, r3, #3
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	f104 0015 	add.w	r0, r4, #21
 800a9c6:	4584      	cmp	ip, r0
 800a9c8:	bf38      	it	cc
 800a9ca:	2304      	movcc	r3, #4
 800a9cc:	50ca      	str	r2, [r1, r3]
 800a9ce:	b10a      	cbz	r2, 800a9d4 <__lshift+0xa4>
 800a9d0:	f108 0602 	add.w	r6, r8, #2
 800a9d4:	3e01      	subs	r6, #1
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	612e      	str	r6, [r5, #16]
 800a9da:	4621      	mov	r1, r4
 800a9dc:	f7ff fdd8 	bl	800a590 <_Bfree>
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	e7c5      	b.n	800a97a <__lshift+0x4a>
 800a9ee:	3904      	subs	r1, #4
 800a9f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9f8:	459c      	cmp	ip, r3
 800a9fa:	d8f9      	bhi.n	800a9f0 <__lshift+0xc0>
 800a9fc:	e7ea      	b.n	800a9d4 <__lshift+0xa4>
 800a9fe:	bf00      	nop
 800aa00:	0800c6b0 	.word	0x0800c6b0
 800aa04:	0800c6c1 	.word	0x0800c6c1

0800aa08 <__mcmp>:
 800aa08:	b530      	push	{r4, r5, lr}
 800aa0a:	6902      	ldr	r2, [r0, #16]
 800aa0c:	690c      	ldr	r4, [r1, #16]
 800aa0e:	1b12      	subs	r2, r2, r4
 800aa10:	d10e      	bne.n	800aa30 <__mcmp+0x28>
 800aa12:	f100 0314 	add.w	r3, r0, #20
 800aa16:	3114      	adds	r1, #20
 800aa18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa28:	42a5      	cmp	r5, r4
 800aa2a:	d003      	beq.n	800aa34 <__mcmp+0x2c>
 800aa2c:	d305      	bcc.n	800aa3a <__mcmp+0x32>
 800aa2e:	2201      	movs	r2, #1
 800aa30:	4610      	mov	r0, r2
 800aa32:	bd30      	pop	{r4, r5, pc}
 800aa34:	4283      	cmp	r3, r0
 800aa36:	d3f3      	bcc.n	800aa20 <__mcmp+0x18>
 800aa38:	e7fa      	b.n	800aa30 <__mcmp+0x28>
 800aa3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa3e:	e7f7      	b.n	800aa30 <__mcmp+0x28>

0800aa40 <__mdiff>:
 800aa40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	460c      	mov	r4, r1
 800aa46:	4606      	mov	r6, r0
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	4690      	mov	r8, r2
 800aa4e:	f7ff ffdb 	bl	800aa08 <__mcmp>
 800aa52:	1e05      	subs	r5, r0, #0
 800aa54:	d110      	bne.n	800aa78 <__mdiff+0x38>
 800aa56:	4629      	mov	r1, r5
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f7ff fd59 	bl	800a510 <_Balloc>
 800aa5e:	b930      	cbnz	r0, 800aa6e <__mdiff+0x2e>
 800aa60:	4b3a      	ldr	r3, [pc, #232]	; (800ab4c <__mdiff+0x10c>)
 800aa62:	4602      	mov	r2, r0
 800aa64:	f240 2137 	movw	r1, #567	; 0x237
 800aa68:	4839      	ldr	r0, [pc, #228]	; (800ab50 <__mdiff+0x110>)
 800aa6a:	f000 fcd5 	bl	800b418 <__assert_func>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa78:	bfa4      	itt	ge
 800aa7a:	4643      	movge	r3, r8
 800aa7c:	46a0      	movge	r8, r4
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa84:	bfa6      	itte	ge
 800aa86:	461c      	movge	r4, r3
 800aa88:	2500      	movge	r5, #0
 800aa8a:	2501      	movlt	r5, #1
 800aa8c:	f7ff fd40 	bl	800a510 <_Balloc>
 800aa90:	b920      	cbnz	r0, 800aa9c <__mdiff+0x5c>
 800aa92:	4b2e      	ldr	r3, [pc, #184]	; (800ab4c <__mdiff+0x10c>)
 800aa94:	4602      	mov	r2, r0
 800aa96:	f240 2145 	movw	r1, #581	; 0x245
 800aa9a:	e7e5      	b.n	800aa68 <__mdiff+0x28>
 800aa9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aaa0:	6926      	ldr	r6, [r4, #16]
 800aaa2:	60c5      	str	r5, [r0, #12]
 800aaa4:	f104 0914 	add.w	r9, r4, #20
 800aaa8:	f108 0514 	add.w	r5, r8, #20
 800aaac:	f100 0e14 	add.w	lr, r0, #20
 800aab0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aab4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aab8:	f108 0210 	add.w	r2, r8, #16
 800aabc:	46f2      	mov	sl, lr
 800aabe:	2100      	movs	r1, #0
 800aac0:	f859 3b04 	ldr.w	r3, [r9], #4
 800aac4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aac8:	fa11 f88b 	uxtah	r8, r1, fp
 800aacc:	b299      	uxth	r1, r3
 800aace:	0c1b      	lsrs	r3, r3, #16
 800aad0:	eba8 0801 	sub.w	r8, r8, r1
 800aad4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aad8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aadc:	fa1f f888 	uxth.w	r8, r8
 800aae0:	1419      	asrs	r1, r3, #16
 800aae2:	454e      	cmp	r6, r9
 800aae4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aae8:	f84a 3b04 	str.w	r3, [sl], #4
 800aaec:	d8e8      	bhi.n	800aac0 <__mdiff+0x80>
 800aaee:	1b33      	subs	r3, r6, r4
 800aaf0:	3b15      	subs	r3, #21
 800aaf2:	f023 0303 	bic.w	r3, r3, #3
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	3415      	adds	r4, #21
 800aafa:	42a6      	cmp	r6, r4
 800aafc:	bf38      	it	cc
 800aafe:	2304      	movcc	r3, #4
 800ab00:	441d      	add	r5, r3
 800ab02:	4473      	add	r3, lr
 800ab04:	469e      	mov	lr, r3
 800ab06:	462e      	mov	r6, r5
 800ab08:	4566      	cmp	r6, ip
 800ab0a:	d30e      	bcc.n	800ab2a <__mdiff+0xea>
 800ab0c:	f10c 0203 	add.w	r2, ip, #3
 800ab10:	1b52      	subs	r2, r2, r5
 800ab12:	f022 0203 	bic.w	r2, r2, #3
 800ab16:	3d03      	subs	r5, #3
 800ab18:	45ac      	cmp	ip, r5
 800ab1a:	bf38      	it	cc
 800ab1c:	2200      	movcc	r2, #0
 800ab1e:	4413      	add	r3, r2
 800ab20:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab24:	b17a      	cbz	r2, 800ab46 <__mdiff+0x106>
 800ab26:	6107      	str	r7, [r0, #16]
 800ab28:	e7a4      	b.n	800aa74 <__mdiff+0x34>
 800ab2a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab2e:	fa11 f288 	uxtah	r2, r1, r8
 800ab32:	1414      	asrs	r4, r2, #16
 800ab34:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab38:	b292      	uxth	r2, r2
 800ab3a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab3e:	f84e 2b04 	str.w	r2, [lr], #4
 800ab42:	1421      	asrs	r1, r4, #16
 800ab44:	e7e0      	b.n	800ab08 <__mdiff+0xc8>
 800ab46:	3f01      	subs	r7, #1
 800ab48:	e7ea      	b.n	800ab20 <__mdiff+0xe0>
 800ab4a:	bf00      	nop
 800ab4c:	0800c6b0 	.word	0x0800c6b0
 800ab50:	0800c6c1 	.word	0x0800c6c1

0800ab54 <__d2b>:
 800ab54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab58:	460f      	mov	r7, r1
 800ab5a:	2101      	movs	r1, #1
 800ab5c:	ec59 8b10 	vmov	r8, r9, d0
 800ab60:	4616      	mov	r6, r2
 800ab62:	f7ff fcd5 	bl	800a510 <_Balloc>
 800ab66:	4604      	mov	r4, r0
 800ab68:	b930      	cbnz	r0, 800ab78 <__d2b+0x24>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	4b24      	ldr	r3, [pc, #144]	; (800ac00 <__d2b+0xac>)
 800ab6e:	4825      	ldr	r0, [pc, #148]	; (800ac04 <__d2b+0xb0>)
 800ab70:	f240 310f 	movw	r1, #783	; 0x30f
 800ab74:	f000 fc50 	bl	800b418 <__assert_func>
 800ab78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab80:	bb2d      	cbnz	r5, 800abce <__d2b+0x7a>
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	f1b8 0300 	subs.w	r3, r8, #0
 800ab88:	d026      	beq.n	800abd8 <__d2b+0x84>
 800ab8a:	4668      	mov	r0, sp
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	f7ff fd87 	bl	800a6a0 <__lo0bits>
 800ab92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab96:	b1e8      	cbz	r0, 800abd4 <__d2b+0x80>
 800ab98:	f1c0 0320 	rsb	r3, r0, #32
 800ab9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aba0:	430b      	orrs	r3, r1
 800aba2:	40c2      	lsrs	r2, r0
 800aba4:	6163      	str	r3, [r4, #20]
 800aba6:	9201      	str	r2, [sp, #4]
 800aba8:	9b01      	ldr	r3, [sp, #4]
 800abaa:	61a3      	str	r3, [r4, #24]
 800abac:	2b00      	cmp	r3, #0
 800abae:	bf14      	ite	ne
 800abb0:	2202      	movne	r2, #2
 800abb2:	2201      	moveq	r2, #1
 800abb4:	6122      	str	r2, [r4, #16]
 800abb6:	b1bd      	cbz	r5, 800abe8 <__d2b+0x94>
 800abb8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800abbc:	4405      	add	r5, r0
 800abbe:	603d      	str	r5, [r7, #0]
 800abc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800abc4:	6030      	str	r0, [r6, #0]
 800abc6:	4620      	mov	r0, r4
 800abc8:	b003      	add	sp, #12
 800abca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abd2:	e7d6      	b.n	800ab82 <__d2b+0x2e>
 800abd4:	6161      	str	r1, [r4, #20]
 800abd6:	e7e7      	b.n	800aba8 <__d2b+0x54>
 800abd8:	a801      	add	r0, sp, #4
 800abda:	f7ff fd61 	bl	800a6a0 <__lo0bits>
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	6163      	str	r3, [r4, #20]
 800abe2:	3020      	adds	r0, #32
 800abe4:	2201      	movs	r2, #1
 800abe6:	e7e5      	b.n	800abb4 <__d2b+0x60>
 800abe8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abf0:	6038      	str	r0, [r7, #0]
 800abf2:	6918      	ldr	r0, [r3, #16]
 800abf4:	f7ff fd34 	bl	800a660 <__hi0bits>
 800abf8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abfc:	e7e2      	b.n	800abc4 <__d2b+0x70>
 800abfe:	bf00      	nop
 800ac00:	0800c6b0 	.word	0x0800c6b0
 800ac04:	0800c6c1 	.word	0x0800c6c1

0800ac08 <__ssputs_r>:
 800ac08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac0c:	688e      	ldr	r6, [r1, #8]
 800ac0e:	461f      	mov	r7, r3
 800ac10:	42be      	cmp	r6, r7
 800ac12:	680b      	ldr	r3, [r1, #0]
 800ac14:	4682      	mov	sl, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	4690      	mov	r8, r2
 800ac1a:	d82c      	bhi.n	800ac76 <__ssputs_r+0x6e>
 800ac1c:	898a      	ldrh	r2, [r1, #12]
 800ac1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac22:	d026      	beq.n	800ac72 <__ssputs_r+0x6a>
 800ac24:	6965      	ldr	r5, [r4, #20]
 800ac26:	6909      	ldr	r1, [r1, #16]
 800ac28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac2c:	eba3 0901 	sub.w	r9, r3, r1
 800ac30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac34:	1c7b      	adds	r3, r7, #1
 800ac36:	444b      	add	r3, r9
 800ac38:	106d      	asrs	r5, r5, #1
 800ac3a:	429d      	cmp	r5, r3
 800ac3c:	bf38      	it	cc
 800ac3e:	461d      	movcc	r5, r3
 800ac40:	0553      	lsls	r3, r2, #21
 800ac42:	d527      	bpl.n	800ac94 <__ssputs_r+0x8c>
 800ac44:	4629      	mov	r1, r5
 800ac46:	f7fd ff1f 	bl	8008a88 <_malloc_r>
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	b360      	cbz	r0, 800aca8 <__ssputs_r+0xa0>
 800ac4e:	6921      	ldr	r1, [r4, #16]
 800ac50:	464a      	mov	r2, r9
 800ac52:	f000 fbd3 	bl	800b3fc <memcpy>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	6126      	str	r6, [r4, #16]
 800ac64:	6165      	str	r5, [r4, #20]
 800ac66:	444e      	add	r6, r9
 800ac68:	eba5 0509 	sub.w	r5, r5, r9
 800ac6c:	6026      	str	r6, [r4, #0]
 800ac6e:	60a5      	str	r5, [r4, #8]
 800ac70:	463e      	mov	r6, r7
 800ac72:	42be      	cmp	r6, r7
 800ac74:	d900      	bls.n	800ac78 <__ssputs_r+0x70>
 800ac76:	463e      	mov	r6, r7
 800ac78:	6820      	ldr	r0, [r4, #0]
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	4641      	mov	r1, r8
 800ac7e:	f000 fba3 	bl	800b3c8 <memmove>
 800ac82:	68a3      	ldr	r3, [r4, #8]
 800ac84:	1b9b      	subs	r3, r3, r6
 800ac86:	60a3      	str	r3, [r4, #8]
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	4433      	add	r3, r6
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac94:	462a      	mov	r2, r5
 800ac96:	f000 fc05 	bl	800b4a4 <_realloc_r>
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d1e0      	bne.n	800ac62 <__ssputs_r+0x5a>
 800aca0:	6921      	ldr	r1, [r4, #16]
 800aca2:	4650      	mov	r0, sl
 800aca4:	f7ff fbe8 	bl	800a478 <_free_r>
 800aca8:	230c      	movs	r3, #12
 800acaa:	f8ca 3000 	str.w	r3, [sl]
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acba:	e7e9      	b.n	800ac90 <__ssputs_r+0x88>

0800acbc <_svfiprintf_r>:
 800acbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc0:	4698      	mov	r8, r3
 800acc2:	898b      	ldrh	r3, [r1, #12]
 800acc4:	061b      	lsls	r3, r3, #24
 800acc6:	b09d      	sub	sp, #116	; 0x74
 800acc8:	4607      	mov	r7, r0
 800acca:	460d      	mov	r5, r1
 800accc:	4614      	mov	r4, r2
 800acce:	d50e      	bpl.n	800acee <_svfiprintf_r+0x32>
 800acd0:	690b      	ldr	r3, [r1, #16]
 800acd2:	b963      	cbnz	r3, 800acee <_svfiprintf_r+0x32>
 800acd4:	2140      	movs	r1, #64	; 0x40
 800acd6:	f7fd fed7 	bl	8008a88 <_malloc_r>
 800acda:	6028      	str	r0, [r5, #0]
 800acdc:	6128      	str	r0, [r5, #16]
 800acde:	b920      	cbnz	r0, 800acea <_svfiprintf_r+0x2e>
 800ace0:	230c      	movs	r3, #12
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace8:	e0d0      	b.n	800ae8c <_svfiprintf_r+0x1d0>
 800acea:	2340      	movs	r3, #64	; 0x40
 800acec:	616b      	str	r3, [r5, #20]
 800acee:	2300      	movs	r3, #0
 800acf0:	9309      	str	r3, [sp, #36]	; 0x24
 800acf2:	2320      	movs	r3, #32
 800acf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800acfc:	2330      	movs	r3, #48	; 0x30
 800acfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aea4 <_svfiprintf_r+0x1e8>
 800ad02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad06:	f04f 0901 	mov.w	r9, #1
 800ad0a:	4623      	mov	r3, r4
 800ad0c:	469a      	mov	sl, r3
 800ad0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad12:	b10a      	cbz	r2, 800ad18 <_svfiprintf_r+0x5c>
 800ad14:	2a25      	cmp	r2, #37	; 0x25
 800ad16:	d1f9      	bne.n	800ad0c <_svfiprintf_r+0x50>
 800ad18:	ebba 0b04 	subs.w	fp, sl, r4
 800ad1c:	d00b      	beq.n	800ad36 <_svfiprintf_r+0x7a>
 800ad1e:	465b      	mov	r3, fp
 800ad20:	4622      	mov	r2, r4
 800ad22:	4629      	mov	r1, r5
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff ff6f 	bl	800ac08 <__ssputs_r>
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	f000 80a9 	beq.w	800ae82 <_svfiprintf_r+0x1c6>
 800ad30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad32:	445a      	add	r2, fp
 800ad34:	9209      	str	r2, [sp, #36]	; 0x24
 800ad36:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 80a1 	beq.w	800ae82 <_svfiprintf_r+0x1c6>
 800ad40:	2300      	movs	r3, #0
 800ad42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad4a:	f10a 0a01 	add.w	sl, sl, #1
 800ad4e:	9304      	str	r3, [sp, #16]
 800ad50:	9307      	str	r3, [sp, #28]
 800ad52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad56:	931a      	str	r3, [sp, #104]	; 0x68
 800ad58:	4654      	mov	r4, sl
 800ad5a:	2205      	movs	r2, #5
 800ad5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad60:	4850      	ldr	r0, [pc, #320]	; (800aea4 <_svfiprintf_r+0x1e8>)
 800ad62:	f7f5 fa95 	bl	8000290 <memchr>
 800ad66:	9a04      	ldr	r2, [sp, #16]
 800ad68:	b9d8      	cbnz	r0, 800ada2 <_svfiprintf_r+0xe6>
 800ad6a:	06d0      	lsls	r0, r2, #27
 800ad6c:	bf44      	itt	mi
 800ad6e:	2320      	movmi	r3, #32
 800ad70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad74:	0711      	lsls	r1, r2, #28
 800ad76:	bf44      	itt	mi
 800ad78:	232b      	movmi	r3, #43	; 0x2b
 800ad7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad82:	2b2a      	cmp	r3, #42	; 0x2a
 800ad84:	d015      	beq.n	800adb2 <_svfiprintf_r+0xf6>
 800ad86:	9a07      	ldr	r2, [sp, #28]
 800ad88:	4654      	mov	r4, sl
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	f04f 0c0a 	mov.w	ip, #10
 800ad90:	4621      	mov	r1, r4
 800ad92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad96:	3b30      	subs	r3, #48	; 0x30
 800ad98:	2b09      	cmp	r3, #9
 800ad9a:	d94d      	bls.n	800ae38 <_svfiprintf_r+0x17c>
 800ad9c:	b1b0      	cbz	r0, 800adcc <_svfiprintf_r+0x110>
 800ad9e:	9207      	str	r2, [sp, #28]
 800ada0:	e014      	b.n	800adcc <_svfiprintf_r+0x110>
 800ada2:	eba0 0308 	sub.w	r3, r0, r8
 800ada6:	fa09 f303 	lsl.w	r3, r9, r3
 800adaa:	4313      	orrs	r3, r2
 800adac:	9304      	str	r3, [sp, #16]
 800adae:	46a2      	mov	sl, r4
 800adb0:	e7d2      	b.n	800ad58 <_svfiprintf_r+0x9c>
 800adb2:	9b03      	ldr	r3, [sp, #12]
 800adb4:	1d19      	adds	r1, r3, #4
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	9103      	str	r1, [sp, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	bfbb      	ittet	lt
 800adbe:	425b      	neglt	r3, r3
 800adc0:	f042 0202 	orrlt.w	r2, r2, #2
 800adc4:	9307      	strge	r3, [sp, #28]
 800adc6:	9307      	strlt	r3, [sp, #28]
 800adc8:	bfb8      	it	lt
 800adca:	9204      	strlt	r2, [sp, #16]
 800adcc:	7823      	ldrb	r3, [r4, #0]
 800adce:	2b2e      	cmp	r3, #46	; 0x2e
 800add0:	d10c      	bne.n	800adec <_svfiprintf_r+0x130>
 800add2:	7863      	ldrb	r3, [r4, #1]
 800add4:	2b2a      	cmp	r3, #42	; 0x2a
 800add6:	d134      	bne.n	800ae42 <_svfiprintf_r+0x186>
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	1d1a      	adds	r2, r3, #4
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	9203      	str	r2, [sp, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	bfb8      	it	lt
 800ade4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ade8:	3402      	adds	r4, #2
 800adea:	9305      	str	r3, [sp, #20]
 800adec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aeb4 <_svfiprintf_r+0x1f8>
 800adf0:	7821      	ldrb	r1, [r4, #0]
 800adf2:	2203      	movs	r2, #3
 800adf4:	4650      	mov	r0, sl
 800adf6:	f7f5 fa4b 	bl	8000290 <memchr>
 800adfa:	b138      	cbz	r0, 800ae0c <_svfiprintf_r+0x150>
 800adfc:	9b04      	ldr	r3, [sp, #16]
 800adfe:	eba0 000a 	sub.w	r0, r0, sl
 800ae02:	2240      	movs	r2, #64	; 0x40
 800ae04:	4082      	lsls	r2, r0
 800ae06:	4313      	orrs	r3, r2
 800ae08:	3401      	adds	r4, #1
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae10:	4825      	ldr	r0, [pc, #148]	; (800aea8 <_svfiprintf_r+0x1ec>)
 800ae12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae16:	2206      	movs	r2, #6
 800ae18:	f7f5 fa3a 	bl	8000290 <memchr>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d038      	beq.n	800ae92 <_svfiprintf_r+0x1d6>
 800ae20:	4b22      	ldr	r3, [pc, #136]	; (800aeac <_svfiprintf_r+0x1f0>)
 800ae22:	bb1b      	cbnz	r3, 800ae6c <_svfiprintf_r+0x1b0>
 800ae24:	9b03      	ldr	r3, [sp, #12]
 800ae26:	3307      	adds	r3, #7
 800ae28:	f023 0307 	bic.w	r3, r3, #7
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	9303      	str	r3, [sp, #12]
 800ae30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae32:	4433      	add	r3, r6
 800ae34:	9309      	str	r3, [sp, #36]	; 0x24
 800ae36:	e768      	b.n	800ad0a <_svfiprintf_r+0x4e>
 800ae38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	2001      	movs	r0, #1
 800ae40:	e7a6      	b.n	800ad90 <_svfiprintf_r+0xd4>
 800ae42:	2300      	movs	r3, #0
 800ae44:	3401      	adds	r4, #1
 800ae46:	9305      	str	r3, [sp, #20]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	f04f 0c0a 	mov.w	ip, #10
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae54:	3a30      	subs	r2, #48	; 0x30
 800ae56:	2a09      	cmp	r2, #9
 800ae58:	d903      	bls.n	800ae62 <_svfiprintf_r+0x1a6>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0c6      	beq.n	800adec <_svfiprintf_r+0x130>
 800ae5e:	9105      	str	r1, [sp, #20]
 800ae60:	e7c4      	b.n	800adec <_svfiprintf_r+0x130>
 800ae62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae66:	4604      	mov	r4, r0
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e7f0      	b.n	800ae4e <_svfiprintf_r+0x192>
 800ae6c:	ab03      	add	r3, sp, #12
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	462a      	mov	r2, r5
 800ae72:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <_svfiprintf_r+0x1f4>)
 800ae74:	a904      	add	r1, sp, #16
 800ae76:	4638      	mov	r0, r7
 800ae78:	f7fd ff22 	bl	8008cc0 <_printf_float>
 800ae7c:	1c42      	adds	r2, r0, #1
 800ae7e:	4606      	mov	r6, r0
 800ae80:	d1d6      	bne.n	800ae30 <_svfiprintf_r+0x174>
 800ae82:	89ab      	ldrh	r3, [r5, #12]
 800ae84:	065b      	lsls	r3, r3, #25
 800ae86:	f53f af2d 	bmi.w	800ace4 <_svfiprintf_r+0x28>
 800ae8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae8c:	b01d      	add	sp, #116	; 0x74
 800ae8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae92:	ab03      	add	r3, sp, #12
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	462a      	mov	r2, r5
 800ae98:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <_svfiprintf_r+0x1f4>)
 800ae9a:	a904      	add	r1, sp, #16
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f7fe f997 	bl	80091d0 <_printf_i>
 800aea2:	e7eb      	b.n	800ae7c <_svfiprintf_r+0x1c0>
 800aea4:	0800c81c 	.word	0x0800c81c
 800aea8:	0800c826 	.word	0x0800c826
 800aeac:	08008cc1 	.word	0x08008cc1
 800aeb0:	0800ac09 	.word	0x0800ac09
 800aeb4:	0800c822 	.word	0x0800c822

0800aeb8 <__sfputc_r>:
 800aeb8:	6893      	ldr	r3, [r2, #8]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	b410      	push	{r4}
 800aec0:	6093      	str	r3, [r2, #8]
 800aec2:	da08      	bge.n	800aed6 <__sfputc_r+0x1e>
 800aec4:	6994      	ldr	r4, [r2, #24]
 800aec6:	42a3      	cmp	r3, r4
 800aec8:	db01      	blt.n	800aece <__sfputc_r+0x16>
 800aeca:	290a      	cmp	r1, #10
 800aecc:	d103      	bne.n	800aed6 <__sfputc_r+0x1e>
 800aece:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aed2:	f000 b9e3 	b.w	800b29c <__swbuf_r>
 800aed6:	6813      	ldr	r3, [r2, #0]
 800aed8:	1c58      	adds	r0, r3, #1
 800aeda:	6010      	str	r0, [r2, #0]
 800aedc:	7019      	strb	r1, [r3, #0]
 800aede:	4608      	mov	r0, r1
 800aee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <__sfputs_r>:
 800aee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee8:	4606      	mov	r6, r0
 800aeea:	460f      	mov	r7, r1
 800aeec:	4614      	mov	r4, r2
 800aeee:	18d5      	adds	r5, r2, r3
 800aef0:	42ac      	cmp	r4, r5
 800aef2:	d101      	bne.n	800aef8 <__sfputs_r+0x12>
 800aef4:	2000      	movs	r0, #0
 800aef6:	e007      	b.n	800af08 <__sfputs_r+0x22>
 800aef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefc:	463a      	mov	r2, r7
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff ffda 	bl	800aeb8 <__sfputc_r>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d1f3      	bne.n	800aef0 <__sfputs_r+0xa>
 800af08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af0c <_vfiprintf_r>:
 800af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af10:	460d      	mov	r5, r1
 800af12:	b09d      	sub	sp, #116	; 0x74
 800af14:	4614      	mov	r4, r2
 800af16:	4698      	mov	r8, r3
 800af18:	4606      	mov	r6, r0
 800af1a:	b118      	cbz	r0, 800af24 <_vfiprintf_r+0x18>
 800af1c:	6a03      	ldr	r3, [r0, #32]
 800af1e:	b90b      	cbnz	r3, 800af24 <_vfiprintf_r+0x18>
 800af20:	f7fe faf2 	bl	8009508 <__sinit>
 800af24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af26:	07d9      	lsls	r1, r3, #31
 800af28:	d405      	bmi.n	800af36 <_vfiprintf_r+0x2a>
 800af2a:	89ab      	ldrh	r3, [r5, #12]
 800af2c:	059a      	lsls	r2, r3, #22
 800af2e:	d402      	bmi.n	800af36 <_vfiprintf_r+0x2a>
 800af30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af32:	f7fe fcab 	bl	800988c <__retarget_lock_acquire_recursive>
 800af36:	89ab      	ldrh	r3, [r5, #12]
 800af38:	071b      	lsls	r3, r3, #28
 800af3a:	d501      	bpl.n	800af40 <_vfiprintf_r+0x34>
 800af3c:	692b      	ldr	r3, [r5, #16]
 800af3e:	b99b      	cbnz	r3, 800af68 <_vfiprintf_r+0x5c>
 800af40:	4629      	mov	r1, r5
 800af42:	4630      	mov	r0, r6
 800af44:	f000 f9e8 	bl	800b318 <__swsetup_r>
 800af48:	b170      	cbz	r0, 800af68 <_vfiprintf_r+0x5c>
 800af4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af4c:	07dc      	lsls	r4, r3, #31
 800af4e:	d504      	bpl.n	800af5a <_vfiprintf_r+0x4e>
 800af50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af54:	b01d      	add	sp, #116	; 0x74
 800af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	0598      	lsls	r0, r3, #22
 800af5e:	d4f7      	bmi.n	800af50 <_vfiprintf_r+0x44>
 800af60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af62:	f7fe fc94 	bl	800988e <__retarget_lock_release_recursive>
 800af66:	e7f3      	b.n	800af50 <_vfiprintf_r+0x44>
 800af68:	2300      	movs	r3, #0
 800af6a:	9309      	str	r3, [sp, #36]	; 0x24
 800af6c:	2320      	movs	r3, #32
 800af6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af72:	f8cd 800c 	str.w	r8, [sp, #12]
 800af76:	2330      	movs	r3, #48	; 0x30
 800af78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b12c <_vfiprintf_r+0x220>
 800af7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af80:	f04f 0901 	mov.w	r9, #1
 800af84:	4623      	mov	r3, r4
 800af86:	469a      	mov	sl, r3
 800af88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af8c:	b10a      	cbz	r2, 800af92 <_vfiprintf_r+0x86>
 800af8e:	2a25      	cmp	r2, #37	; 0x25
 800af90:	d1f9      	bne.n	800af86 <_vfiprintf_r+0x7a>
 800af92:	ebba 0b04 	subs.w	fp, sl, r4
 800af96:	d00b      	beq.n	800afb0 <_vfiprintf_r+0xa4>
 800af98:	465b      	mov	r3, fp
 800af9a:	4622      	mov	r2, r4
 800af9c:	4629      	mov	r1, r5
 800af9e:	4630      	mov	r0, r6
 800afa0:	f7ff ffa1 	bl	800aee6 <__sfputs_r>
 800afa4:	3001      	adds	r0, #1
 800afa6:	f000 80a9 	beq.w	800b0fc <_vfiprintf_r+0x1f0>
 800afaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afac:	445a      	add	r2, fp
 800afae:	9209      	str	r2, [sp, #36]	; 0x24
 800afb0:	f89a 3000 	ldrb.w	r3, [sl]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 80a1 	beq.w	800b0fc <_vfiprintf_r+0x1f0>
 800afba:	2300      	movs	r3, #0
 800afbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afc4:	f10a 0a01 	add.w	sl, sl, #1
 800afc8:	9304      	str	r3, [sp, #16]
 800afca:	9307      	str	r3, [sp, #28]
 800afcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afd0:	931a      	str	r3, [sp, #104]	; 0x68
 800afd2:	4654      	mov	r4, sl
 800afd4:	2205      	movs	r2, #5
 800afd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afda:	4854      	ldr	r0, [pc, #336]	; (800b12c <_vfiprintf_r+0x220>)
 800afdc:	f7f5 f958 	bl	8000290 <memchr>
 800afe0:	9a04      	ldr	r2, [sp, #16]
 800afe2:	b9d8      	cbnz	r0, 800b01c <_vfiprintf_r+0x110>
 800afe4:	06d1      	lsls	r1, r2, #27
 800afe6:	bf44      	itt	mi
 800afe8:	2320      	movmi	r3, #32
 800afea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afee:	0713      	lsls	r3, r2, #28
 800aff0:	bf44      	itt	mi
 800aff2:	232b      	movmi	r3, #43	; 0x2b
 800aff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff8:	f89a 3000 	ldrb.w	r3, [sl]
 800affc:	2b2a      	cmp	r3, #42	; 0x2a
 800affe:	d015      	beq.n	800b02c <_vfiprintf_r+0x120>
 800b000:	9a07      	ldr	r2, [sp, #28]
 800b002:	4654      	mov	r4, sl
 800b004:	2000      	movs	r0, #0
 800b006:	f04f 0c0a 	mov.w	ip, #10
 800b00a:	4621      	mov	r1, r4
 800b00c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b010:	3b30      	subs	r3, #48	; 0x30
 800b012:	2b09      	cmp	r3, #9
 800b014:	d94d      	bls.n	800b0b2 <_vfiprintf_r+0x1a6>
 800b016:	b1b0      	cbz	r0, 800b046 <_vfiprintf_r+0x13a>
 800b018:	9207      	str	r2, [sp, #28]
 800b01a:	e014      	b.n	800b046 <_vfiprintf_r+0x13a>
 800b01c:	eba0 0308 	sub.w	r3, r0, r8
 800b020:	fa09 f303 	lsl.w	r3, r9, r3
 800b024:	4313      	orrs	r3, r2
 800b026:	9304      	str	r3, [sp, #16]
 800b028:	46a2      	mov	sl, r4
 800b02a:	e7d2      	b.n	800afd2 <_vfiprintf_r+0xc6>
 800b02c:	9b03      	ldr	r3, [sp, #12]
 800b02e:	1d19      	adds	r1, r3, #4
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	9103      	str	r1, [sp, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	bfbb      	ittet	lt
 800b038:	425b      	neglt	r3, r3
 800b03a:	f042 0202 	orrlt.w	r2, r2, #2
 800b03e:	9307      	strge	r3, [sp, #28]
 800b040:	9307      	strlt	r3, [sp, #28]
 800b042:	bfb8      	it	lt
 800b044:	9204      	strlt	r2, [sp, #16]
 800b046:	7823      	ldrb	r3, [r4, #0]
 800b048:	2b2e      	cmp	r3, #46	; 0x2e
 800b04a:	d10c      	bne.n	800b066 <_vfiprintf_r+0x15a>
 800b04c:	7863      	ldrb	r3, [r4, #1]
 800b04e:	2b2a      	cmp	r3, #42	; 0x2a
 800b050:	d134      	bne.n	800b0bc <_vfiprintf_r+0x1b0>
 800b052:	9b03      	ldr	r3, [sp, #12]
 800b054:	1d1a      	adds	r2, r3, #4
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	9203      	str	r2, [sp, #12]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	bfb8      	it	lt
 800b05e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b062:	3402      	adds	r4, #2
 800b064:	9305      	str	r3, [sp, #20]
 800b066:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b13c <_vfiprintf_r+0x230>
 800b06a:	7821      	ldrb	r1, [r4, #0]
 800b06c:	2203      	movs	r2, #3
 800b06e:	4650      	mov	r0, sl
 800b070:	f7f5 f90e 	bl	8000290 <memchr>
 800b074:	b138      	cbz	r0, 800b086 <_vfiprintf_r+0x17a>
 800b076:	9b04      	ldr	r3, [sp, #16]
 800b078:	eba0 000a 	sub.w	r0, r0, sl
 800b07c:	2240      	movs	r2, #64	; 0x40
 800b07e:	4082      	lsls	r2, r0
 800b080:	4313      	orrs	r3, r2
 800b082:	3401      	adds	r4, #1
 800b084:	9304      	str	r3, [sp, #16]
 800b086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b08a:	4829      	ldr	r0, [pc, #164]	; (800b130 <_vfiprintf_r+0x224>)
 800b08c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b090:	2206      	movs	r2, #6
 800b092:	f7f5 f8fd 	bl	8000290 <memchr>
 800b096:	2800      	cmp	r0, #0
 800b098:	d03f      	beq.n	800b11a <_vfiprintf_r+0x20e>
 800b09a:	4b26      	ldr	r3, [pc, #152]	; (800b134 <_vfiprintf_r+0x228>)
 800b09c:	bb1b      	cbnz	r3, 800b0e6 <_vfiprintf_r+0x1da>
 800b09e:	9b03      	ldr	r3, [sp, #12]
 800b0a0:	3307      	adds	r3, #7
 800b0a2:	f023 0307 	bic.w	r3, r3, #7
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	9303      	str	r3, [sp, #12]
 800b0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ac:	443b      	add	r3, r7
 800b0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b0:	e768      	b.n	800af84 <_vfiprintf_r+0x78>
 800b0b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	e7a6      	b.n	800b00a <_vfiprintf_r+0xfe>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	3401      	adds	r4, #1
 800b0c0:	9305      	str	r3, [sp, #20]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	f04f 0c0a 	mov.w	ip, #10
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ce:	3a30      	subs	r2, #48	; 0x30
 800b0d0:	2a09      	cmp	r2, #9
 800b0d2:	d903      	bls.n	800b0dc <_vfiprintf_r+0x1d0>
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0c6      	beq.n	800b066 <_vfiprintf_r+0x15a>
 800b0d8:	9105      	str	r1, [sp, #20]
 800b0da:	e7c4      	b.n	800b066 <_vfiprintf_r+0x15a>
 800b0dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e7f0      	b.n	800b0c8 <_vfiprintf_r+0x1bc>
 800b0e6:	ab03      	add	r3, sp, #12
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	4b12      	ldr	r3, [pc, #72]	; (800b138 <_vfiprintf_r+0x22c>)
 800b0ee:	a904      	add	r1, sp, #16
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f7fd fde5 	bl	8008cc0 <_printf_float>
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	1c78      	adds	r0, r7, #1
 800b0fa:	d1d6      	bne.n	800b0aa <_vfiprintf_r+0x19e>
 800b0fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0fe:	07d9      	lsls	r1, r3, #31
 800b100:	d405      	bmi.n	800b10e <_vfiprintf_r+0x202>
 800b102:	89ab      	ldrh	r3, [r5, #12]
 800b104:	059a      	lsls	r2, r3, #22
 800b106:	d402      	bmi.n	800b10e <_vfiprintf_r+0x202>
 800b108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b10a:	f7fe fbc0 	bl	800988e <__retarget_lock_release_recursive>
 800b10e:	89ab      	ldrh	r3, [r5, #12]
 800b110:	065b      	lsls	r3, r3, #25
 800b112:	f53f af1d 	bmi.w	800af50 <_vfiprintf_r+0x44>
 800b116:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b118:	e71c      	b.n	800af54 <_vfiprintf_r+0x48>
 800b11a:	ab03      	add	r3, sp, #12
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	462a      	mov	r2, r5
 800b120:	4b05      	ldr	r3, [pc, #20]	; (800b138 <_vfiprintf_r+0x22c>)
 800b122:	a904      	add	r1, sp, #16
 800b124:	4630      	mov	r0, r6
 800b126:	f7fe f853 	bl	80091d0 <_printf_i>
 800b12a:	e7e4      	b.n	800b0f6 <_vfiprintf_r+0x1ea>
 800b12c:	0800c81c 	.word	0x0800c81c
 800b130:	0800c826 	.word	0x0800c826
 800b134:	08008cc1 	.word	0x08008cc1
 800b138:	0800aee7 	.word	0x0800aee7
 800b13c:	0800c822 	.word	0x0800c822

0800b140 <__sflush_r>:
 800b140:	898a      	ldrh	r2, [r1, #12]
 800b142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b146:	4605      	mov	r5, r0
 800b148:	0710      	lsls	r0, r2, #28
 800b14a:	460c      	mov	r4, r1
 800b14c:	d458      	bmi.n	800b200 <__sflush_r+0xc0>
 800b14e:	684b      	ldr	r3, [r1, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	dc05      	bgt.n	800b160 <__sflush_r+0x20>
 800b154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b156:	2b00      	cmp	r3, #0
 800b158:	dc02      	bgt.n	800b160 <__sflush_r+0x20>
 800b15a:	2000      	movs	r0, #0
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b162:	2e00      	cmp	r6, #0
 800b164:	d0f9      	beq.n	800b15a <__sflush_r+0x1a>
 800b166:	2300      	movs	r3, #0
 800b168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b16c:	682f      	ldr	r7, [r5, #0]
 800b16e:	6a21      	ldr	r1, [r4, #32]
 800b170:	602b      	str	r3, [r5, #0]
 800b172:	d032      	beq.n	800b1da <__sflush_r+0x9a>
 800b174:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	075a      	lsls	r2, r3, #29
 800b17a:	d505      	bpl.n	800b188 <__sflush_r+0x48>
 800b17c:	6863      	ldr	r3, [r4, #4]
 800b17e:	1ac0      	subs	r0, r0, r3
 800b180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b182:	b10b      	cbz	r3, 800b188 <__sflush_r+0x48>
 800b184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b186:	1ac0      	subs	r0, r0, r3
 800b188:	2300      	movs	r3, #0
 800b18a:	4602      	mov	r2, r0
 800b18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b18e:	6a21      	ldr	r1, [r4, #32]
 800b190:	4628      	mov	r0, r5
 800b192:	47b0      	blx	r6
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	d106      	bne.n	800b1a8 <__sflush_r+0x68>
 800b19a:	6829      	ldr	r1, [r5, #0]
 800b19c:	291d      	cmp	r1, #29
 800b19e:	d82b      	bhi.n	800b1f8 <__sflush_r+0xb8>
 800b1a0:	4a29      	ldr	r2, [pc, #164]	; (800b248 <__sflush_r+0x108>)
 800b1a2:	410a      	asrs	r2, r1
 800b1a4:	07d6      	lsls	r6, r2, #31
 800b1a6:	d427      	bmi.n	800b1f8 <__sflush_r+0xb8>
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	6062      	str	r2, [r4, #4]
 800b1ac:	04d9      	lsls	r1, r3, #19
 800b1ae:	6922      	ldr	r2, [r4, #16]
 800b1b0:	6022      	str	r2, [r4, #0]
 800b1b2:	d504      	bpl.n	800b1be <__sflush_r+0x7e>
 800b1b4:	1c42      	adds	r2, r0, #1
 800b1b6:	d101      	bne.n	800b1bc <__sflush_r+0x7c>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b903      	cbnz	r3, 800b1be <__sflush_r+0x7e>
 800b1bc:	6560      	str	r0, [r4, #84]	; 0x54
 800b1be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1c0:	602f      	str	r7, [r5, #0]
 800b1c2:	2900      	cmp	r1, #0
 800b1c4:	d0c9      	beq.n	800b15a <__sflush_r+0x1a>
 800b1c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1ca:	4299      	cmp	r1, r3
 800b1cc:	d002      	beq.n	800b1d4 <__sflush_r+0x94>
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f7ff f952 	bl	800a478 <_free_r>
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	6360      	str	r0, [r4, #52]	; 0x34
 800b1d8:	e7c0      	b.n	800b15c <__sflush_r+0x1c>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4628      	mov	r0, r5
 800b1de:	47b0      	blx	r6
 800b1e0:	1c41      	adds	r1, r0, #1
 800b1e2:	d1c8      	bne.n	800b176 <__sflush_r+0x36>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d0c5      	beq.n	800b176 <__sflush_r+0x36>
 800b1ea:	2b1d      	cmp	r3, #29
 800b1ec:	d001      	beq.n	800b1f2 <__sflush_r+0xb2>
 800b1ee:	2b16      	cmp	r3, #22
 800b1f0:	d101      	bne.n	800b1f6 <__sflush_r+0xb6>
 800b1f2:	602f      	str	r7, [r5, #0]
 800b1f4:	e7b1      	b.n	800b15a <__sflush_r+0x1a>
 800b1f6:	89a3      	ldrh	r3, [r4, #12]
 800b1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1fc:	81a3      	strh	r3, [r4, #12]
 800b1fe:	e7ad      	b.n	800b15c <__sflush_r+0x1c>
 800b200:	690f      	ldr	r7, [r1, #16]
 800b202:	2f00      	cmp	r7, #0
 800b204:	d0a9      	beq.n	800b15a <__sflush_r+0x1a>
 800b206:	0793      	lsls	r3, r2, #30
 800b208:	680e      	ldr	r6, [r1, #0]
 800b20a:	bf08      	it	eq
 800b20c:	694b      	ldreq	r3, [r1, #20]
 800b20e:	600f      	str	r7, [r1, #0]
 800b210:	bf18      	it	ne
 800b212:	2300      	movne	r3, #0
 800b214:	eba6 0807 	sub.w	r8, r6, r7
 800b218:	608b      	str	r3, [r1, #8]
 800b21a:	f1b8 0f00 	cmp.w	r8, #0
 800b21e:	dd9c      	ble.n	800b15a <__sflush_r+0x1a>
 800b220:	6a21      	ldr	r1, [r4, #32]
 800b222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b224:	4643      	mov	r3, r8
 800b226:	463a      	mov	r2, r7
 800b228:	4628      	mov	r0, r5
 800b22a:	47b0      	blx	r6
 800b22c:	2800      	cmp	r0, #0
 800b22e:	dc06      	bgt.n	800b23e <__sflush_r+0xfe>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b236:	81a3      	strh	r3, [r4, #12]
 800b238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b23c:	e78e      	b.n	800b15c <__sflush_r+0x1c>
 800b23e:	4407      	add	r7, r0
 800b240:	eba8 0800 	sub.w	r8, r8, r0
 800b244:	e7e9      	b.n	800b21a <__sflush_r+0xda>
 800b246:	bf00      	nop
 800b248:	dfbffffe 	.word	0xdfbffffe

0800b24c <_fflush_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	690b      	ldr	r3, [r1, #16]
 800b250:	4605      	mov	r5, r0
 800b252:	460c      	mov	r4, r1
 800b254:	b913      	cbnz	r3, 800b25c <_fflush_r+0x10>
 800b256:	2500      	movs	r5, #0
 800b258:	4628      	mov	r0, r5
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	b118      	cbz	r0, 800b266 <_fflush_r+0x1a>
 800b25e:	6a03      	ldr	r3, [r0, #32]
 800b260:	b90b      	cbnz	r3, 800b266 <_fflush_r+0x1a>
 800b262:	f7fe f951 	bl	8009508 <__sinit>
 800b266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0f3      	beq.n	800b256 <_fflush_r+0xa>
 800b26e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b270:	07d0      	lsls	r0, r2, #31
 800b272:	d404      	bmi.n	800b27e <_fflush_r+0x32>
 800b274:	0599      	lsls	r1, r3, #22
 800b276:	d402      	bmi.n	800b27e <_fflush_r+0x32>
 800b278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b27a:	f7fe fb07 	bl	800988c <__retarget_lock_acquire_recursive>
 800b27e:	4628      	mov	r0, r5
 800b280:	4621      	mov	r1, r4
 800b282:	f7ff ff5d 	bl	800b140 <__sflush_r>
 800b286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b288:	07da      	lsls	r2, r3, #31
 800b28a:	4605      	mov	r5, r0
 800b28c:	d4e4      	bmi.n	800b258 <_fflush_r+0xc>
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	059b      	lsls	r3, r3, #22
 800b292:	d4e1      	bmi.n	800b258 <_fflush_r+0xc>
 800b294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b296:	f7fe fafa 	bl	800988e <__retarget_lock_release_recursive>
 800b29a:	e7dd      	b.n	800b258 <_fflush_r+0xc>

0800b29c <__swbuf_r>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	460e      	mov	r6, r1
 800b2a0:	4614      	mov	r4, r2
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	b118      	cbz	r0, 800b2ae <__swbuf_r+0x12>
 800b2a6:	6a03      	ldr	r3, [r0, #32]
 800b2a8:	b90b      	cbnz	r3, 800b2ae <__swbuf_r+0x12>
 800b2aa:	f7fe f92d 	bl	8009508 <__sinit>
 800b2ae:	69a3      	ldr	r3, [r4, #24]
 800b2b0:	60a3      	str	r3, [r4, #8]
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	071a      	lsls	r2, r3, #28
 800b2b6:	d525      	bpl.n	800b304 <__swbuf_r+0x68>
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	b31b      	cbz	r3, 800b304 <__swbuf_r+0x68>
 800b2bc:	6823      	ldr	r3, [r4, #0]
 800b2be:	6922      	ldr	r2, [r4, #16]
 800b2c0:	1a98      	subs	r0, r3, r2
 800b2c2:	6963      	ldr	r3, [r4, #20]
 800b2c4:	b2f6      	uxtb	r6, r6
 800b2c6:	4283      	cmp	r3, r0
 800b2c8:	4637      	mov	r7, r6
 800b2ca:	dc04      	bgt.n	800b2d6 <__swbuf_r+0x3a>
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f7ff ffbc 	bl	800b24c <_fflush_r>
 800b2d4:	b9e0      	cbnz	r0, 800b310 <__swbuf_r+0x74>
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	60a3      	str	r3, [r4, #8]
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	6022      	str	r2, [r4, #0]
 800b2e2:	701e      	strb	r6, [r3, #0]
 800b2e4:	6962      	ldr	r2, [r4, #20]
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d004      	beq.n	800b2f6 <__swbuf_r+0x5a>
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	07db      	lsls	r3, r3, #31
 800b2f0:	d506      	bpl.n	800b300 <__swbuf_r+0x64>
 800b2f2:	2e0a      	cmp	r6, #10
 800b2f4:	d104      	bne.n	800b300 <__swbuf_r+0x64>
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	f7ff ffa7 	bl	800b24c <_fflush_r>
 800b2fe:	b938      	cbnz	r0, 800b310 <__swbuf_r+0x74>
 800b300:	4638      	mov	r0, r7
 800b302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b304:	4621      	mov	r1, r4
 800b306:	4628      	mov	r0, r5
 800b308:	f000 f806 	bl	800b318 <__swsetup_r>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d0d5      	beq.n	800b2bc <__swbuf_r+0x20>
 800b310:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b314:	e7f4      	b.n	800b300 <__swbuf_r+0x64>
	...

0800b318 <__swsetup_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4b2a      	ldr	r3, [pc, #168]	; (800b3c4 <__swsetup_r+0xac>)
 800b31c:	4605      	mov	r5, r0
 800b31e:	6818      	ldr	r0, [r3, #0]
 800b320:	460c      	mov	r4, r1
 800b322:	b118      	cbz	r0, 800b32c <__swsetup_r+0x14>
 800b324:	6a03      	ldr	r3, [r0, #32]
 800b326:	b90b      	cbnz	r3, 800b32c <__swsetup_r+0x14>
 800b328:	f7fe f8ee 	bl	8009508 <__sinit>
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b332:	0718      	lsls	r0, r3, #28
 800b334:	d422      	bmi.n	800b37c <__swsetup_r+0x64>
 800b336:	06d9      	lsls	r1, r3, #27
 800b338:	d407      	bmi.n	800b34a <__swsetup_r+0x32>
 800b33a:	2309      	movs	r3, #9
 800b33c:	602b      	str	r3, [r5, #0]
 800b33e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b342:	81a3      	strh	r3, [r4, #12]
 800b344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b348:	e034      	b.n	800b3b4 <__swsetup_r+0x9c>
 800b34a:	0758      	lsls	r0, r3, #29
 800b34c:	d512      	bpl.n	800b374 <__swsetup_r+0x5c>
 800b34e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b350:	b141      	cbz	r1, 800b364 <__swsetup_r+0x4c>
 800b352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b356:	4299      	cmp	r1, r3
 800b358:	d002      	beq.n	800b360 <__swsetup_r+0x48>
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7ff f88c 	bl	800a478 <_free_r>
 800b360:	2300      	movs	r3, #0
 800b362:	6363      	str	r3, [r4, #52]	; 0x34
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	2300      	movs	r3, #0
 800b36e:	6063      	str	r3, [r4, #4]
 800b370:	6923      	ldr	r3, [r4, #16]
 800b372:	6023      	str	r3, [r4, #0]
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	f043 0308 	orr.w	r3, r3, #8
 800b37a:	81a3      	strh	r3, [r4, #12]
 800b37c:	6923      	ldr	r3, [r4, #16]
 800b37e:	b94b      	cbnz	r3, 800b394 <__swsetup_r+0x7c>
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b38a:	d003      	beq.n	800b394 <__swsetup_r+0x7c>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 f8fc 	bl	800b58c <__smakebuf_r>
 800b394:	89a0      	ldrh	r0, [r4, #12]
 800b396:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b39a:	f010 0301 	ands.w	r3, r0, #1
 800b39e:	d00a      	beq.n	800b3b6 <__swsetup_r+0x9e>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60a3      	str	r3, [r4, #8]
 800b3a4:	6963      	ldr	r3, [r4, #20]
 800b3a6:	425b      	negs	r3, r3
 800b3a8:	61a3      	str	r3, [r4, #24]
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	b943      	cbnz	r3, 800b3c0 <__swsetup_r+0xa8>
 800b3ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3b2:	d1c4      	bne.n	800b33e <__swsetup_r+0x26>
 800b3b4:	bd38      	pop	{r3, r4, r5, pc}
 800b3b6:	0781      	lsls	r1, r0, #30
 800b3b8:	bf58      	it	pl
 800b3ba:	6963      	ldrpl	r3, [r4, #20]
 800b3bc:	60a3      	str	r3, [r4, #8]
 800b3be:	e7f4      	b.n	800b3aa <__swsetup_r+0x92>
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	e7f7      	b.n	800b3b4 <__swsetup_r+0x9c>
 800b3c4:	2000017c 	.word	0x2000017c

0800b3c8 <memmove>:
 800b3c8:	4288      	cmp	r0, r1
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	eb01 0402 	add.w	r4, r1, r2
 800b3d0:	d902      	bls.n	800b3d8 <memmove+0x10>
 800b3d2:	4284      	cmp	r4, r0
 800b3d4:	4623      	mov	r3, r4
 800b3d6:	d807      	bhi.n	800b3e8 <memmove+0x20>
 800b3d8:	1e43      	subs	r3, r0, #1
 800b3da:	42a1      	cmp	r1, r4
 800b3dc:	d008      	beq.n	800b3f0 <memmove+0x28>
 800b3de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3e6:	e7f8      	b.n	800b3da <memmove+0x12>
 800b3e8:	4402      	add	r2, r0
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	428a      	cmp	r2, r1
 800b3ee:	d100      	bne.n	800b3f2 <memmove+0x2a>
 800b3f0:	bd10      	pop	{r4, pc}
 800b3f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3fa:	e7f7      	b.n	800b3ec <memmove+0x24>

0800b3fc <memcpy>:
 800b3fc:	440a      	add	r2, r1
 800b3fe:	4291      	cmp	r1, r2
 800b400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b404:	d100      	bne.n	800b408 <memcpy+0xc>
 800b406:	4770      	bx	lr
 800b408:	b510      	push	{r4, lr}
 800b40a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b40e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b412:	4291      	cmp	r1, r2
 800b414:	d1f9      	bne.n	800b40a <memcpy+0xe>
 800b416:	bd10      	pop	{r4, pc}

0800b418 <__assert_func>:
 800b418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b41a:	4614      	mov	r4, r2
 800b41c:	461a      	mov	r2, r3
 800b41e:	4b09      	ldr	r3, [pc, #36]	; (800b444 <__assert_func+0x2c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4605      	mov	r5, r0
 800b424:	68d8      	ldr	r0, [r3, #12]
 800b426:	b14c      	cbz	r4, 800b43c <__assert_func+0x24>
 800b428:	4b07      	ldr	r3, [pc, #28]	; (800b448 <__assert_func+0x30>)
 800b42a:	9100      	str	r1, [sp, #0]
 800b42c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b430:	4906      	ldr	r1, [pc, #24]	; (800b44c <__assert_func+0x34>)
 800b432:	462b      	mov	r3, r5
 800b434:	f000 f872 	bl	800b51c <fiprintf>
 800b438:	f7fd faf6 	bl	8008a28 <abort>
 800b43c:	4b04      	ldr	r3, [pc, #16]	; (800b450 <__assert_func+0x38>)
 800b43e:	461c      	mov	r4, r3
 800b440:	e7f3      	b.n	800b42a <__assert_func+0x12>
 800b442:	bf00      	nop
 800b444:	2000017c 	.word	0x2000017c
 800b448:	0800c837 	.word	0x0800c837
 800b44c:	0800c844 	.word	0x0800c844
 800b450:	0800c872 	.word	0x0800c872

0800b454 <_calloc_r>:
 800b454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b456:	fba1 2402 	umull	r2, r4, r1, r2
 800b45a:	b94c      	cbnz	r4, 800b470 <_calloc_r+0x1c>
 800b45c:	4611      	mov	r1, r2
 800b45e:	9201      	str	r2, [sp, #4]
 800b460:	f7fd fb12 	bl	8008a88 <_malloc_r>
 800b464:	9a01      	ldr	r2, [sp, #4]
 800b466:	4605      	mov	r5, r0
 800b468:	b930      	cbnz	r0, 800b478 <_calloc_r+0x24>
 800b46a:	4628      	mov	r0, r5
 800b46c:	b003      	add	sp, #12
 800b46e:	bd30      	pop	{r4, r5, pc}
 800b470:	220c      	movs	r2, #12
 800b472:	6002      	str	r2, [r0, #0]
 800b474:	2500      	movs	r5, #0
 800b476:	e7f8      	b.n	800b46a <_calloc_r+0x16>
 800b478:	4621      	mov	r1, r4
 800b47a:	f7fe f93d 	bl	80096f8 <memset>
 800b47e:	e7f4      	b.n	800b46a <_calloc_r+0x16>

0800b480 <__ascii_mbtowc>:
 800b480:	b082      	sub	sp, #8
 800b482:	b901      	cbnz	r1, 800b486 <__ascii_mbtowc+0x6>
 800b484:	a901      	add	r1, sp, #4
 800b486:	b142      	cbz	r2, 800b49a <__ascii_mbtowc+0x1a>
 800b488:	b14b      	cbz	r3, 800b49e <__ascii_mbtowc+0x1e>
 800b48a:	7813      	ldrb	r3, [r2, #0]
 800b48c:	600b      	str	r3, [r1, #0]
 800b48e:	7812      	ldrb	r2, [r2, #0]
 800b490:	1e10      	subs	r0, r2, #0
 800b492:	bf18      	it	ne
 800b494:	2001      	movne	r0, #1
 800b496:	b002      	add	sp, #8
 800b498:	4770      	bx	lr
 800b49a:	4610      	mov	r0, r2
 800b49c:	e7fb      	b.n	800b496 <__ascii_mbtowc+0x16>
 800b49e:	f06f 0001 	mvn.w	r0, #1
 800b4a2:	e7f8      	b.n	800b496 <__ascii_mbtowc+0x16>

0800b4a4 <_realloc_r>:
 800b4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a8:	4680      	mov	r8, r0
 800b4aa:	4614      	mov	r4, r2
 800b4ac:	460e      	mov	r6, r1
 800b4ae:	b921      	cbnz	r1, 800b4ba <_realloc_r+0x16>
 800b4b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	f7fd bae7 	b.w	8008a88 <_malloc_r>
 800b4ba:	b92a      	cbnz	r2, 800b4c8 <_realloc_r+0x24>
 800b4bc:	f7fe ffdc 	bl	800a478 <_free_r>
 800b4c0:	4625      	mov	r5, r4
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c8:	f000 f8be 	bl	800b648 <_malloc_usable_size_r>
 800b4cc:	4284      	cmp	r4, r0
 800b4ce:	4607      	mov	r7, r0
 800b4d0:	d802      	bhi.n	800b4d8 <_realloc_r+0x34>
 800b4d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4d6:	d812      	bhi.n	800b4fe <_realloc_r+0x5a>
 800b4d8:	4621      	mov	r1, r4
 800b4da:	4640      	mov	r0, r8
 800b4dc:	f7fd fad4 	bl	8008a88 <_malloc_r>
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d0ed      	beq.n	800b4c2 <_realloc_r+0x1e>
 800b4e6:	42bc      	cmp	r4, r7
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	bf28      	it	cs
 800b4ee:	463a      	movcs	r2, r7
 800b4f0:	f7ff ff84 	bl	800b3fc <memcpy>
 800b4f4:	4631      	mov	r1, r6
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	f7fe ffbe 	bl	800a478 <_free_r>
 800b4fc:	e7e1      	b.n	800b4c2 <_realloc_r+0x1e>
 800b4fe:	4635      	mov	r5, r6
 800b500:	e7df      	b.n	800b4c2 <_realloc_r+0x1e>

0800b502 <__ascii_wctomb>:
 800b502:	b149      	cbz	r1, 800b518 <__ascii_wctomb+0x16>
 800b504:	2aff      	cmp	r2, #255	; 0xff
 800b506:	bf85      	ittet	hi
 800b508:	238a      	movhi	r3, #138	; 0x8a
 800b50a:	6003      	strhi	r3, [r0, #0]
 800b50c:	700a      	strbls	r2, [r1, #0]
 800b50e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b512:	bf98      	it	ls
 800b514:	2001      	movls	r0, #1
 800b516:	4770      	bx	lr
 800b518:	4608      	mov	r0, r1
 800b51a:	4770      	bx	lr

0800b51c <fiprintf>:
 800b51c:	b40e      	push	{r1, r2, r3}
 800b51e:	b503      	push	{r0, r1, lr}
 800b520:	4601      	mov	r1, r0
 800b522:	ab03      	add	r3, sp, #12
 800b524:	4805      	ldr	r0, [pc, #20]	; (800b53c <fiprintf+0x20>)
 800b526:	f853 2b04 	ldr.w	r2, [r3], #4
 800b52a:	6800      	ldr	r0, [r0, #0]
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	f7ff fced 	bl	800af0c <_vfiprintf_r>
 800b532:	b002      	add	sp, #8
 800b534:	f85d eb04 	ldr.w	lr, [sp], #4
 800b538:	b003      	add	sp, #12
 800b53a:	4770      	bx	lr
 800b53c:	2000017c 	.word	0x2000017c

0800b540 <__swhatbuf_r>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	460c      	mov	r4, r1
 800b544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b548:	2900      	cmp	r1, #0
 800b54a:	b096      	sub	sp, #88	; 0x58
 800b54c:	4615      	mov	r5, r2
 800b54e:	461e      	mov	r6, r3
 800b550:	da0d      	bge.n	800b56e <__swhatbuf_r+0x2e>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b558:	f04f 0100 	mov.w	r1, #0
 800b55c:	bf0c      	ite	eq
 800b55e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b562:	2340      	movne	r3, #64	; 0x40
 800b564:	2000      	movs	r0, #0
 800b566:	6031      	str	r1, [r6, #0]
 800b568:	602b      	str	r3, [r5, #0]
 800b56a:	b016      	add	sp, #88	; 0x58
 800b56c:	bd70      	pop	{r4, r5, r6, pc}
 800b56e:	466a      	mov	r2, sp
 800b570:	f000 f848 	bl	800b604 <_fstat_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	dbec      	blt.n	800b552 <__swhatbuf_r+0x12>
 800b578:	9901      	ldr	r1, [sp, #4]
 800b57a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b57e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b582:	4259      	negs	r1, r3
 800b584:	4159      	adcs	r1, r3
 800b586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b58a:	e7eb      	b.n	800b564 <__swhatbuf_r+0x24>

0800b58c <__smakebuf_r>:
 800b58c:	898b      	ldrh	r3, [r1, #12]
 800b58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b590:	079d      	lsls	r5, r3, #30
 800b592:	4606      	mov	r6, r0
 800b594:	460c      	mov	r4, r1
 800b596:	d507      	bpl.n	800b5a8 <__smakebuf_r+0x1c>
 800b598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	6163      	str	r3, [r4, #20]
 800b5a4:	b002      	add	sp, #8
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}
 800b5a8:	ab01      	add	r3, sp, #4
 800b5aa:	466a      	mov	r2, sp
 800b5ac:	f7ff ffc8 	bl	800b540 <__swhatbuf_r>
 800b5b0:	9900      	ldr	r1, [sp, #0]
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7fd fa67 	bl	8008a88 <_malloc_r>
 800b5ba:	b948      	cbnz	r0, 800b5d0 <__smakebuf_r+0x44>
 800b5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c0:	059a      	lsls	r2, r3, #22
 800b5c2:	d4ef      	bmi.n	800b5a4 <__smakebuf_r+0x18>
 800b5c4:	f023 0303 	bic.w	r3, r3, #3
 800b5c8:	f043 0302 	orr.w	r3, r3, #2
 800b5cc:	81a3      	strh	r3, [r4, #12]
 800b5ce:	e7e3      	b.n	800b598 <__smakebuf_r+0xc>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	6020      	str	r0, [r4, #0]
 800b5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	9b00      	ldr	r3, [sp, #0]
 800b5dc:	6163      	str	r3, [r4, #20]
 800b5de:	9b01      	ldr	r3, [sp, #4]
 800b5e0:	6120      	str	r0, [r4, #16]
 800b5e2:	b15b      	cbz	r3, 800b5fc <__smakebuf_r+0x70>
 800b5e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f000 f81d 	bl	800b628 <_isatty_r>
 800b5ee:	b128      	cbz	r0, 800b5fc <__smakebuf_r+0x70>
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	f023 0303 	bic.w	r3, r3, #3
 800b5f6:	f043 0301 	orr.w	r3, r3, #1
 800b5fa:	81a3      	strh	r3, [r4, #12]
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	431d      	orrs	r5, r3
 800b600:	81a5      	strh	r5, [r4, #12]
 800b602:	e7cf      	b.n	800b5a4 <__smakebuf_r+0x18>

0800b604 <_fstat_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	4d07      	ldr	r5, [pc, #28]	; (800b624 <_fstat_r+0x20>)
 800b608:	2300      	movs	r3, #0
 800b60a:	4604      	mov	r4, r0
 800b60c:	4608      	mov	r0, r1
 800b60e:	4611      	mov	r1, r2
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	f000 f829 	bl	800b668 <_fstat>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d102      	bne.n	800b620 <_fstat_r+0x1c>
 800b61a:	682b      	ldr	r3, [r5, #0]
 800b61c:	b103      	cbz	r3, 800b620 <_fstat_r+0x1c>
 800b61e:	6023      	str	r3, [r4, #0]
 800b620:	bd38      	pop	{r3, r4, r5, pc}
 800b622:	bf00      	nop
 800b624:	200013a0 	.word	0x200013a0

0800b628 <_isatty_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4d06      	ldr	r5, [pc, #24]	; (800b644 <_isatty_r+0x1c>)
 800b62c:	2300      	movs	r3, #0
 800b62e:	4604      	mov	r4, r0
 800b630:	4608      	mov	r0, r1
 800b632:	602b      	str	r3, [r5, #0]
 800b634:	f000 f828 	bl	800b688 <_isatty>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d102      	bne.n	800b642 <_isatty_r+0x1a>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	b103      	cbz	r3, 800b642 <_isatty_r+0x1a>
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	200013a0 	.word	0x200013a0

0800b648 <_malloc_usable_size_r>:
 800b648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b64c:	1f18      	subs	r0, r3, #4
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfbc      	itt	lt
 800b652:	580b      	ldrlt	r3, [r1, r0]
 800b654:	18c0      	addlt	r0, r0, r3
 800b656:	4770      	bx	lr

0800b658 <_close>:
 800b658:	4b02      	ldr	r3, [pc, #8]	; (800b664 <_close+0xc>)
 800b65a:	2258      	movs	r2, #88	; 0x58
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b662:	4770      	bx	lr
 800b664:	200013a0 	.word	0x200013a0

0800b668 <_fstat>:
 800b668:	4b02      	ldr	r3, [pc, #8]	; (800b674 <_fstat+0xc>)
 800b66a:	2258      	movs	r2, #88	; 0x58
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b672:	4770      	bx	lr
 800b674:	200013a0 	.word	0x200013a0

0800b678 <_getpid>:
 800b678:	4b02      	ldr	r3, [pc, #8]	; (800b684 <_getpid+0xc>)
 800b67a:	2258      	movs	r2, #88	; 0x58
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b682:	4770      	bx	lr
 800b684:	200013a0 	.word	0x200013a0

0800b688 <_isatty>:
 800b688:	4b02      	ldr	r3, [pc, #8]	; (800b694 <_isatty+0xc>)
 800b68a:	2258      	movs	r2, #88	; 0x58
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	2000      	movs	r0, #0
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	200013a0 	.word	0x200013a0

0800b698 <_kill>:
 800b698:	4b02      	ldr	r3, [pc, #8]	; (800b6a4 <_kill+0xc>)
 800b69a:	2258      	movs	r2, #88	; 0x58
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6a2:	4770      	bx	lr
 800b6a4:	200013a0 	.word	0x200013a0

0800b6a8 <_lseek>:
 800b6a8:	4b02      	ldr	r3, [pc, #8]	; (800b6b4 <_lseek+0xc>)
 800b6aa:	2258      	movs	r2, #88	; 0x58
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6b2:	4770      	bx	lr
 800b6b4:	200013a0 	.word	0x200013a0

0800b6b8 <_read>:
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <_read+0xc>)
 800b6ba:	2258      	movs	r2, #88	; 0x58
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6c2:	4770      	bx	lr
 800b6c4:	200013a0 	.word	0x200013a0

0800b6c8 <_sbrk>:
 800b6c8:	4a04      	ldr	r2, [pc, #16]	; (800b6dc <_sbrk+0x14>)
 800b6ca:	6811      	ldr	r1, [r2, #0]
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	b909      	cbnz	r1, 800b6d4 <_sbrk+0xc>
 800b6d0:	4903      	ldr	r1, [pc, #12]	; (800b6e0 <_sbrk+0x18>)
 800b6d2:	6011      	str	r1, [r2, #0]
 800b6d4:	6810      	ldr	r0, [r2, #0]
 800b6d6:	4403      	add	r3, r0
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	4770      	bx	lr
 800b6dc:	200013a8 	.word	0x200013a8
 800b6e0:	200013b0 	.word	0x200013b0

0800b6e4 <_write>:
 800b6e4:	4b02      	ldr	r3, [pc, #8]	; (800b6f0 <_write+0xc>)
 800b6e6:	2258      	movs	r2, #88	; 0x58
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6ee:	4770      	bx	lr
 800b6f0:	200013a0 	.word	0x200013a0

0800b6f4 <_exit>:
 800b6f4:	e7fe      	b.n	800b6f4 <_exit>
	...

0800b6f8 <_init>:
 800b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fa:	bf00      	nop
 800b6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6fe:	bc08      	pop	{r3}
 800b700:	469e      	mov	lr, r3
 800b702:	4770      	bx	lr

0800b704 <_fini>:
 800b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b706:	bf00      	nop
 800b708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70a:	bc08      	pop	{r3}
 800b70c:	469e      	mov	lr, r3
 800b70e:	4770      	bx	lr
